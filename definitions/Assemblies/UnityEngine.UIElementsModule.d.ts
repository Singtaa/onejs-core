// @ts-nocheck
declare namespace CS {
    // const __keep_incompatibility: unique symbol;
    // 
    // interface $Ref<T> {
    //     value: T
    // }
    // namespace System {
    //     interface Array$1<T> extends System.Array {
    //         get_Item(index: number):T;
    //         
    //         set_Item(index: number, value: T):void;
    //     }
    // }
    // interface $Task<T> {}
    namespace UnityEngine.UIElements {
        /** 
        Options to enable or disable filters for the dynamic atlas.
        */
        enum DynamicAtlasFilters
        { None = 0, Readability = 1, Size = 2, Format = 4, ColorSpace = 8, FilterMode = 16 }
        /** 
        Delegate that can be used as a custom filter for the dynamic atlas.
        * @param $texture The texture to filter.
        * @param $filtersToApply The filters the dynamic atlas applies when the delegate returns <c>true<c>.
        by default, this value is equal to <see cref="DynamicAtlasSettings.activeFilters" >.
        * @returns 
        When false, the texture cannot be added to the atlas. When true the texture is added to the atlas,
        as long as it is not excluded by filtersToApply.
        */
        interface DynamicAtlasCustomFilter
        { 
        (texture: UnityEngine.Texture2D, filtersToApply: $Ref<UnityEngine.UIElements.DynamicAtlasFilters>) : boolean; 
        Invoke?: (texture: UnityEngine.Texture2D, filtersToApply: $Ref<UnityEngine.UIElements.DynamicAtlasFilters>) => boolean;
        }
        var DynamicAtlasCustomFilter: { new (func: (texture: UnityEngine.Texture2D, filtersToApply: $Ref<UnityEngine.UIElements.DynamicAtlasFilters>) => boolean): DynamicAtlasCustomFilter; }
        /** 
        Script interface for VisualElement background-position style property IStyle.BackgroundPosition.
        */
        class BackgroundPosition extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.BackgroundPosition>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Background position type
            */
            public keyword : UnityEngine.UIElements.BackgroundPositionKeyword
            /** 
            Background offset
            */
            public offset : UnityEngine.UIElements.Length
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.BackgroundPosition) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.BackgroundPosition, $style2: UnityEngine.UIElements.BackgroundPosition) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.BackgroundPosition, $style2: UnityEngine.UIElements.BackgroundPosition) : boolean
            public constructor ($keyword: UnityEngine.UIElements.BackgroundPositionKeyword)
            public constructor ($keyword: UnityEngine.UIElements.BackgroundPositionKeyword, $offset: UnityEngine.UIElements.Length)
        }
        /** 
        Defines the position of the background.
        */
        enum BackgroundPositionKeyword
        { Center = 0, Top = 1, Bottom = 2, Left = 3, Right = 4 }
        /** 
        Represents a distance value.
        */
        class Length extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Length>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The length value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The unit of the value property.
            */
            public get unit(): UnityEngine.UIElements.LengthUnit;
            public set unit(value: UnityEngine.UIElements.LengthUnit);
            /** 
            Creates a percentage Length from a float.
            * @returns The created length. 
            */
            public static Percent ($value: number) : UnityEngine.UIElements.Length
            /** 
            Creates an Auto Length Length.
            * @returns Auto length. 
            */
            public static Auto () : UnityEngine.UIElements.Length
            /** 
            Creates a None Length Length.
            * @returns None length. 
            */
            public static None () : UnityEngine.UIElements.Length
            /** 
            Check if Length is Auto.
            * @returns true if Length is Auto, false otherwise 
            */
            public IsAuto () : boolean
            /** 
            Check if Length is None.
            * @returns true if Length is None, false otherwise 
            */
            public IsNone () : boolean
            public static op_Implicit ($value: number) : UnityEngine.UIElements.Length
            public static op_Equality ($lhs: UnityEngine.UIElements.Length, $rhs: UnityEngine.UIElements.Length) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Length, $rhs: UnityEngine.UIElements.Length) : boolean
            public Equals ($other: UnityEngine.UIElements.Length) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($value: number)
            public constructor ($value: number, $unit: UnityEngine.UIElements.LengthUnit)
        }
        /** 
        Script interface for VisualElement background-repeat style property IStyle.backgroundRepeat.
        */
        class BackgroundRepeat extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.BackgroundRepeat>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Background repeat in the x direction.
            */
            public x : UnityEngine.UIElements.Repeat
            /** 
            Background repeat in the y direction.
            */
            public y : UnityEngine.UIElements.Repeat
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.BackgroundRepeat) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.BackgroundRepeat, $style2: UnityEngine.UIElements.BackgroundRepeat) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.BackgroundRepeat, $style2: UnityEngine.UIElements.BackgroundRepeat) : boolean
            public constructor ($repeatX: UnityEngine.UIElements.Repeat, $repeatY: UnityEngine.UIElements.Repeat)
        }
        /** 
        Defines how the background is repeated.
        */
        enum Repeat
        { NoRepeat = 0, Space = 1, Round = 2, Repeat = 3 }
        /** 
        Script interface for VisualElement background-size style property IStyle.BackgroundSize.
        */
        class BackgroundSize extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.BackgroundSize>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Background size type
            */
            public get sizeType(): UnityEngine.UIElements.BackgroundSizeType;
            public set sizeType(value: UnityEngine.UIElements.BackgroundSizeType);
            /** 
            Background size x
            */
            public get x(): UnityEngine.UIElements.Length;
            public set x(value: UnityEngine.UIElements.Length);
            /** 
            Background size y
            */
            public get y(): UnityEngine.UIElements.Length;
            public set y(value: UnityEngine.UIElements.Length);
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.BackgroundSize) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.BackgroundSize, $style2: UnityEngine.UIElements.BackgroundSize) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.BackgroundSize, $style2: UnityEngine.UIElements.BackgroundSize) : boolean
            public constructor ($sizeX: UnityEngine.UIElements.Length, $sizeY: UnityEngine.UIElements.Length)
            public constructor ($sizeType: UnityEngine.UIElements.BackgroundSizeType)
        }
        /** 
        Defines the size of the background.
        */
        enum BackgroundSizeType
        { Length = 0, Cover = 1, Contain = 2 }
        /** 
        Interface for classes capable of having callbacks to handle events.
        */
        class CallbackEventHandler extends System.Object implements UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if object has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Return true if event handlers for the event propagation BubbleUp phase have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        interface IEventHandler
        {
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            HasBubbleUpHandlers () : boolean
        }
        interface IEventHandler {
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            HasMouseCapture () : boolean;
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            CaptureMouse () : void;
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            ReleaseMouse () : void;
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            HasPointerCapture ($pointerId: number) : boolean;
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            CapturePointer ($pointerId: number) : void;
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            ReleasePointer ($pointerId: number) : void;
        }
        /** 
        Base class for objects that can get the focus.
        */
        class Focusable extends UnityEngine.UIElements.CallbackEventHandler implements UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            Return the focus controller for this element.
            */
            public get focusController(): UnityEngine.UIElements.FocusController;
            /** 
            True if the element can be focused.
            */
            public get focusable(): boolean;
            public set focusable(value: boolean);
            /** 
            An integer used to sort focusables in the focus ring. Must be greater than or equal to zero.
            */
            public get tabIndex(): number;
            public set tabIndex(value: number);
            /** 
            Whether the element should delegate the focus to its children.
            */
            public get delegatesFocus(): boolean;
            public set delegatesFocus(value: boolean);
            /** 
            Return true if the element can be focused.
            */
            public get canGrabFocus(): boolean;
            /** 
            Attempt to give the focus to this element.
            */
            public Focus () : void
            /** 
            Tell the element to release the focus.
            */
            public Blur () : void
        }
        /** 
        Base class for objects that are part of the UIElements visual tree.
        */
        class VisualElement extends UnityEngine.UIElements.Focusable implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of local disabled elements.
            */
            public static disabledUssClassName : string
            /** 
            Used for view data persistence, such as tree expanded states, scroll position, or zoom level.
            */
            public get viewDataKey(): string;
            public set viewDataKey(value: string);
            /** 
            This property can be used to associate application-specific user data with this VisualElement.
            */
            public get userData(): any;
            public set userData(value: any);
            public get canGrabFocus(): boolean;
            public get focusController(): UnityEngine.UIElements.FocusController;
            /** 
            A combination of hint values that specify high-level intended usage patterns for the VisualElement.
            This property can only be set when the VisualElement is not yet part of a Panel. Once part of a Panel, this property becomes effectively read-only, and attempts to change it will throw an exception.
            The specification of proper UsageHints drives the system to make better decisions on how to process or accelerate certain operations based on the anticipated usage pattern.
            Note that those hints do not affect behavioral or visual results, but only affect the overall performance of the panel and the elements within.
            It's advised to always consider specifying the proper UsageHints, but keep in mind that some UsageHints might be internally ignored under certain conditions (e.g. due to hardware limitations on the target platform).
            */
            public get usageHints(): UnityEngine.UIElements.UsageHints;
            public set usageHints(value: UnityEngine.UIElements.UsageHints);
            /** 
            Returns a transform object for this VisualElement.
            ITransform
            */
            public get transform(): UnityEngine.UIElements.ITransform;
            /** 
            The position and size of the VisualElement relative to its parent, as computed by the layout system.
            */
            public get layout(): UnityEngine.Rect;
            /** 
            The rectangle of the content area of the element, in the local space of the element.
            */
            public get contentRect(): UnityEngine.Rect;
            /** 
            Returns a Rect representing the Axis-aligned Bounding Box (AABB) after applying the world transform.
            */
            public get worldBound(): UnityEngine.Rect;
            /** 
            Returns a Rect representing the Axis-aligned Bounding Box (AABB) after applying the transform, but before applying the layout translation.
            */
            public get localBound(): UnityEngine.Rect;
            /** 
            Returns a matrix that cumulates the following operations (in order):
            -Local Scaling
            -Local Rotation
            -Local Translation
            -Layout Translation
            -Parent worldTransform (recursive definition - consider identity when there is no parent)
            */
            public get worldTransform(): UnityEngine.Matrix4x4;
            /** 
            Determines if this element can be pick during mouseEvents or IPanel.Pick queries.
            */
            public get pickingMode(): UnityEngine.UIElements.PickingMode;
            public set pickingMode(value: UnityEngine.UIElements.PickingMode);
            /** 
            The name of this VisualElement.
            */
            public get name(): string;
            public set name(value: string);
            /** 
            Returns true if the VisualElement is enabled in its own hierarchy.
            */
            public get enabledInHierarchy(): boolean;
            /** 
            Returns true if the VisualElement is enabled locally.
            */
            public get enabledSelf(): boolean;
            /** 
            Indicates the directionality of the element's text. The value will propagate to the element's children.
            */
            public get languageDirection(): UnityEngine.UIElements.LanguageDirection;
            public set languageDirection(value: UnityEngine.UIElements.LanguageDirection);
            /** 
            Indicates whether or not this element should be rendered.
            */
            public get visible(): boolean;
            public set visible(value: boolean);
            /** 
            Called when the VisualElement visual contents need to be (re)generated.
            */
            public get generateVisualContent(): System.Action$1<UnityEngine.UIElements.MeshGenerationContext>;
            public set generateVisualContent(value: System.Action$1<UnityEngine.UIElements.MeshGenerationContext>);
            /** 
            Assigns a data source to this VisualElement which overrides any inherited data source. This data source is
            inherited by all children.
            */
            public get dataSource(): any;
            public set dataSource(value: any);
            /** 
            Path from the data source to the value.
            */
            public get dataSourcePath(): Unity.Properties.PropertyPath;
            public set dataSourcePath(value: Unity.Properties.PropertyPath);
            /** 
            Returns the UIElements experimental interfaces.
            */
            public get experimental(): UnityEngine.UIElements.IExperimentalFeatures;
            /** 
            Access to this element physical hierarchy
            */
            public get hierarchy(): UnityEngine.UIElements.VisualElement.Hierarchy;
            /** 
            The parent of this VisualElement.
            */
            public get parent(): UnityEngine.UIElements.VisualElement;
            /** 
            The panel onto which this VisualElement is attached.
            */
            public get panel(): UnityEngine.UIElements.IPanel;
            /** 
            Child elements are added to it, usually this is the same as the element itself.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Stores the asset reference, if the generated element is cloned from a VisualTreeAsset.
            */
            public get visualTreeAssetSource(): UnityEngine.UIElements.VisualTreeAsset;
            /** 
            Number of child elements in this object's contentContainer.
            */
            public get childCount(): number;
            /** 
            Retrieves this VisualElement's IVisualElementScheduler
            */
            public get schedule(): UnityEngine.UIElements.IVisualElementScheduler;
            /** 
            Sets the VisualElement style values.
            */
            public get style(): UnityEngine.UIElements.IStyle;
            /** 
            Returns the VisualElement resolved style values.
            */
            public get resolvedStyle(): UnityEngine.UIElements.IResolvedStyle;
            /** 
            Returns the custom style properties accessor for this element.
            */
            public get customStyle(): UnityEngine.UIElements.ICustomStyle;
            /** 
            Returns a VisualElementStyleSheetSet that manipulates style sheets attached to this element.
            */
            public get styleSheets(): UnityEngine.UIElements.VisualElementStyleSheetSet;
            /** 
            Text to display inside an information box after the user hovers the element for a small amount of time. This is only supported in the Editor UI.
            */
            public get tooltip(): string;
            public set tooltip(value: string);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Changes the VisualElement enabled state. A disabled VisualElement does not receive most events.
            * @param $value New enabled state
            */
            public SetEnabled ($value: boolean) : void
            /** 
            Triggers a repaint of the VisualElement on the next frame.
            This method is called internally when a change occurs that requires a repaint, such as when UIElements.BaseField_1.value is changed or the text in a Label.
            If you are implementing a custom control, you can call this method to trigger a repaint when a change occurs that requires a repaint such as when using
            generateVisualContent to render a mesh and the mesh data has now changed.
            */
            public MarkDirtyRepaint () : void
            /** 
            Checks if the specified point intersects with this VisualElement's layout.
            * @param $localPoint The point in the local space of the element.
            * @returns Returns true if the point is contained within the element's layout. Otherwise, returns false. 
            */
            public ContainsPoint ($localPoint: UnityEngine.Vector2) : boolean
            public Overlaps ($rectangle: UnityEngine.Rect) : boolean
            /** 
            Retrieve the classes for this element.
            * @returns A class list. 
            */
            public GetClasses () : System.Collections.Generic.IEnumerable$1<string>
            /** 
            Removes all classes from the class list of this element.
            AddToClassList
            */
            public ClearClassList () : void
            /** 
            Adds a class to the class list of the element in order to assign styles from USS. Note the class name is case-sensitive.
            * @param $className The name of the class to add to the list.
            */
            public AddToClassList ($className: string) : void
            /** 
            Removes a class from the class list of the element.
            * @param $className The name of the class to remove to the list.
            */
            public RemoveFromClassList ($className: string) : void
            /** 
            Toggles between adding and removing the given class name from the class list.
            * @param $className The class name to add or remove from the class list.
            */
            public ToggleInClassList ($className: string) : void
            /** 
            Enables or disables the class with the given name.
            * @param $className The name of the class to enable or disable.
            * @param $enable A boolean flag that adds or removes the class name from the class list. If true, EnableInClassList adds the class name to the class list. If false, EnableInClassList removes the class name from the class list.
            */
            public EnableInClassList ($className: string, $enable: boolean) : void
            /** 
            Searches for a class in the class list of this element.
            * @param $cls The name of the class for the search query.
            * @returns Returns true if the class is part of the list. Otherwise, returns false. 
            */
            public ClassListContains ($cls: string) : boolean
            /** 
            Searches up the hierarchy of this VisualElement and retrieves stored userData, if any is found.
            */
            public FindAncestorUserData () : any
            /** 
            Assigns a binding between a target and a source.
            * @param $bindingId The binding ID.
            * @param $binding The binding object.
            */
            public SetBinding ($bindingId: UnityEngine.UIElements.BindingId, $binding: UnityEngine.UIElements.Binding) : void
            /** 
            Gets the binding instance for the provided targeted property.
            * @param $bindingId The binding ID.
            * @returns The binding instance, if it exists. 
            */
            public GetBinding ($bindingId: UnityEngine.UIElements.BindingId) : UnityEngine.UIElements.Binding
            /** 
            Gets the binding instance for the provided targeted property.
            * @param $bindingId The binding ID.
            * @param $binding When this method returns, contains the binding associated with the target property, if it exists; otherwise contains <see langword="null" />
            * @returns true if the binding exists; false otherwise. 
            */
            public TryGetBinding ($bindingId: UnityEngine.UIElements.BindingId, $binding: $Ref<UnityEngine.UIElements.Binding>) : boolean
            /** 
            Gets information on all the bindings of the current element.
            * @returns The bindings information. 
            */
            public GetBindingInfos () : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.BindingInfo>
            /** 
            Allows to know if a target property has a binding associated to it.
            * @param $bindingId The binding ID.
            * @returns true if the property has a binding; false otherwise. 
            */
            public HasBinding ($bindingId: UnityEngine.UIElements.BindingId) : boolean
            /** 
            Removes a binding from the element.
            * @param $bindingId The id of the binding to unbind on this element.
            */
            public ClearBinding ($bindingId: UnityEngine.UIElements.BindingId) : void
            /** 
            Removes all bindings from the element.
            */
            public ClearBindings () : void
            /** 
            Queries the dataSource and dataSourcePath inherited from the hierarchy.
            * @returns A context object with the hierarchical data source and data source path. 
            */
            public GetHierarchicalDataSourceContext () : UnityEngine.UIElements.DataSourceContext
            /** 
            Queries the dataSource and dataSourcePath of a binding object.
            * @param $bindingId The binding ID to query.
            * @returns A context object with the data source and data source path of a binding object. 
            */
            public GetDataSourceContext ($bindingId: UnityEngine.UIElements.BindingId) : UnityEngine.UIElements.DataSourceContext
            /** 
            Queries the dataSource and dataSourcePath of a binding object.
            * @param $bindingId The binding ID to query.
            * @param $context The resulting context object.
            * @returns Returns true if a binding with the provided id was registered on the element; false otherwise. 
            */
            public TryGetDataSourceContext ($bindingId: UnityEngine.UIElements.BindingId, $context: $Ref<UnityEngine.UIElements.DataSourceContext>) : boolean
            /** 
            Add an element to this element's contentContainer
            */
            public Add ($child: UnityEngine.UIElements.VisualElement) : void
            /** 
            Insert an element into this element's contentContainer
            */
            public Insert ($index: number, $element: UnityEngine.UIElements.VisualElement) : void
            /** 
            Removes this child from the contentContainerhierarchy.
            */
            public Remove ($element: UnityEngine.UIElements.VisualElement) : void
            /** 
            Remove the child element located at this position from this element's contentContainer
            */
            public RemoveAt ($index: number) : void
            /** 
            Remove all child elements from this element's contentContainer
            */
            public Clear () : void
            /** 
            Retrieves the child element at a specific index.
            * @param $index The index of the element.
            */
            public ElementAt ($index: number) : UnityEngine.UIElements.VisualElement
            public get_Item ($key: number) : UnityEngine.UIElements.VisualElement
            /** 
            Retrieves the child index of the specified VisualElement.
            * @param $element The child element to retrieve.
            * @returns The index of the child, or -1 if the child is not found. 
            */
            public IndexOf ($element: UnityEngine.UIElements.VisualElement) : number
            /** 
            Returns the elements from its contentContainer.
            */
            public Children () : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.VisualElement>
            public Sort ($comp: System.Comparison$1<UnityEngine.UIElements.VisualElement>) : void
            /** 
            Brings this element to the end of its parent children list. The element will be visually in front of any overlapping sibling elements.
            */
            public BringToFront () : void
            /** 
            Sends this element to the beginning of its parent children list. The element will be visually behind any overlapping sibling elements.
            */
            public SendToBack () : void
            /** 
            Places this element right before the sibling element in their parent children list. If the element and the sibling position overlap, the element will be visually behind of its sibling.
            * @param $sibling The sibling element.
            */
            public PlaceBehind ($sibling: UnityEngine.UIElements.VisualElement) : void
            /** 
            Places this element right after the sibling element in their parent children list. If the element and the sibling position overlap, the element will be visually in front of its sibling.
            * @param $sibling The sibling element.
            */
            public PlaceInFront ($sibling: UnityEngine.UIElements.VisualElement) : void
            /** 
            Removes this element from its parent hierarchy.
            */
            public RemoveFromHierarchy () : void
            /** 
            Checks if this element is an ancestor of the specified child element.
            * @param $child The child element to test against.
            * @returns Returns true if this element is a ancestor of the child element, false otherwise. 
            */
            public Contains ($child: UnityEngine.UIElements.VisualElement) : boolean
            /** 
            Finds the lowest common ancestor between two VisualElements inside the VisualTree hierarchy.
            */
            public FindCommonAncestor ($other: UnityEngine.UIElements.VisualElement) : UnityEngine.UIElements.VisualElement
            public constructor ()
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
        }
        /** 
        Base class for objects that are part of the UIElements visual tree.
        */
        interface VisualElement {
            /** 
            Convenience overload, shorthand for UQueryExtensions.Query|Query().UQueryBuilder_1.Build|Build().UQueryBuilder_1.First|First()
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $classes If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns The first element matching all the criteria, or null if none was found. 
            */
            Q ($name?: string, ...classes: string[]) : UnityEngine.UIElements.VisualElement;
            /** 
            Convenience overload, shorthand for UQueryExtensions.Query|Query().UQueryBuilder_1.Build|Build().UQueryBuilder_1.First|First()
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $className If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns The first element matching all the criteria, or null if none was found. 
            */
            Q ($name?: string, $className?: string) : UnityEngine.UIElements.VisualElement;
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $classes If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            Query ($name?: string, ...classes: string[]) : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>;
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $className If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            Query ($name?: string, $className?: string) : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>;
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            Query () : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>;
            /** 
            Aligns a VisualElement's left, top, right and bottom edges with the corresponding edges of its parent.
            * @param $elem The element to be aligned with its parent
            */
            StretchToParentSize () : void;
            /** 
            Aligns a VisualElement's left and right edges with the corresponding edges of its parent.
            * @param $elem The element to be aligned with its parent
            */
            StretchToParentWidth () : void;
            /** 
            Add a manipulator associated to a VisualElement.
            * @param $ele VisualElement associated to the manipulator.
            * @param $manipulator Manipulator to be added to the VisualElement.
            */
            AddManipulator ($manipulator: UnityEngine.UIElements.IManipulator) : void;
            /** 
            Remove a manipulator associated to a VisualElement.
            * @param $ele VisualElement associated to the manipulator.
            * @param $manipulator Manipulator to be removed from the VisualElement.
            */
            RemoveManipulator ($manipulator: UnityEngine.UIElements.IManipulator) : void;
            /** 
            Transforms a point from the world space to the local space of the element.
            * @param $ele The element to use as a reference for the local space.
            * @param $p The point to transform, in world space.
            * @returns A point in the local space of the element. 
            */
            WorldToLocal ($p: UnityEngine.Vector2) : UnityEngine.Vector2;
            /** 
            Transforms a point from the local space of the element to the world space.
            * @param $ele The element to use as a reference for the local space.
            * @param $p The point to transform, in local space.
            * @returns A point in the world space. 
            */
            LocalToWorld ($p: UnityEngine.Vector2) : UnityEngine.Vector2;
            /** 
            Transforms a rectangle from the world space to the local space of the element.
            * @param $ele The element to use as a reference for the local space.
            * @param $r The rectangle to transform, in world space.
            * @returns A rectangle in the local space of the element. 
            */
            WorldToLocal ($r: UnityEngine.Rect) : UnityEngine.Rect;
            /** 
            Transforms a rectangle from the local space of the element to the world space.
            * @param $ele The element to use as a reference for the local space.
            * @param $r The rectangle to transform, in local space.
            * @returns A rectangle in the world space. 
            */
            LocalToWorld ($r: UnityEngine.Rect) : UnityEngine.Rect;
            /** 
            Transforms a point from the local space of an element to the local space of another element.
            * @param $src The element to use as a reference as the source local space.
            * @param $dest The element to use as a reference as the destination local space.
            * @param $point The point to transform, in the local space of the source element.
            * @returns A point in the local space of destination element. 
            */
            ChangeCoordinatesTo ($dest: UnityEngine.UIElements.VisualElement, $point: UnityEngine.Vector2) : UnityEngine.Vector2;
            /** 
            Transforms a rectangle from the local space of an element to the local space of another element.
            * @param $src The element to use as a reference as the source local space.
            * @param $dest The element to use as a reference as the destination local space.
            * @param $rect The rectangle to transform, in the local space of the source element.
            * @returns A rectangle in the local space of destination element. 
            */
            ChangeCoordinatesTo ($dest: UnityEngine.UIElements.VisualElement, $rect: UnityEngine.Rect) : UnityEngine.Rect;
        }
        interface IStylePropertyAnimations
        {
        }
        interface IVisualElementScheduler
        {
            Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
        }
        interface IResolvedStyle
        {
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            alignContent : UnityEngine.UIElements.Align
            /** 
            Alignment of children on the cross axis of this container.
            */
            alignItems : UnityEngine.UIElements.Align
            /** 
            Similar to align-items, but only for this specific element.
            */
            alignSelf : UnityEngine.UIElements.Align
            /** 
            Background color to paint in the element's box.
            */
            backgroundColor : UnityEngine.Color
            /** 
            Background image to paint in the element's box.
            */
            backgroundImage : UnityEngine.UIElements.Background
            /** 
            Background image x position value.
            */
            backgroundPositionX : UnityEngine.UIElements.BackgroundPosition
            /** 
            Background image y position value.
            */
            backgroundPositionY : UnityEngine.UIElements.BackgroundPosition
            /** 
            Background image repeat value.
            */
            backgroundRepeat : UnityEngine.UIElements.BackgroundRepeat
            /** 
            Background image size value.
            */
            backgroundSize : UnityEngine.UIElements.BackgroundSize
            /** 
            Color of the element's bottom border.
            */
            borderBottomColor : UnityEngine.Color
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            borderBottomLeftRadius : number
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            borderBottomRightRadius : number
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            borderBottomWidth : number
            /** 
            Color of the element's left border.
            */
            borderLeftColor : UnityEngine.Color
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            borderLeftWidth : number
            /** 
            Color of the element's right border.
            */
            borderRightColor : UnityEngine.Color
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            borderRightWidth : number
            /** 
            Color of the element's top border.
            */
            borderTopColor : UnityEngine.Color
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            borderTopLeftRadius : number
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            borderTopRightRadius : number
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            borderTopWidth : number
            /** 
            Bottom distance from the element's box during layout.
            */
            bottom : number
            /** 
            Color to use when drawing the text of an element.
            */
            color : UnityEngine.Color
            /** 
            Defines how an element is displayed in the layout.
            */
            display : UnityEngine.UIElements.DisplayStyle
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            flexBasis : UnityEngine.UIElements.StyleFloat
            /** 
            Direction of the main axis to layout children in a container.
            */
            flexDirection : UnityEngine.UIElements.FlexDirection
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            flexGrow : number
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            flexShrink : number
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            flexWrap : UnityEngine.UIElements.Wrap
            /** 
            Font size to draw the element's text.
            */
            fontSize : number
            /** 
            Fixed height of an element for the layout.
            */
            height : number
            /** 
            Justification of children on the main axis of this container.
            */
            justifyContent : UnityEngine.UIElements.Justify
            /** 
            Left distance from the element's box during layout.
            */
            left : number
            /** 
            Increases or decreases the space between characters.
            */
            letterSpacing : number
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            marginBottom : number
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            marginLeft : number
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            marginRight : number
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            marginTop : number
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            maxHeight : UnityEngine.UIElements.StyleFloat
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            maxWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            minHeight : UnityEngine.UIElements.StyleFloat
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            minWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Specifies the transparency of an element and of its children.
            */
            opacity : number
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            paddingBottom : number
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            paddingLeft : number
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            paddingRight : number
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            paddingTop : number
            /** 
            Element's positioning in its parent container.
            */
            position : UnityEngine.UIElements.Position
            /** 
            Right distance from the element's box during layout.
            */
            right : number
            /** 
            A rotation transformation.
            */
            rotate : UnityEngine.UIElements.Rotate
            /** 
            A scaling transformation.
            */
            scale : UnityEngine.UIElements.Scale
            /** 
            The element's text overflow mode.
            */
            textOverflow : UnityEngine.UIElements.TextOverflow
            /** 
            Top distance from the element's box during layout.
            */
            top : number
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            transformOrigin : UnityEngine.Vector3
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            transitionDelay : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>
            /** 
            Time a transition animation should take to complete.
            */
            transitionDuration : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>
            /** 
            Properties to which a transition effect should be applied.
            */
            transitionProperty : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            transitionTimingFunction : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>
            /** 
            A translate transformation.
            */
            translate : UnityEngine.Vector3
            /** 
            Tinting color for the element's backgroundImage.
            */
            unityBackgroundImageTintColor : UnityEngine.Color
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            unityFont : UnityEngine.Font
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            unityFontDefinition : UnityEngine.UIElements.FontDefinition
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            unityFontStyleAndWeight : UnityEngine.FontStyle
            /** 
            Increases or decreases the space between paragraphs.
            */
            unityParagraphSpacing : number
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            unitySliceBottom : number
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            unitySliceLeft : number
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            unitySliceRight : number
            /** 
            Scale applied to an element's slices.
            */
            unitySliceScale : number
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            unitySliceTop : number
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            unityTextAlign : UnityEngine.TextAnchor
            /** 
            Outline color of the text.
            */
            unityTextOutlineColor : UnityEngine.Color
            /** 
            Outline width of the text.
            */
            unityTextOutlineWidth : number
            /** 
            The element's text overflow position.
            */
            unityTextOverflowPosition : UnityEngine.UIElements.TextOverflowPosition
            /** 
            Specifies whether or not an element is visible.
            */
            visibility : UnityEngine.UIElements.Visibility
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            whiteSpace : UnityEngine.UIElements.WhiteSpace
            /** 
            Fixed width of an element for the layout.
            */
            width : number
            /** 
            Increases or decreases the space between words.
            */
            wordSpacing : number
        }
        interface IExperimentalFeatures
        {
            /** 
            Returns the animation experimental interface.
            */
            animation : UnityEngine.UIElements.Experimental.ITransitionAnimations
        }
        interface ITransform
        {
            position: UnityEngine.Vector3
            rotation: UnityEngine.Quaternion
            scale: UnityEngine.Vector3
            matrix: UnityEngine.Matrix4x4
        }
        /** 
        Element that can be bound to a property. For more information, refer to.
        */
        class BindableElement extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
        }
        interface IBindable
        {
            /** 
            Binding object that will be updated.
            */
            binding : UnityEngine.UIElements.IBinding
            /** 
            Path of the target property to be bound.
            */
            bindingPath : string
        }
        interface IBindable {
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            IsBound () : boolean;
        }
        interface IBinding
        {
            /** 
            Called at regular intervals to synchronize bound properties to their IBindable counterparts. Called before the Update() method.
            */
            PreUpdate () : void
            /** 
            Called at regular intervals to synchronize bound properties to their IBindable counterparts. Called before the Update() method.
            */
            Update () : void
            /** 
            Disconnects the field from its bound property
            */
            Release () : void
        }
        /** 
        Generates an instance of the declaring element when the UxmlElementAttribute is used in a custom control. 
        */
        class UxmlSerializedData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns an instance of the declaring element.
            * @returns The new instance of the declaring element. 
            */
            public CreateInstance () : any
            /** 
            Applies serialized field values to a compatible visual element.
            * @param $obj The element to have the serialized data applied to.
            */
            public Deserialize ($obj: any) : void
        }
        /** 
        Option to tell a binding when to update.
        */
        enum BindingUpdateTrigger
        { WhenDirty = 0, OnSourceChanged = 1, EveryUpdate = 2 }
        /** 
        Base class for defining a binding.
        */
        class Binding extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            When set to true, the binding instance updates during the next update cycle.
            When set to false, the binding instance updates only if a change is detected.
            */
            public get isDirty(): boolean;
            /** 
            When set to BindingUpdateTrigger.EveryUpdate, the binding instance updates in every update, regardless of the
            data source version.
            */
            public get updateTrigger(): UnityEngine.UIElements.BindingUpdateTrigger;
            public set updateTrigger(value: UnityEngine.UIElements.BindingUpdateTrigger);
            /** 
            Sets the log level for all binding failures.
            * @param $logLevel The log level.
            */
            public static SetGlobalLogLevel ($logLevel: UnityEngine.UIElements.BindingLogLevel) : void
            /** 
            Sets the log level for binding failures on a panel.
            * @param $panel The panel to apply to.
            * @param $logLevel The log level.
            */
            public static SetPanelLogLevel ($panel: UnityEngine.UIElements.IPanel, $logLevel: UnityEngine.UIElements.BindingLogLevel) : void
            /** 
            Resets the log level for binding failures on a panel to use the global setting.
            * @param $panel The panel to reset the global log level.
            */
            public static ResetPanelLogLevel ($panel: UnityEngine.UIElements.IPanel) : void
            /** 
            Notifies the binding system to process this binding.
            */
            public MarkDirty () : void
        }
        /** 
        Options to change the log level for warnings that occur during the update of data bindings.
        */
        enum BindingLogLevel
        { None = 0, Once = 1, All = 2 }
        interface IPanel extends System.IDisposable
        {
            /** 
            Root of the VisualElement hierarchy.
            */
            visualTree : UnityEngine.UIElements.VisualElement
            /** 
            This Panel EventDispatcher.
            */
            dispatcher : UnityEngine.UIElements.EventDispatcher
            /** 
            Describes in which context a VisualElement hierarchy is being ran.
            */
            contextType : UnityEngine.UIElements.ContextType
            /** 
            Return the focus controller for this panel.
            */
            focusController : UnityEngine.UIElements.FocusController
            /** 
            The Contextual menu manager for the panel.
            */
            contextualMenuManager : UnityEngine.UIElements.ContextualMenuManager
            /** 
            Checks whether any element within the panel has had any changes to its state since the panel was last rendered.
            */
            isDirty : boolean
            /** 
            Returns the top element at this position. Will not return elements with pickingMode set to PickingMode.Ignore.
            * @param $point World coordinates.
            * @returns Top VisualElement at the position. Null if none was found. 
            */
            Pick ($point: UnityEngine.Vector2) : UnityEngine.UIElements.VisualElement
            PickAll ($point: UnityEngine.Vector2, $picked: System.Collections.Generic.List$1<UnityEngine.UIElements.VisualElement>) : UnityEngine.UIElements.VisualElement
        }
        interface IPanel {
            /** 
            Resets the dynamic atlas of the panel. Textured elements will be repainted.
            */
            ResetDynamicAtlas () : void;
            /** 
            Notifies the dynamic atlas of the panel that the content of the provided texture has changed. If the dynamic
            atlas contains the texture, it will update it.
            * @param $panel The current panel
            * @param $texture The texture whose content has changed.
            */
            SetTextureDirty ($texture: UnityEngine.Texture2D) : void;
            /** 
            Returns the element that is capturing the pointer.
            * @param $panel The panel that holds the element.
            * @param $pointerId The captured pointer.
            * @returns The element that is capturing the pointer. 
            */
            GetCapturingElement ($pointerId: number) : UnityEngine.UIElements.IEventHandler;
            /** 
            Releases the pointer.
            * @param $panel The panel that holds the element that captured the pointer.
            * @param $pointerId The captured pointer.
            */
            ReleasePointer ($pointerId: number) : void;
        }
        /** 
        Contains information passed to binding instances during registration and deregistration.
        */
        class BindingActivationContext extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The target element of the binding.
            */
            public get targetElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The binding id being activated/deactivated.
            */
            public get bindingId(): UnityEngine.UIElements.BindingId;
        }
        /** 
        Defines a binding property that serves as an identifier for the binding system.
        */
        class BindingId extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.BindingId>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns an invalid binding property.
            */
            public static Invalid : UnityEngine.UIElements.BindingId
            public static op_Implicit ($vep: $Ref<UnityEngine.UIElements.BindingId>) : Unity.Properties.PropertyPath
            public static op_Implicit ($vep: $Ref<UnityEngine.UIElements.BindingId>) : string
            public static op_Implicit ($name: string) : UnityEngine.UIElements.BindingId
            public static op_Implicit ($path: $Ref<Unity.Properties.PropertyPath>) : UnityEngine.UIElements.BindingId
            /** 
            Indicates whether two binding properties are equal.
            * @param $other The object to compare with the current instance.
            * @returns true if obj and this instance are the same type and represent the same value; otherwise, false. 
            */
            public Equals ($other: UnityEngine.UIElements.BindingId) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($lhs: $Ref<UnityEngine.UIElements.BindingId>, $rhs: $Ref<UnityEngine.UIElements.BindingId>) : boolean
            public static op_Inequality ($lhs: $Ref<UnityEngine.UIElements.BindingId>, $rhs: $Ref<UnityEngine.UIElements.BindingId>) : boolean
            public constructor ($path: string)
            public constructor ($path: $Ref<Unity.Properties.PropertyPath>)
        }
        /** 
        Context object containing the necessary information to resolve a binding.
        */
        class BindingContext extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The target element of the binding.
            */
            public get targetElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The binding ID of the element to bind.
            */
            public get bindingId(): UnityEngine.UIElements.BindingId;
            /** 
            The resolved path to the value in the source, including relative data source paths found in the hierarchy
            between the target and to the resolved source owner.
            */
            public get dataSourcePath(): Unity.Properties.PropertyPath;
            /** 
            The data source that was resolved for a given binding.
            */
            public get dataSource(): any;
        }
        /** 
        Status to report the result of a binding update.
        */
        enum BindingStatus
        { Success = 0, Failure = 1, Pending = 2 }
        /** 
        Provides information about the binding update.
        */
        class BindingResult extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The status from the binding update.
            */
            public get status(): UnityEngine.UIElements.BindingStatus;
            /** 
            Gets the message associated with the binding update.
            */
            public get message(): string;
            public constructor ($status: UnityEngine.UIElements.BindingStatus, $message?: string)
        }
        /** 
        A type to hold information about a conversion registry used locally on bindings.
        */
        class ConverterGroup extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The group id.
            */
            public get id(): string;
            /** 
            Optional and alternative name for a converter group ID, to be displayed to users to assist while authoring.
            */
            public get displayName(): string;
            /** 
            Optional description for a converter group ID that may include information about what this group contains
            or is used for, to be displayed to users to assist while authoring.
            */
            public get description(): string;
            public constructor ($id: string, $displayName?: string, $description?: string)
        }
        /** 
        Provides a set of static methods to register and use converter groups and registers a set of global converters.
        ConverterGroup.
        DataBinding.
        */
        class ConverterGroups extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Registers a converter group by ID. Converter groups can be applied on a binding using local converters.
            * @param $converterGroup The converter group to register.
            */
            public static RegisterConverterGroup ($converterGroup: UnityEngine.UIElements.ConverterGroup) : void
            /** 
            Retrieves a converter group by ID.
            * @param $groupId The group ID.
            * @param $converterGroup The converter group.
            */
            public static TryGetConverterGroup ($groupId: string, $converterGroup: $Ref<UnityEngine.UIElements.ConverterGroup>) : boolean
        }
        /** 
        Base class for general purpose binding extensibility.
        */
        class CustomBinding extends UnityEngine.UIElements.Binding
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Binding mode to control how a binding is updated.
        */
        enum BindingMode
        { TwoWay = 0, ToSource = 1, ToTarget = 2, ToTargetOnce = 3 }
        /** 
        Binding type that enables data synchronization between a property of a data source and a property of a VisualElement.
        */
        class DataBinding extends UnityEngine.UIElements.Binding implements UnityEngine.UIElements.IDataSourceProvider
        {
            protected [__keep_incompatibility]: never;
            /** 
            Object that serves as a local source for the binding, and is particularly useful when the data source is not
            part of the UI hierarchy, such as a static localization table. If this object is null, the binding resolves
            the data source using its normal resolution method.
            */
            public get dataSource(): any;
            public set dataSource(value: any);
            /** 
            Path from the data source to the value.
            */
            public get dataSourcePath(): Unity.Properties.PropertyPath;
            public set dataSourcePath(value: Unity.Properties.PropertyPath);
            /** 
            Controls how this binding should be updated.
            The default value is BindingMode.TwoWay.
            */
            public get bindingMode(): UnityEngine.UIElements.BindingMode;
            public set bindingMode(value: UnityEngine.UIElements.BindingMode);
            /** 
            Returns the ConverterGroup used when trying to convert data from the data source to a UI property.
            */
            public get sourceToUiConverters(): UnityEngine.UIElements.ConverterGroup;
            /** 
            Returns the ConverterGroup used when trying to convert data from a UI property back to the data source.
            */
            public get uiToSourceConverters(): UnityEngine.UIElements.ConverterGroup;
            /** 
            Applies a ConverterGroup to this binding that will be used when converting data between a
            UI control to a data source.
            * @param $group The converter group.
            */
            public ApplyConverterGroupToSource ($group: UnityEngine.UIElements.ConverterGroup) : void
            /** 
            Applies a ConverterGroup to this binding that will be used when converting data between a
            data source to a UI control.
            * @param $group The converter group.
            */
            public ApplyConverterGroupToUI ($group: UnityEngine.UIElements.ConverterGroup) : void
            public constructor ()
        }
        interface IDataSourceProvider
        {
            /** 
            Data source object that is local to the binding object.
            */
            dataSource : any
            /** 
            Data source path that is local to the binding object.
            */
            dataSourcePath : Unity.Properties.PropertyPath
        }
        /** 
        Provides information about a binding.
        */
        class BindingInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The visual element targeted by the binding.
            */
            public get targetElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The binding id.
            */
            public get bindingId(): UnityEngine.UIElements.BindingId;
            /** 
            The binding matching this information.
            */
            public get binding(): UnityEngine.UIElements.Binding;
        }
        /** 
        Contains information about the data source and data source path of a binding.
        */
        class DataSourceContext extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The resolved data source.
            */
            public get dataSource(): any;
            /** 
            The resolved data source path.
            */
            public get dataSourcePath(): Unity.Properties.PropertyPath;
            public constructor ($dataSource: any, $dataSourcePath: $Ref<Unity.Properties.PropertyPath>)
        }
        /** 
        Contains information passed to binding instances when the resolved data source context has changed.
        */
        class DataSourceContextChanged extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns the target element of the binding.
            */
            public get targetElement(): UnityEngine.UIElements.VisualElement;
            /** 
            Returns the id of the binding.
            */
            public get bindingId(): UnityEngine.UIElements.BindingId;
            /** 
            Returns the previous resolved data source context of the binding.
            */
            public get previousContext(): UnityEngine.UIElements.DataSourceContext;
            /** 
            Returns the newly resolved data source of the binding.
            */
            public get newContext(): UnityEngine.UIElements.DataSourceContext;
        }
        interface IDataSourceViewHashProvider
        {
            /** 
            Returns the hash code of the view, which can be used to notify the data binding system to refresh.
            * @returns The hash code of the view. 
            */
            GetViewHashCode () : bigint
        }
        /** 
        Provides information about the property that has changed.
        */
        class BindablePropertyChangedEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns the name of the property that has changed.
            */
            public get propertyName(): UnityEngine.UIElements.BindingId;
            public constructor ($propertyName: $Ref<UnityEngine.UIElements.BindingId>)
        }
        interface INotifyBindablePropertyChanged
        {
            add_propertyChanged ($value: System.EventHandler$1<UnityEngine.UIElements.BindablePropertyChangedEventArgs>) : void
            remove_propertyChanged ($value: System.EventHandler$1<UnityEngine.UIElements.BindablePropertyChangedEventArgs>) : void
        }
        /** 
        Base class for all Manipulator implementations. For more information, refer to.
        */
        class Manipulator extends System.Object implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            /** 
            VisualElement being manipulated.
            */
            public get target(): UnityEngine.UIElements.VisualElement;
            public set target(value: UnityEngine.UIElements.VisualElement);
        }
        interface IManipulator
        {
            /** 
            VisualElement being manipulated.
            */
            target : UnityEngine.UIElements.VisualElement
        }
        /** 
        MouseManipulators have a list of activation filters.
        */
        class MouseManipulator extends UnityEngine.UIElements.Manipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            /** 
            List of Activationfilters.
            */
            public get activators(): System.Collections.Generic.List$1<UnityEngine.UIElements.ManipulatorActivationFilter>;
        }
        /** 
        PointerManipulators have a list of activation filters.
        */
        class PointerManipulator extends UnityEngine.UIElements.MouseManipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Manipulator that tracks Mouse events on an element and callbacks when the elements is clicked.
        */
        class Clickable extends UnityEngine.UIElements.PointerManipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            /** 
            Specifies the mouse position saved during the last mouse event on the target Element.
            */
            public get lastMousePosition(): UnityEngine.Vector2;
            public add_clickedWithEventInfo ($value: System.Action$1<UnityEngine.UIElements.EventBase>) : void
            public remove_clickedWithEventInfo ($value: System.Action$1<UnityEngine.UIElements.EventBase>) : void
            public add_clicked ($value: System.Action) : void
            public remove_clicked ($value: System.Action) : void
            public constructor ($handler: System.Action, $delay: bigint, $interval: bigint)
            public constructor ($handler: System.Action$1<UnityEngine.UIElements.EventBase>)
            public constructor ($handler: System.Action)
        }
        /** 
        The base class for all UIElements events.  The class implements IDisposable to ensure proper release of the event from the pool and of any unmanaged resources, when necessary.
        */
        class EventBase extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Retrieves the type ID for this event instance.
            */
            public get eventTypeId(): bigint;
            /** 
            The time when the event was created, in milliseconds.
            */
            public get timestamp(): bigint;
            /** 
            Returns whether this event type bubbles up in the event propagation path.
            */
            public get bubbles(): boolean;
            /** 
            Returns whether this event is sent down the event propagation path during the TrickleDown phase.
            */
            public get tricklesDown(): boolean;
            /** 
            The target visual element that received this event. Unlike currentTarget, this target does not change when
            the event is sent to other elements along the propagation path.
            */
            public get target(): UnityEngine.UIElements.IEventHandler;
            public set target(value: UnityEngine.UIElements.IEventHandler);
            /** 
            Whether StopPropagation() was called for this event.
            */
            public get isPropagationStopped(): boolean;
            /** 
            Indicates whether StopImmediatePropagation() was called for this event.
            */
            public get isImmediatePropagationStopped(): boolean;
            /** 
            The current propagation phase for this event.
            */
            public get propagationPhase(): UnityEngine.UIElements.PropagationPhase;
            /** 
            The current target of the event. This is the VisualElement, in the propagation path, for which event handlers are currently being executed.
            */
            public get currentTarget(): UnityEngine.UIElements.IEventHandler;
            /** 
            Indicates whether the event is being dispatched to a visual element. An event cannot be redispatched while it being dispatched. If you need to recursively dispatch an event, it is recommended that you use a copy of the event.
            */
            public get dispatch(): boolean;
            /** 
            The IMGUIEvent at the source of this event. The source can be null since not all events are generated by IMGUI.
            */
            public get imguiEvent(): UnityEngine.Event;
            /** 
            The original mouse position of the IMGUI event, before it is transformed to the current target local coordinates.
            */
            public get originalMousePosition(): UnityEngine.Vector2;
            /** 
            Stops propagating this event. The event is not sent to other elements along the propagation path.
            This method does not prevent other event handlers from executing on the current target.
            If this method is called during the TrickleDown propagation phase, it will prevent default actions
            to be processed, such as an element getting focused as a result of a PointerDownEvent.
            */
            public StopPropagation () : void
            /** 
            Immediately stops the propagation of the event. The event isn't sent to other elements along the propagation path. This method prevents other event handlers from executing on the current target.
            */
            public StopImmediatePropagation () : void
            /** 
            Implementation of IDisposable.
            */
            public Dispose () : void
        }
        /** 
        Base collection view controller. View controllers are meant to take care of data virtualized by any BaseVerticalCollectionView inheritor.
        */
        class CollectionViewController extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The items source stored in a non-generic list.
            */
            public get itemsSource(): System.Collections.IList;
            public set itemsSource(value: System.Collections.IList);
            public add_itemsSourceChanged ($value: System.Action) : void
            public remove_itemsSourceChanged ($value: System.Action) : void
            public add_itemIndexChanged ($value: System.Action$2<number, number>) : void
            public remove_itemIndexChanged ($value: System.Action$2<number, number>) : void
            /** 
            Sets the view for this controller.
            * @param $collectionView The view for this controller. Must not be null.
            */
            public SetView ($collectionView: UnityEngine.UIElements.BaseVerticalCollectionView) : void
            /** 
            Called when this controller is not longer needed to provide a way to release resources.
            */
            public Dispose () : void
            /** 
            Returns the expected item count in the source.
            * @returns The item count. 
            */
            public GetItemsCount () : number
            /** 
            Returns the index for the specified id.
            * @param $id The item id..
            * @returns The item index. 
            */
            public GetIndexForId ($id: number) : number
            /** 
            Returns the id for the specified index.
            * @param $index The item index.
            * @returns The item id. 
            */
            public GetIdForIndex ($index: number) : number
            /** 
            Returns the item with the specified index.
            * @param $index The item index.
            * @returns The object in the source at this index. 
            */
            public GetItemForIndex ($index: number) : any
            /** 
            Returns the item with the specified ID.
            * @param $id The item ID.
            * @returns The object in the source with this ID. 
            */
            public GetItemForId ($id: number) : any
        }
        /** 
        Base collection list view controller. View controllers of this type are meant to take care of data virtualized by any BaseListView inheritor.
        */
        class BaseListViewController extends UnityEngine.UIElements.CollectionViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public add_itemsSourceSizeChanged ($value: System.Action) : void
            public remove_itemsSourceSizeChanged ($value: System.Action) : void
            public add_itemsAdded ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_itemsAdded ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public add_itemsRemoved ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_itemsRemoved ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            /** 
            Returns whether this item needs a drag handle or not with the Animated drag mode.
            * @param $index Item index.
            * @returns Whether or not the drag handle is needed. 
            */
            public NeedsDragHandle ($index: number) : boolean
            /** 
            Adds a certain amount of items at the end of the collection.
            * @param $itemCount The number of items to add.
            */
            public AddItems ($itemCount: number) : void
            /** 
            Moves an item in the source.
            * @param $index The source index.
            * @param $newIndex The destination index.
            */
            public Move ($index: number, $newIndex: number) : void
            /** 
            Removes an item from the source, by index.
            * @param $index The item index.
            */
            public RemoveItem ($index: number) : void
            public RemoveItems ($indices: System.Collections.Generic.List$1<number>) : void
            /** 
            Removes all items from the source.
            */
            public ClearItems () : void
        }
        /** 
        Base collection tree view controller. View controllers of this type are meant to take care of data virtualized by any BaseTreeView inheritor.
        */
        class BaseTreeViewController extends UnityEngine.UIElements.CollectionViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Items for this tree. Contains items that are expanded in the tree.
            */
            public get itemsSource(): System.Collections.IList;
            public set itemsSource(value: System.Collections.IList);
            /** 
            Rebuilds the tree item data and regenerates wrappers to fill the source.
            */
            public RebuildTree () : void
            /** 
            Returns the root items of the tree, by IDs.
            * @returns The root item IDs. 
            */
            public GetRootItemIds () : System.Collections.Generic.IEnumerable$1<number>
            public GetAllItemIds ($rootIds?: System.Collections.Generic.IEnumerable$1<number>) : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Returns the parent ID of an item, by ID.
            * @param $id The ID of the item to fetch the parent from.
            * @returns The parent ID, or -1 if the item is at the root of the tree. 
            */
            public GetParentId ($id: number) : number
            /** 
            Get all children of a specific ID in the tree.
            * @param $id The item ID.
            * @returns The children IDs. 
            */
            public GetChildrenIds ($id: number) : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Moves an item by ID, to a new parent and child index.
            * @param $id The ID of the item to move.
            * @param $newParentId The new parent ID. -1 if moved at the root.
            * @param $childIndex The child index to insert at under the parent. -1 will add as the last child.
            * @param $rebuildTree Whether we need to rebuild tree data. Set to false when doing multiple operations.
            */
            public Move ($id: number, $newParentId: number, $childIndex?: number, $rebuildTree?: boolean) : void
            /** 
            Removes an item by id.
            * @param $id The item id.
            * @param $rebuildTree Whether we need to rebuild tree data. Set to <c>false<c> when doing multiple operations and call <see cref="TreeViewController.RebuildTree()" >.
            * @returns Whether the item was successfully found and removed. 
            */
            public TryRemoveItem ($id: number, $rebuildTree?: boolean) : boolean
            /** 
            Get the number of items in the whole tree.
            * @returns The number of items in the tree. 
            */
            public GetTreeItemsCount () : number
            /** 
            Return whether the item with the specified ID has one or more child.
            * @param $id The item id.
            * @returns Whether the item with the specified ID has one or more child. 
            */
            public HasChildren ($id: number) : boolean
            /** 
            Checks if an ID exists within this tree.
            * @param $id The id to look for.
            * @returns Whether an item with this id exists in the tree. 
            */
            public Exists ($id: number) : boolean
            /** 
            Return whether the item with the specified index has one or more child.
            * @param $index The item index.
            * @returns Whether the item with the specified ID has one or more child. 
            */
            public HasChildrenByIndex ($index: number) : boolean
            /** 
            Gets the children IDs of the item with the specified index.
            * @param $index The item index.
            * @returns The children IDs. 
            */
            public GetChildrenIdsByIndex ($index: number) : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Gets the child index under the parent of the item with the specified ID.
            * @param $id The item ID.
            * @returns The child index under the parent. Returns -1 if the item has no parent or doesn't exist in the tree. 
            */
            public GetChildIndexForId ($id: number) : number
            /** 
            Returns the depth of the element at that ID.
            * @param $id The item ID.
            * @returns The depth of the element. 
            */
            public GetIndentationDepth ($id: number) : number
            /** 
            Return the depth of the element at that index.
            * @param $index The item index.
            * @returns The depth of the element. 
            */
            public GetIndentationDepthByIndex ($index: number) : number
            /** 
            Determines whether the item with the specified ID can be expanded or collapsed.
            */
            public CanChangeExpandedState ($id: number) : boolean
            /** 
            Return whether the item with the specified ID is expanded in the tree.
            * @param $id The item ID
            * @returns Whether the item with the specified ID is expanded in the tree. 
            */
            public IsExpanded ($id: number) : boolean
            /** 
            Return whether the item with the specified index is expanded in the tree.
            * @param $index The item index
            * @returns Whether the item with the specified index is expanded in the tree. Will return false if the index is not valid. 
            */
            public IsExpandedByIndex ($index: number) : boolean
            /** 
            Expands the item with the specified index, making his children visible. Allows to expand the whole hierarchy under that item.
            * @param $index The item index.
            * @param $expandAllChildren Whether the whole hierarchy under that item will be expanded.
            * @param $refresh Whether to refresh items or not. Set to false when doing multiple operations on the tree, to only do one RefreshItems once all operations are done.
            */
            public ExpandItemByIndex ($index: number, $expandAllChildren: boolean, $refresh?: boolean) : void
            /** 
            Expands the item with the specified ID, making its children visible. Allows to expand the whole hierarchy under that item.
            * @param $id The item ID.
            * @param $expandAllChildren Whether the whole hierarchy under that item will be expanded.
            * @param $refresh Whether to refresh items or not. Set to false when doing multiple operations on the tree, to only do one RefreshItems once all operations are done.
            */
            public ExpandItem ($id: number, $expandAllChildren: boolean, $refresh?: boolean) : void
            /** 
            Collapses the item with the specified index, hiding its children. Allows to collapse the whole hierarchy under that item.
            * @param $index The item index.
            * @param $collapseAllChildren Whether the whole hierarchy under that item will be collapsed.
            */
            public CollapseItemByIndex ($index: number, $collapseAllChildren: boolean) : void
            /** 
            Collapses the item with the specified ID, hiding its children. Allows to collapse the whole hierarchy under that item.
            * @param $id The item ID.
            * @param $collapseAllChildren Whether the whole hierarchy under that item will be collapsed.
            */
            public CollapseItem ($id: number, $collapseAllChildren: boolean) : void
            /** 
            Expands all items in the tree and refreshes the view.
            */
            public ExpandAll () : void
            /** 
            Collapses all items in the tree and refreshes the view.
            */
            public CollapseAll () : void
        }
        /** 
        Base class for controls that display virtualized vertical content inside a scroll view.
        */
        class BaseVerticalCollectionView extends UnityEngine.UIElements.BindableElement implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for BaseVerticalCollectionView elements.
            */
            public static ussClassName : string
            /** 
            The USS class name for BaseVerticalCollectionView elements with a border.
            */
            public static borderUssClassName : string
            /** 
            The USS class name of item elements in BaseVerticalCollectionView elements.
            */
            public static itemUssClassName : string
            /** 
            The USS class name of the drag hover bar.
            */
            public static dragHoverBarUssClassName : string
            /** 
            The USS class name of the drag hover circular marker used to indicate depth.
            */
            public static dragHoverMarkerUssClassName : string
            /** 
            The USS class name applied to an item element on drag hover.
            */
            public static itemDragHoverUssClassName : string
            /** 
            The USS class name of selected item elements in the BaseVerticalCollectionView.
            */
            public static itemSelectedVariantUssClassName : string
            /** 
            The USS class name for odd rows in the BaseVerticalCollectionView.
            */
            public static itemAlternativeBackgroundUssClassName : string
            /** 
            The USS class name of the scroll view in the BaseVerticalCollectionView.
            */
            public static listScrollViewUssClassName : string
            /** 
            The data source for collection items.
            */
            public get itemsSource(): System.Collections.IList;
            public set itemsSource(value: System.Collections.IList);
            /** 
            Returns the content container for the BaseVerticalCollectionView. Because the BaseVerticalCollectionView
            control automatically manages its content, this always returns null.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Controls the selection type.
            */
            public get selectionType(): UnityEngine.UIElements.SelectionType;
            public set selectionType(value: UnityEngine.UIElements.SelectionType);
            /** 
            Returns the selected item from the data source. If multiple items are selected, returns the first selected item.
            */
            public get selectedItem(): any;
            /** 
            Returns the selected items from the data source. Always returns an enumerable, even if no item is selected, or a single
            item is selected.
            */
            public get selectedItems(): System.Collections.Generic.IEnumerable$1<any>;
            /** 
            Returns or sets the selected item's index in the data source. If multiple items are selected, returns the
            first selected item's index. If multiple items are provided, sets them all as selected.
            */
            public get selectedIndex(): number;
            public set selectedIndex(value: number);
            /** 
            Returns the indices of selected items in the data source. Always returns an enumerable, even if no item  is selected, or a
            single item is selected.
            */
            public get selectedIndices(): System.Collections.Generic.IEnumerable$1<number>;
            /** 
            The view controller for this view.
            */
            public get viewController(): UnityEngine.UIElements.CollectionViewController;
            /** 
            Enable this property to display a border around the collection view.
            */
            public get showBorder(): boolean;
            public set showBorder(value: boolean);
            /** 
            Gets or sets a value that indicates whether the user can drag list items to reorder them.
            */
            public get reorderable(): boolean;
            public set reorderable(value: boolean);
            /** 
            This property controls whether the collection view shows a horizontal scroll bar when its content
            does not fit in the visible area.
            */
            public get horizontalScrollingEnabled(): boolean;
            public set horizontalScrollingEnabled(value: boolean);
            /** 
            This property controls whether the background colors of collection view rows alternate.
            Takes a value from the AlternatingRowBackground enum.
            */
            public get showAlternatingRowBackgrounds(): UnityEngine.UIElements.AlternatingRowBackground;
            public set showAlternatingRowBackgrounds(value: UnityEngine.UIElements.AlternatingRowBackground);
            /** 
            The virtualization method to use for this collection when a scroll bar is visible.
            Takes a value from the CollectionVirtualizationMethod enum.
            */
            public get virtualizationMethod(): UnityEngine.UIElements.CollectionVirtualizationMethod;
            public set virtualizationMethod(value: UnityEngine.UIElements.CollectionVirtualizationMethod);
            /** 
            The height of a single item in the list, in pixels.
            */
            public get fixedItemHeight(): number;
            public set fixedItemHeight(value: number);
            public add_onItemsChosen ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public remove_onItemsChosen ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public add_itemsChosen ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public remove_itemsChosen ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public add_onSelectionChange ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public remove_onSelectionChange ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public add_selectionChanged ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public remove_selectionChanged ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public add_onSelectedIndicesChange ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_onSelectedIndicesChange ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public add_selectedIndicesChanged ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_selectedIndicesChanged ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public add_itemIndexChanged ($value: System.Action$2<number, number>) : void
            public remove_itemIndexChanged ($value: System.Action$2<number, number>) : void
            public add_itemsSourceChanged ($value: System.Action) : void
            public remove_itemsSourceChanged ($value: System.Action) : void
            public add_canStartDrag ($value: System.Func$2<UnityEngine.UIElements.CanStartDragArgs, boolean>) : void
            public remove_canStartDrag ($value: System.Func$2<UnityEngine.UIElements.CanStartDragArgs, boolean>) : void
            public add_setupDragAndDrop ($value: System.Func$2<UnityEngine.UIElements.SetupDragAndDropArgs, UnityEngine.UIElements.StartDragArgs>) : void
            public remove_setupDragAndDrop ($value: System.Func$2<UnityEngine.UIElements.SetupDragAndDropArgs, UnityEngine.UIElements.StartDragArgs>) : void
            public add_dragAndDropUpdate ($value: System.Func$2<UnityEngine.UIElements.HandleDragAndDropArgs, UnityEngine.UIElements.DragVisualMode>) : void
            public remove_dragAndDropUpdate ($value: System.Func$2<UnityEngine.UIElements.HandleDragAndDropArgs, UnityEngine.UIElements.DragVisualMode>) : void
            public add_handleDrop ($value: System.Func$2<UnityEngine.UIElements.HandleDragAndDropArgs, UnityEngine.UIElements.DragVisualMode>) : void
            public remove_handleDrop ($value: System.Func$2<UnityEngine.UIElements.HandleDragAndDropArgs, UnityEngine.UIElements.DragVisualMode>) : void
            /** 
            Assigns the view controller for this view and registers all events required for it to function properly.
            * @param $controller The controller to use with this view.
            */
            public SetViewController ($controller: UnityEngine.UIElements.CollectionViewController) : void
            /** 
            Gets the root element of the specified collection view item.
            * @param $id The item identifier.
            * @returns The item's root element. 
            */
            public GetRootElementForId ($id: number) : UnityEngine.UIElements.VisualElement
            /** 
            Gets the root element of the specified collection view item.
            * @param $index The item index.
            * @returns The item's root element. 
            */
            public GetRootElementForIndex ($index: number) : UnityEngine.UIElements.VisualElement
            /** 
            Rebinds a single item if it is currently visible in the collection view.
            * @param $index The item index.
            */
            public RefreshItem ($index: number) : void
            /** 
            Rebinds all items currently visible.
            */
            public RefreshItems () : void
            /** 
            Clears the collection view, recreates all visible visual elements, and rebinds all items.
            */
            public Rebuild () : void
            /** 
            Scrolls to a specific VisualElement.
            * @param $visualElement The element to scroll to.
            */
            public ScrollTo ($visualElement: UnityEngine.UIElements.VisualElement) : void
            /** 
            Scrolls to a specific item index and makes it visible.
            * @param $index Item index to scroll to. Specify -1 to make the last item visible.
            */
            public ScrollToItem ($index: number) : void
            /** 
            Scrolls to a specific item id and makes it visible.
            * @param $id Item id to scroll to.
            */
            public ScrollToItemById ($id: number) : void
            /** 
            Adds an item to the collection of selected items.
            * @param $index Item index.
            */
            public AddToSelection ($index: number) : void
            /** 
            Removes an item from the collection of selected items.
            * @param $index The item index.
            */
            public RemoveFromSelection ($index: number) : void
            /** 
            Sets the currently selected item.
            * @param $index The item index.
            */
            public SetSelection ($index: number) : void
            public SetSelection ($indices: System.Collections.Generic.IEnumerable$1<number>) : void
            public SetSelectionWithoutNotify ($indices: System.Collections.Generic.IEnumerable$1<number>) : void
            /** 
            Deselects any selected items.
            */
            public ClearSelection () : void
        }
        /** 
        Multi-column tree view controller. View controllers of this type are meant to take care of data virtualized by any MultiColumnTreeView inheritor.
        */
        class MultiColumnTreeViewController extends UnityEngine.UIElements.BaseTreeViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The column controller, taking care of operations on the header.
            */
            public get columnController(): UnityEngine.UIElements.MultiColumnController;
        }
        class DefaultMultiColumnTreeViewController$1<T> extends UnityEngine.UIElements.MultiColumnTreeViewController implements UnityEngine.UIElements.IDefaultTreeViewController$1<T>, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get itemsSource(): System.Collections.IList;
            public set itemsSource(value: System.Collections.IList);
            public SetRootItems ($items: System.Collections.Generic.IList$1<UnityEngine.UIElements.TreeViewItemData$1<T>>) : void
            public AddItem ($item: $Ref<UnityEngine.UIElements.TreeViewItemData$1<T>>, $parentId: number, $childIndex: number, $rebuildTree?: boolean) : void
            public GetTreeViewItemDataForId ($id: number) : UnityEngine.UIElements.TreeViewItemData$1<T>
            public GetTreeViewItemDataForIndex ($index: number) : UnityEngine.UIElements.TreeViewItemData$1<T>
            public GetDataForId ($id: number) : T
            public GetDataForIndex ($index: number) : T
            public constructor ($columns: UnityEngine.UIElements.Columns, $sortDescriptions: UnityEngine.UIElements.SortColumnDescriptions, $sortedColumns: System.Collections.Generic.List$1<UnityEngine.UIElements.SortColumnDescription>)
        }
        interface IDefaultTreeViewController$1<T>
        {
        }
        class TreeViewItemData$1<T> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get id(): number;
            public get data(): T;
            public get children(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TreeViewItemData$1<T>>;
            public get hasChildren(): boolean;
            public constructor ($id: number, $data: T, $children?: System.Collections.Generic.List$1<UnityEngine.UIElements.TreeViewItemData$1<T>>)
        }
        /** 
        Represents a collection of columns.
        */
        class Columns extends System.Object implements System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.Column>, System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<UnityEngine.UIElements.Column>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Indicates the column that needs to be considered as the primary column, by ID.
            */
            public get primaryColumnName(): string;
            public set primaryColumnName(value: string);
            /** 
            Indicates whether the columns can be reordered interactively by user.
            */
            public get reorderable(): boolean;
            public set reorderable(value: boolean);
            /** 
            Indicates whether the columns can be resized interactively by user.
            */
            public get resizable(): boolean;
            public set resizable(value: boolean);
            /** 
            Indicates whether columns are resized as the user drags resize handles or only upon mouse release.
            */
            public get resizePreview(): boolean;
            public set resizePreview(value: boolean);
            /** 
            Indicates how the size of columns in this collection is automatically adjusted as other columns or the containing view get resized.
            The default value is StretchMode.GrowAndFill
            */
            public get stretchMode(): UnityEngine.UIElements.Columns.StretchMode;
            public set stretchMode(value: UnityEngine.UIElements.Columns.StretchMode);
            /** 
            Gets the number of columns in the collection.
            */
            public get Count(): number;
            /** 
            Gets a value indicating whether the collection is readonly.
            */
            public get IsReadOnly(): boolean;
            /** 
            Checks if the specified column is the primary one.
            * @param $column The column to check.
            * @returns Whether or not the specified column is the primary one. 
            */
            public IsPrimary ($column: UnityEngine.UIElements.Column) : boolean
            /** 
            Returns an enumerator that iterates through the collection.
            * @returns The enumerator. 
            */
            public GetEnumerator () : System.Collections.Generic.IEnumerator$1<UnityEngine.UIElements.Column>
            /** 
            Adds a column at the end of the collection.
            * @param $item The column to add.
            */
            public Add ($item: UnityEngine.UIElements.Column) : void
            /** 
            Removes all columns from the collection.
            */
            public Clear () : void
            public Contains ($item: UnityEngine.UIElements.Column) : boolean
            /** 
            Whether the columns contain the specified name.
            * @param $name The name of the column to look for.
            * @returns Whether a column with the given name exists or not. 
            */
            public Contains ($name: string) : boolean
            /** 
            Copies the elements of the current collection to a Array, starting at the specified index.
            * @param $array The array to copy to.
            * @param $arrayIndex The starting index.
            */
            public CopyTo ($array: System.Array$1<UnityEngine.UIElements.Column>, $arrayIndex: number) : void
            /** 
            Removes the first occurence of a column from the collection.
            * @param $column The column to remove.
            * @returns Whether it was removed or not. 
            */
            public Remove ($column: UnityEngine.UIElements.Column) : boolean
            /** 
            Returns the index of the specified column if it is contained in the collection; returns -1 otherwise.
            * @param $column The column to locate in the <see cref="Columns" />.
            * @returns The index of the column if found in the collection; otherwise, -1. 
            */
            public IndexOf ($column: UnityEngine.UIElements.Column) : number
            /** 
            Inserts a column into the current instance at the specified index.
            * @param $index Index to insert to.
            * @param $column The column to insert.
            */
            public Insert ($index: number, $column: UnityEngine.UIElements.Column) : void
            /** 
            Removes the column at the specified index.
            * @param $index The index of the column to remove.
            */
            public RemoveAt ($index: number) : void
            public get_Item ($index: number) : UnityEngine.UIElements.Column
            public get_Item ($name: string) : UnityEngine.UIElements.Column
            /** 
            Reorders the display of a column at the specified source index, to the destination index.
            * @param $from The display index of the column to move.
            * @param $to The display index where the column will be moved to.
            */
            public ReorderDisplay ($from: number, $to: number) : void
            public constructor ()
        }
        /** 
        Represents a column in multi-column views such as multi-column list view or multi-column tree view.
        Provides the properties to define how user interacts with a column in a multi-column view, how its data and the data of each
        cell in this column are represented.
        */
        class Column extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the column.
            */
            public get name(): string;
            public set name(value: string);
            /** 
            The title of the column.
            */
            public get title(): string;
            public set title(value: string);
            /** 
            The icon of the column.
            */
            public get icon(): UnityEngine.UIElements.Background;
            public set icon(value: UnityEngine.UIElements.Background);
            /** 
            Indicates whether the column is visible.
            */
            public get visible(): boolean;
            public set visible(value: boolean);
            /** 
            The desired width of the column.
            */
            public get width(): UnityEngine.UIElements.Length;
            public set width(value: UnityEngine.UIElements.Length);
            /** 
            The minimum width of the column.
            */
            public get minWidth(): UnityEngine.UIElements.Length;
            public set minWidth(value: UnityEngine.UIElements.Length);
            /** 
            The maximum width of the column.
            */
            public get maxWidth(): UnityEngine.UIElements.Length;
            public set maxWidth(value: UnityEngine.UIElements.Length);
            /** 
            Indicates whether the column can be sorted.
            */
            public get sortable(): boolean;
            public set sortable(value: boolean);
            /** 
            Indicates whether the column will be automatically resized to fill the available space within its container.
            */
            public get stretchable(): boolean;
            public set stretchable(value: boolean);
            /** 
            Indicates whether the column is optional. Optional columns be shown or hidden interactively by the user.
            */
            public get optional(): boolean;
            public set optional(value: boolean);
            /** 
            Indicates whether the column can be resized interactively by the user.
            */
            public get resizable(): boolean;
            public set resizable(value: boolean);
            /** 
            Callback for constructing the visual representation of the column in the header.
            */
            public get makeHeader(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeHeader(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for binding the header element to this column.
            */
            public get bindHeader(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set bindHeader(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for unbinding the header element to this column.
            */
            public get unbindHeader(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set unbindHeader(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for destroying the visual representation of the column in the header.
            */
            public get destroyHeader(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set destroyHeader(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for constructing the VisualElement that is the template for each cell of the column.
            */
            public get makeCell(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeCell(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for binding the specified data item at the given row to the visual element.
            */
            public get bindCell(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set bindCell(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback for unbinding the specified data item at the given row from the visual element.
            */
            public get unbindCell(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set unbindCell(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback for destroying the VisualElement that was built for this column.
            */
            public get destroyCell(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set destroyCell(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            The column collection that contains this column.
            */
            public get collection(): UnityEngine.UIElements.Columns;
            public constructor ()
        }
        /** 
        This represents a collection or SortColumnDescriptions in multi SortColumnDescription views.
        */
        class SortColumnDescriptions extends System.Object implements System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.SortColumnDescription>, System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<UnityEngine.UIElements.SortColumnDescription>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the number of sort descriptions in the collection.
            */
            public get Count(): number;
            /** 
            Gets a value indicating whether the collection is readonly.
            */
            public get IsReadOnly(): boolean;
            /** 
            Returns an enumerator that iterates through the collection.
            * @returns The enumerator. 
            */
            public GetEnumerator () : System.Collections.Generic.IEnumerator$1<UnityEngine.UIElements.SortColumnDescription>
            /** 
            Adds a sort description at the end of the collection.
            * @param $item The sort description to add.
            */
            public Add ($item: UnityEngine.UIElements.SortColumnDescription) : void
            /** 
            Removes all sort descriptions from the collection.
            */
            public Clear () : void
            /** 
            Determines whether the current collection contains a specific value.
            * @param $item The object to locate in the current collection.
            * @returns Whether the item is in the collection or not. 
            */
            public Contains ($item: UnityEngine.UIElements.SortColumnDescription) : boolean
            /** 
            Copies the elements of the current collection to a Array, starting at the specified index.
            * @param $array The array to copy to.
            * @param $arrayIndex The starting index.
            */
            public CopyTo ($array: System.Array$1<UnityEngine.UIElements.SortColumnDescription>, $arrayIndex: number) : void
            /** 
            Removes the first occurence of a sort description from the collection.
            * @param $desc The sort description to remove.
            * @returns Whether it was removed or not. 
            */
            public Remove ($desc: UnityEngine.UIElements.SortColumnDescription) : boolean
            /** 
            Returns the index of the specified SortColumnDescription if it is contained in the collection; returns -1 otherwise.
            * @param $desc The description to locate in the <see cref="SortColumnDescriptions" />.
            * @returns The index of the SortColumnDescriptions if found in the collection; otherwise, -1. 
            */
            public IndexOf ($desc: UnityEngine.UIElements.SortColumnDescription) : number
            /** 
            Inserts a sort description into the current instance at the specified index.
            * @param $index Index to insert to.
            * @param $desc The sort description to insert.
            */
            public Insert ($index: number, $desc: UnityEngine.UIElements.SortColumnDescription) : void
            /** 
            Removes the sort description at the specified index.
            * @param $index The index of the sort description to remove.
            */
            public RemoveAt ($index: number) : void
            public get_Item ($index: number) : UnityEngine.UIElements.SortColumnDescription
            public constructor ()
        }
        /** 
        This represents a description on what column to sort and in which order.
        */
        class SortColumnDescription extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the column.
            */
            public get columnName(): string;
            public set columnName(value: string);
            /** 
            The index of the column to be used to find the column only if the SortColumnDescription.columnName|columnName isn't set.
            */
            public get columnIndex(): number;
            public set columnIndex(value: number);
            /** 
            The sorted column.
            */
            public get column(): UnityEngine.UIElements.Column;
            /** 
            The sort direction.
            */
            public get direction(): UnityEngine.UIElements.SortDirection;
            public set direction(value: UnityEngine.UIElements.SortDirection);
            public constructor ()
            public constructor ($columnIndex: number, $direction: UnityEngine.UIElements.SortDirection)
            public constructor ($columnName: string, $direction: UnityEngine.UIElements.SortDirection)
        }
        /** 
        Tree view controller. View controllers of this type are meant to take care of data virtualized by any TreeView inheritor.
        */
        class TreeViewController extends UnityEngine.UIElements.BaseTreeViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        class DefaultTreeViewController$1<T> extends UnityEngine.UIElements.TreeViewController implements UnityEngine.UIElements.IDefaultTreeViewController, UnityEngine.UIElements.IDefaultTreeViewController$1<T>, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get itemsSource(): System.Collections.IList;
            public set itemsSource(value: System.Collections.IList);
            public SetRootItems ($items: System.Collections.Generic.IList$1<UnityEngine.UIElements.TreeViewItemData$1<T>>) : void
            public AddItem ($item: $Ref<UnityEngine.UIElements.TreeViewItemData$1<T>>, $parentId: number, $childIndex: number, $rebuildTree?: boolean) : void
            public GetItemDataForId ($id: number) : any
            public GetTreeViewItemDataForId ($id: number) : UnityEngine.UIElements.TreeViewItemData$1<T>
            public GetTreeViewItemDataForIndex ($index: number) : UnityEngine.UIElements.TreeViewItemData$1<T>
            public GetDataForId ($id: number) : T
            public GetDataForIndex ($index: number) : T
            public constructor ()
        }
        interface IDefaultTreeViewController
        {
        }
        /** 
        List view controller. View controllers of this type are meant to take care of data virtualized by any ListView inheritor.
        */
        class ListViewController extends UnityEngine.UIElements.BaseListViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Multi-column list view controller. View controllers of this type are meant to take care of data virtualized by any MultiColumnListView inheritor.
        */
        class MultiColumnListViewController extends UnityEngine.UIElements.BaseListViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The column controller, taking care of operations on the header.
            */
            public get columnController(): UnityEngine.UIElements.MultiColumnController;
            public constructor ($columns: UnityEngine.UIElements.Columns, $sortDescriptions: UnityEngine.UIElements.SortColumnDescriptions, $sortedColumns: System.Collections.Generic.List$1<UnityEngine.UIElements.SortColumnDescription>)
        }
        /** 
        The default controller for a multi column view. Takes care of adding the MultiColumnCollectionHeader and
        reacting to the various callbacks.
        */
        class MultiColumnController extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for the header container inside a multi column view.
            */
            public static headerContainerUssClassName : string
            /** 
            The USS class name for all row containers inside a multi column view.
            */
            public static rowContainerUssClassName : string
            /** 
            The USS class name for all cells inside a multi column view.
            */
            public static cellUssClassName : string
            /** 
            The USS class name for default labels cells inside a multi column view.
            */
            public static cellLabelUssClassName : string
            public add_columnSortingChanged ($value: System.Action) : void
            public remove_columnSortingChanged ($value: System.Action) : void
            public add_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public remove_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            /** 
            Creates a VisualElement to use in the virtualization of the collection view.
            It will create a cell for every visible column.
            * @returns A VisualElement for the row. 
            */
            public MakeItem () : UnityEngine.UIElements.VisualElement
            /** 
            Unbinds the row at the item index.
            * @param $element The element from that row, created by MakeItem().
            * @param $index The item index.
            */
            public UnbindItem ($element: UnityEngine.UIElements.VisualElement, $index: number) : void
            /** 
            Destroys a VisualElement when the view is rebuilt or cleared.
            * @param $element The element being destroyed.
            */
            public DestroyItem ($element: UnityEngine.UIElements.VisualElement) : void
            /** 
            Initialization step once the view is set.
            It will insert the multi column header in the hierarchy and register to important callbacks.
            * @param $collectionView The view to register to.
            */
            public PrepareView ($collectionView: UnityEngine.UIElements.BaseVerticalCollectionView) : void
            /** 
            Unregisters events and removes the header from the hierarchy.
            */
            public Dispose () : void
            public constructor ($columns: UnityEngine.UIElements.Columns, $sortDescriptions: UnityEngine.UIElements.SortColumnDescriptions, $sortedColumns: System.Collections.Generic.List$1<UnityEngine.UIElements.SortColumnDescription>)
        }
        /** 
        Use this class to display a contextual menu.
        */
        class ContextualMenuManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Checks if the event triggers the display of the contextual menu. This method also displays the menu.
            * @param $evt The event to inspect.
            * @param $eventHandler The element for which the menu is displayed.
            */
            public DisplayMenuIfEventMatches ($evt: UnityEngine.UIElements.EventBase, $eventHandler: UnityEngine.UIElements.IEventHandler) : void
            /** 
            Displays the contextual menu.
            * @param $triggerEvent The event that triggered the display of the menu.
            * @param $target The element for which the menu is displayed.
            * @returns True if a contextual menu was effectively displayed. 
            */
            public DisplayMenu ($triggerEvent: UnityEngine.UIElements.EventBase, $target: UnityEngine.UIElements.IEventHandler) : void
        }
        /** 
        Manipulator that displays a contextual menu when the user clicks the right mouse button or presses the menu key on the keyboard.
        */
        class ContextualMenuManipulator extends UnityEngine.UIElements.PointerManipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            public constructor ($menuBuilder: System.Action$1<UnityEngine.UIElements.ContextualMenuPopulateEvent>)
        }
        class EventBase$1<T> extends UnityEngine.UIElements.EventBase implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get eventTypeId(): bigint;
            public static TypeId () : any
            public static GetPooled () : any
        }
        class MouseEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get modifiers(): UnityEngine.EventModifiers;
            public get mousePosition(): UnityEngine.Vector2;
            public get localMousePosition(): UnityEngine.Vector2;
            public get mouseDelta(): UnityEngine.Vector2;
            public get clickCount(): number;
            public get button(): number;
            public get pressedButtons(): number;
            public get shiftKey(): boolean;
            public get ctrlKey(): boolean;
            public get commandKey(): boolean;
            public get altKey(): boolean;
            public get actionKey(): boolean;
            public get currentTarget(): UnityEngine.UIElements.IEventHandler;
            public static GetPooled ($systemEvent: any) : any
            public static GetPooled ($position: any, $button: any, $clickCount: any, $delta: any, $modifiers?: any) : any
            public static GetPooled ($triggerEvent: any) : any
            public static GetPooled () : any
        }
        interface IMouseEvent
        {
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            modifiers : UnityEngine.EventModifiers
            /** 
            The mouse position in the panel coordinate system.
            */
            mousePosition : UnityEngine.Vector2
            /** 
            The mouse position in the current target coordinate system.
            */
            localMousePosition : UnityEngine.Vector2
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            mouseDelta : UnityEngine.Vector2
            /** 
            The number of times the button is pressed.
            */
            clickCount : number
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            button : number
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            pressedButtons : number
            /** 
            Return true if the Shift key is pressed.
            */
            shiftKey : boolean
            /** 
            Return true if the Ctrl key is pressed.
            */
            ctrlKey : boolean
            /** 
            Return true if the Windows/Command key is pressed.
            */
            commandKey : boolean
            /** 
            Return true if the Alt key is pressed.
            */
            altKey : boolean
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            actionKey : boolean
        }
        interface IMouseEventInternal
        {
        }
        /** 
        The event sent when a contextual menu requires menu items.
        The event trickles down and bubbles up.
        */
        class ContextualMenuPopulateEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.ContextualMenuPopulateEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The menu to populate.
            */
            public get menu(): UnityEngine.UIElements.DropdownMenu;
            /** 
            The event that triggered the ContextualMenuPopulateEvent.
            */
            public get triggerEvent(): UnityEngine.UIElements.EventBase;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $triggerEvent The event that triggered the display of the contextual menu.
            * @param $menu The menu to populate.
            * @param $target The element that triggered the display of the contextual menu.
            * @param $menuManager The menu manager that displays the menu.
            * @returns An initialized event. 
            */
            public static GetPooled ($triggerEvent: UnityEngine.UIElements.EventBase, $menu: UnityEngine.UIElements.DropdownMenu, $target: UnityEngine.UIElements.IEventHandler, $menuManager: UnityEngine.UIElements.ContextualMenuManager) : UnityEngine.UIElements.ContextualMenuPopulateEvent
            public constructor ()
        }
        class BaseField$1<TValueType> extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            public static ussClassName : any
            public static labelUssClassName : any
            public static inputUssClassName : any
            public static noLabelVariantUssClassName : any
            public static labelDraggerVariantUssClassName : any
            public static mixedValueLabelUssClassName : any
            public static alignedFieldUssClassName : any
            public get value(): TValueType;
            public set value(value: TValueType);
            public get labelElement(): UnityEngine.UIElements.Label;
            public get label(): string;
            public set label(value: string);
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public SetValueWithoutNotify ($newValue: TValueType) : void
        }
        interface IMixedValueSupport
        {
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            showMixedValue : boolean
        }
        interface INotifyValueChanged$1<T>
        {
            value : T
            SetValueWithoutNotify ($newValue: T) : void
        }
        interface IPrefixLabel
        {
        }
        interface IEditableElement
        {
        }
        /** 
        A BaseBoolField is a clickable element that represents a boolean value.
        */
        class BaseBoolField extends UnityEngine.UIElements.BaseField$1<boolean> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<boolean>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            Optional text that appears after the BaseBoolField.
            */
            public get text(): string;
            public set text(value: string);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        class TextInputBaseField$1<TValueType> extends UnityEngine.UIElements.BaseField$1<TValueType> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            public static ussClassName : any
            public static labelUssClassName : any
            public static inputUssClassName : any
            public static singleLineInputUssClassName : any
            public static multilineInputUssClassName : any
            public static placeholderUssClassName : any
            public static textInputUssName : any
            public get textSelection(): UnityEngine.UIElements.ITextSelection;
            public get textEdition(): UnityEngine.UIElements.ITextEdition;
            public get isReadOnly(): boolean;
            public set isReadOnly(value: boolean);
            public get isPasswordField(): boolean;
            public set isPasswordField(value: boolean);
            public get autoCorrection(): boolean;
            public set autoCorrection(value: boolean);
            public get hideMobileInput(): boolean;
            public set hideMobileInput(value: boolean);
            public get keyboardType(): UnityEngine.TouchScreenKeyboardType;
            public set keyboardType(value: UnityEngine.TouchScreenKeyboardType);
            public get touchScreenKeyboard(): UnityEngine.TouchScreenKeyboard;
            public get maxLength(): number;
            public set maxLength(value: number);
            public get isDelayed(): boolean;
            public set isDelayed(value: boolean);
            public get maskChar(): number;
            public set maskChar(value: number);
            public get selectionColor(): UnityEngine.Color;
            public get cursorColor(): UnityEngine.Color;
            public get cursorIndex(): number;
            public set cursorIndex(value: number);
            public get cursorPosition(): UnityEngine.Vector2;
            public get selectIndex(): number;
            public set selectIndex(value: number);
            public get selectAllOnFocus(): boolean;
            public set selectAllOnFocus(value: boolean);
            public get selectAllOnMouseUp(): boolean;
            public set selectAllOnMouseUp(value: boolean);
            public get doubleClickSelectsWord(): boolean;
            public set doubleClickSelectsWord(value: boolean);
            public get tripleClickSelectsLine(): boolean;
            public set tripleClickSelectsLine(value: boolean);
            public get text(): string;
            public get emojiFallbackSupport(): boolean;
            public set emojiFallbackSupport(value: boolean);
            public get verticalScrollerVisibility(): UnityEngine.UIElements.ScrollerVisibility;
            public set verticalScrollerVisibility(value: UnityEngine.UIElements.ScrollerVisibility);
            public SelectAll () : void
            public SelectNone () : void
            public SelectRange ($cursorIndex: number, $selectionIndex: number) : void
            public MeasureTextSize ($textToMeasure: string, $width: number, $widthMode: UnityEngine.UIElements.VisualElement.MeasureMode, $height: number, $heightMode: UnityEngine.UIElements.VisualElement.MeasureMode) : UnityEngine.Vector2
        }
        interface IDelayedField
        {
        }
        class TextValueField$1<TValueType> extends UnityEngine.UIElements.TextInputBaseField$1<TValueType> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<TValueType>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            public get formatString(): string;
            public set formatString(value: string);
            public ApplyInputDeviceDelta ($delta: UnityEngine.Vector3, $speed: UnityEngine.UIElements.DeltaSpeed, $startValue: TValueType) : void
            public StartDragging () : void
            public StopDragging () : void
        }
        interface IValueField$1<T>
        {
            value : T
            ApplyInputDeviceDelta ($delta: UnityEngine.Vector3, $speed: UnityEngine.UIElements.DeltaSpeed, $startValue: T) : void
            StartDragging () : void
            StopDragging () : void
        }
        class BaseCompositeField$3<TValueType, TField, TFieldValue> extends UnityEngine.UIElements.BaseField$1<TValueType> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            public static ussClassName : any
            public static labelUssClassName : any
            public static inputUssClassName : any
            public static spacerUssClassName : any
            public static multilineVariantUssClassName : any
            public static fieldGroupUssClassName : any
            public static fieldUssClassName : any
            public static firstFieldVariantUssClassName : any
            public static twoLinesVariantUssClassName : any
        }
        /** 
        Options to change the drag-and-drop mode for items in the ListView.
        */
        enum ListViewReorderMode
        { Simple = 0, Animated = 1 }
        /** 
        Base class for a list view, a vertically scrollable area that links to, and displays, a list of items.
        */
        class BaseListView extends UnityEngine.UIElements.BaseVerticalCollectionView implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for ListView elements.
            */
            public static ussClassName : string
            /** 
            The USS class name of item elements in ListView elements.
            */
            public static itemUssClassName : string
            /** 
            The USS class name for label displayed when ListView is empty.
            */
            public static emptyLabelUssClassName : string
            /** 
            The USS class name for label displayed when ListView is trying to edit too many items.
            */
            public static overMaxMultiEditLimitClassName : string
            /** 
            The USS class name for reorderable animated ListView elements.
            */
            public static reorderableUssClassName : string
            /** 
            The USS class name for item elements in reorderable animated ListView.
            */
            public static reorderableItemUssClassName : string
            /** 
            The USS class name for item container in reorderable animated ListView.
            */
            public static reorderableItemContainerUssClassName : string
            /** 
            The USS class name for drag handle in reorderable animated ListView.
            */
            public static reorderableItemHandleUssClassName : string
            /** 
            The USS class name for drag handle bar in reorderable animated ListView.
            */
            public static reorderableItemHandleBarUssClassName : string
            /** 
            The USS class name for the footer of the ListView.
            */
            public static footerUssClassName : string
            /** 
            The USS class name for the foldout header of the ListView.
            */
            public static foldoutHeaderUssClassName : string
            /** 
            The USS class name for the size field of the ListView when foldout header is enabled.
            */
            public static arraySizeFieldUssClassName : string
            /** 
            The USS class name for ListView when foldout header is enabled.
            */
            public static listViewWithHeaderUssClassName : string
            /** 
            The USS class name for ListView when add/remove footer is enabled.
            */
            public static listViewWithFooterUssClassName : string
            /** 
            The USS class name for scroll view when add/remove footer is enabled.
            */
            public static scrollViewWithFooterUssClassName : string
            /** 
            The name of the add button element in the footer.
            */
            public static footerAddButtonName : string
            /** 
            The name of the remove button element in the footer.
            */
            public static footerRemoveButtonName : string
            /** 
            This property controls whether the list view displays the collection size (number of items).
            */
            public get showBoundCollectionSize(): boolean;
            public set showBoundCollectionSize(value: boolean);
            /** 
            This property controls whether the list view displays a header, in the form of a foldout that can be expanded or collapsed.
            */
            public get showFoldoutHeader(): boolean;
            public set showFoldoutHeader(value: boolean);
            /** 
            This property controls the text of the foldout header when using showFoldoutHeader.
            */
            public get headerTitle(): string;
            public set headerTitle(value: string);
            /** 
            This callback allows the user to make their own header for this control.
            */
            public get makeHeader(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeHeader(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            This callback allows the user to make their own footer for this control.
            */
            public get makeFooter(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeFooter(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            This property controls whether a footer will be added to the list view.
            */
            public get showAddRemoveFooter(): boolean;
            public set showAddRemoveFooter(value: boolean);
            /** 
            This property controls whether every element in the list will get its data source setup automatically to the
            correct item in the collection's source.
            */
            public get bindingSourceSelectionMode(): UnityEngine.UIElements.BindingSourceSelectionMode;
            public set bindingSourceSelectionMode(value: UnityEngine.UIElements.BindingSourceSelectionMode);
            /** 
            The view controller for this view, cast as a BaseListViewController.
            */
            public get viewController(): UnityEngine.UIElements.BaseListViewController;
            /** 
            This property controls the drag and drop mode for the list view.
            */
            public get reorderMode(): UnityEngine.UIElements.ListViewReorderMode;
            public set reorderMode(value: UnityEngine.UIElements.ListViewReorderMode);
            /** 
            This callback allows the user to set a Visual Element to replace the "List is empty" Label shown when the ListView is empty.
            */
            public get makeNoneElement(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeNoneElement(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            This property allows the user to allow or block the addition of an item when clicking on the Add Button.
            It must return true or false.
            */
            public get allowAdd(): boolean;
            public set allowAdd(value: boolean);
            /** 
            This callback allows the user to implement a DropdownMenu when the Add Button is clicked.
            */
            public get overridingAddButtonBehavior(): System.Action$2<UnityEngine.UIElements.BaseListView, UnityEngine.UIElements.Button>;
            public set overridingAddButtonBehavior(value: System.Action$2<UnityEngine.UIElements.BaseListView, UnityEngine.UIElements.Button>);
            /** 
            This callback allows the user to implement their own code to be executed when the Add Button is clicked.
            */
            public get onAdd(): System.Action$1<UnityEngine.UIElements.BaseListView>;
            public set onAdd(value: System.Action$1<UnityEngine.UIElements.BaseListView>);
            /** 
            This property allows the user to allow or block the removal of an item when clicking on the Remove Button.
            It must return true or false.
            */
            public get allowRemove(): boolean;
            public set allowRemove(value: boolean);
            /** 
            This callback allows the user to implement their own code to be executed when the Remove Button is clicked.
            */
            public get onRemove(): System.Action$1<UnityEngine.UIElements.BaseListView>;
            public set onRemove(value: System.Action$1<UnityEngine.UIElements.BaseListView>);
            public add_itemsAdded ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_itemsAdded ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public add_itemsRemoved ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_itemsRemoved ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
        }
        /** 
        Option to change the data source assignation when using Data Binding in collection views.
        */
        enum BindingSourceSelectionMode
        { Manual = 0, AutoAssign = 1 }
        /** 
        Use this as the super class if you are declaring a custom VisualElement that displays text. For example, Button or Label use this as their base class. For more information, refer to.
        */
        class TextElement extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.ITextSelection
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of selectable text elements.
            */
            public static selectableUssClassName : string
            /** 
            The text to be displayed.
            */
            public get text(): string;
            public set text(value: string);
            /** 
            When false, rich text tags will not be parsed.
            */
            public get enableRichText(): boolean;
            public set enableRichText(value: boolean);
            /** 
            Specifies the order in which the system should look for Emoji characters when rendering text.
            If this setting is enabled, the global Emoji Fallback list will be searched first for characters defined as
            Emoji in the Unicode 14.0 standard.
            */
            public get emojiFallbackSupport(): boolean;
            public set emojiFallbackSupport(value: boolean);
            /** 
            Specifies whether escape sequences are displayed as is or if they are replaced by the character they represent.
            */
            public get parseEscapeSequences(): boolean;
            public set parseEscapeSequences(value: boolean);
            /** 
            When true, a tooltip displays the full version of elided text, and also if a tooltip had been previously
            provided, it will be overwritten.
            */
            public get displayTooltipWhenElided(): boolean;
            public set displayTooltipWhenElided(value: boolean);
            /** 
            Returns true if text is elided, false otherwise.
            */
            public get isElided(): boolean;
            /** 
            Returns the TextElement experimental interface.
            */
            public get experimental(): UnityEngine.UIElements.ITextElementExperimentalFeatures;
            /** 
            Retrieves this TextElement's ITextSelection
            */
            public get selection(): UnityEngine.UIElements.ITextSelection;
            /** 
            Returns true if the element is read only.
            */
            public get isReadOnly(): boolean;
            public set isReadOnly(value: boolean);
            /** 
            Maximum number of characters for that element
            */
            public get maxLength(): number;
            public set maxLength(value: number);
            /** 
            The placeholder property represents a short hint intended to aid the users with data entry when the control has no value.
            */
            public get placeholder(): string;
            public set placeholder(value: string);
            /** 
            If set to true, the value property isn't updated until either the user presses Enter or the element loses focus.
            */
            public get isDelayed(): boolean;
            public set isDelayed(value: boolean);
            /** 
            The character used for masking when in password mode.
            */
            public get maskChar(): number;
            public set maskChar(value: number);
            /** 
            Returns true if the field is used to edit a password.
            */
            public get isPassword(): boolean;
            public set isPassword(value: boolean);
            /** 
            Hides the placeholder on focus.
            */
            public get hidePlaceholderOnFocus(): boolean;
            public set hidePlaceholderOnFocus(value: boolean);
            /** 
            Determines if the soft keyboard auto correction is turned on or off.
            */
            public get autoCorrection(): boolean;
            public set autoCorrection(value: boolean);
            /** 
            Hides or shows the mobile input field.
            */
            public get hideMobileInput(): boolean;
            public set hideMobileInput(value: boolean);
            /** 
            The TouchScreenKeyboard being used to edit the Input Field.
            */
            public get touchScreenKeyboard(): UnityEngine.TouchScreenKeyboard;
            /** 
            The type of mobile keyboard that will be used.
            */
            public get keyboardType(): UnityEngine.TouchScreenKeyboardType;
            public set keyboardType(value: UnityEngine.TouchScreenKeyboardType);
            /** 
            Returns true if the field is selectable.
            */
            public get isSelectable(): boolean;
            public set isSelectable(value: boolean);
            /** 
            Color of the cursor.
            */
            public get cursorColor(): UnityEngine.Color;
            public set cursorColor(value: UnityEngine.Color);
            /** 
            Background color of selected text.
            */
            public get selectionColor(): UnityEngine.Color;
            public set selectionColor(value: UnityEngine.Color);
            /** 
            This is the cursor index in the text presented.
            */
            public get cursorIndex(): number;
            public set cursorIndex(value: number);
            /** 
            Controls whether double clicking selects the word under the mouse pointer or not.
            */
            public get doubleClickSelectsWord(): boolean;
            public set doubleClickSelectsWord(value: boolean);
            /** 
            This is the selection index in the text presented.
            */
            public get selectIndex(): number;
            public set selectIndex(value: number);
            /** 
            Controls whether triple clicking selects the entire line under the mouse pointer or not.
            */
            public get tripleClickSelectsLine(): boolean;
            public set tripleClickSelectsLine(value: boolean);
            /** 
            Controls whether the element's content is selected upon receiving focus.
            */
            public get selectAllOnFocus(): boolean;
            public set selectAllOnFocus(value: boolean);
            /** 
            Controls whether the element's content is selected when you mouse up for the first time.
            */
            public get selectAllOnMouseUp(): boolean;
            public set selectAllOnMouseUp(value: boolean);
            /** 
            The position of the text cursor inside the element.
            */
            public get cursorPosition(): UnityEngine.Vector2;
            public MeasureTextSize ($textToMeasure: string, $width: number, $widthMode: UnityEngine.UIElements.VisualElement.MeasureMode, $height: number, $heightMode: UnityEngine.UIElements.VisualElement.MeasureMode) : UnityEngine.Vector2
            public constructor ()
            /** 
            Setting this property will override the displayed text while preserving the original text value.
            */
            public SetRenderedText ($renderedText: string) : void
            /** 
            Return true is the TextElement has a selection.
            */
            public HasSelection () : boolean
            /** 
            Selects all the text contained in the field.
            */
            public SelectAll () : void
            /** 
            Remove selection
            */
            public SelectNone () : void
            /** 
            Select text between cursorIndex and selectIndex.
            */
            public SelectRange ($cursorIndex: number, $selectionIndex: number) : void
        }
        interface ITextElement
        {
        }
        interface ITextEdition
        {
            /** 
            Returns true if the element is read only.
            */
            isReadOnly : boolean
            /** 
            Maximum number of characters for that element
            */
            maxLength : number
            /** 
            The placeholder property represents a short hint intended to aid the users with data entry when the control has no value.
            */
            placeholder : string
            /** 
            If set to true, the value property isn't updated until either the user presses Enter or the element loses focus.
            */
            isDelayed : boolean
            /** 
            The character used for masking when in password mode.
            */
            maskChar : number
            /** 
            Returns true if the field is used to edit a password.
            */
            isPassword : boolean
            /** 
            Hides the placeholder on focus.
            */
            hidePlaceholderOnFocus : boolean
            /** 
            Determines if the soft keyboard auto correction is turned on or off.
            */
            autoCorrection : boolean
            /** 
            Hides or shows the mobile input field.
            */
            hideMobileInput : boolean
            /** 
            The TouchScreenKeyboard being used to edit the Input Field.
            */
            touchScreenKeyboard : UnityEngine.TouchScreenKeyboard
            /** 
            The type of mobile keyboard that will be used.
            */
            keyboardType : UnityEngine.TouchScreenKeyboardType
        }
        interface ITextElementExperimentalFeatures extends UnityEngine.UIElements.IExperimentalFeatures
        {
            /** 
            Returns the animation experimental interface.
            */
            animation : UnityEngine.UIElements.Experimental.ITransitionAnimations
            /** 
            Setting this property will override the displayed text while preserving the original text value.
            */
            SetRenderedText ($renderedText: string) : void
        }
        interface ITextSelection
        {
            /** 
            Returns true if the field is selectable.
            */
            isSelectable : boolean
            /** 
            Color of the cursor.
            */
            cursorColor : UnityEngine.Color
            /** 
            Background color of selected text.
            */
            selectionColor : UnityEngine.Color
            /** 
            This is the cursor index in the text presented.
            */
            cursorIndex : number
            /** 
            Controls whether double clicking selects the word under the mouse pointer or not.
            */
            doubleClickSelectsWord : boolean
            /** 
            This is the selection index in the text presented.
            */
            selectIndex : number
            /** 
            Controls whether triple clicking selects the entire line under the mouse pointer or not.
            */
            tripleClickSelectsLine : boolean
            /** 
            Controls whether the element's content is selected upon receiving focus.
            */
            selectAllOnFocus : boolean
            /** 
            Controls whether the element's content is selected when you mouse up for the first time.
            */
            selectAllOnMouseUp : boolean
            /** 
            The position of the text cursor inside the element.
            */
            cursorPosition : UnityEngine.Vector2
            /** 
            Return true is the TextElement has a selection.
            */
            HasSelection () : boolean
            /** 
            Selects all the text contained in the field.
            */
            SelectAll () : void
            /** 
            Remove selection
            */
            SelectNone () : void
            /** 
            Select text between cursorIndex and selectIndex.
            */
            SelectRange ($cursorIndex: number, $selectionIndex: number) : void
        }
        /** 
        This is a clickable button.
        */
        class Button extends UnityEngine.UIElements.TextElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.ITextSelection
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            The USS class name for Button elements with an icon.
            */
            public static iconUssClassName : string
            /** 
            The USS class name of the image element that will be used to display the icon texture.
            */
            public static imageUSSClassName : string
            /** 
            Clickable MouseManipulator for this Button.
            */
            public get clickable(): UnityEngine.UIElements.Clickable;
            public set clickable(value: UnityEngine.UIElements.Clickable);
            /** 
            The Texture, Sprite, or VectorImage that will represent an icon within a Button element.
            */
            public get iconImage(): UnityEngine.UIElements.Background;
            public set iconImage(value: UnityEngine.UIElements.Background);
            public get text(): string;
            public set text(value: string);
            public add_onClick ($value: System.Action) : void
            public remove_onClick ($value: System.Action) : void
            public add_clicked ($value: System.Action) : void
            public remove_clicked ($value: System.Action) : void
            public constructor ()
            public constructor ($iconImage: UnityEngine.UIElements.Background, $clickEvent?: System.Action)
            public constructor ($clickEvent: System.Action)
        }
        class BasePopupField$2<TValueType, TValueChoice> extends UnityEngine.UIElements.BaseField$1<TValueType> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            public static ussClassName : any
            public static textUssClassName : any
            public static arrowUssClassName : any
            public static labelUssClassName : any
            public static inputUssClassName : any
            public get choices(): System.Collections.Generic.List$1<TValueChoice>;
            public set choices(value: System.Collections.Generic.List$1<TValueChoice>);
            public get text(): string;
        }
        /** 
        This is the direction of the Slider and SliderInt.
        */
        enum SliderDirection
        { Horizontal = 0, Vertical = 1 }
        class BaseSlider$1<TValueType> extends UnityEngine.UIElements.BaseField$1<TValueType> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<TValueType>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            public static ussClassName : any
            public static labelUssClassName : any
            public static inputUssClassName : any
            public static horizontalVariantUssClassName : any
            public static verticalVariantUssClassName : any
            public static dragContainerUssClassName : any
            public static trackerUssClassName : any
            public static draggerUssClassName : any
            public static draggerBorderUssClassName : any
            public static textFieldClassName : any
            public get lowValue(): TValueType;
            public set lowValue(value: TValueType);
            public get highValue(): TValueType;
            public set highValue(value: TValueType);
            public get range(): TValueType;
            public get pageSize(): number;
            public set pageSize(value: number);
            public get showInputField(): boolean;
            public set showInputField(value: boolean);
            public get value(): TValueType;
            public set value(value: TValueType);
            public get direction(): UnityEngine.UIElements.SliderDirection;
            public set direction(value: UnityEngine.UIElements.SliderDirection);
            public get inverted(): boolean;
            public set inverted(value: boolean);
            public ApplyInputDeviceDelta ($delta: UnityEngine.Vector3, $speed: UnityEngine.UIElements.DeltaSpeed, $startValue: TValueType) : void
            public AdjustDragElement ($factor: number) : void
        }
        /** 
        Speed at which the value changes for a given input device delta.
        */
        enum DeltaSpeed
        { Fast = 0, Normal = 1, Slow = 2 }
        /** 
        Base class for a tree view, a vertically scrollable area that links to, and displays, a list of items organized in a tree.
        */
        class BaseTreeView extends UnityEngine.UIElements.BaseVerticalCollectionView implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for TreeView elements.
            */
            public static ussClassName : string
            /** 
            The USS class name for TreeView item elements.
            */
            public static itemUssClassName : string
            /** 
            The USS class name for TreeView item toggle elements.
            */
            public static itemToggleUssClassName : string
            /** 
            The USS class name for TreeView indent element.
            */
            public static itemIndentUssClassName : string
            /** 
            The USS class name for TreeView item container elements.
            */
            public static itemContentContainerUssClassName : string
            /** 
            Access to the itemsSource. For a TreeView, the source contains the items wrappers.
            */
            public get itemsSource(): System.Collections.IList;
            /** 
            The view controller for this view, cast as a BaseTreeViewController.
            */
            public get viewController(): UnityEngine.UIElements.BaseTreeViewController;
            /** 
            When true, items are automatically expanded when added to the TreeView.
            */
            public get autoExpand(): boolean;
            public set autoExpand(value: boolean);
            /** 
            Gets the root item identifiers.
            * @returns The root item identifiers. 
            */
            public GetRootIds () : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Gets the TreeView's total number of items.
            * @returns The TreeView's total number of items. 
            */
            public GetTreeCount () : number
            /** 
            Gets the specified TreeView item's identifier.
            * @param $index The TreeView item index.
            * @returns The TreeView item's identifier. 
            */
            public GetIdForIndex ($index: number) : number
            /** 
            Gets the specified TreeView item's parent identifier.
            * @param $index The TreeView item index.
            * @returns The TreeView item's parent identifier. 
            */
            public GetParentIdForIndex ($index: number) : number
            /** 
            Gets children identifiers for the specified TreeView item.
            * @param $index The TreeView item index.
            * @returns The children item identifiers. 
            */
            public GetChildrenIdsForIndex ($index: number) : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Removes an item of the tree if it can find it.
            * @param $id The item id.
            * @returns If the item was removed from the tree. 
            */
            public TryRemoveItem ($id: number) : boolean
            /** 
            Sets the currently selected item by id.
            * @param $id The item id.
            */
            public SetSelectionById ($id: number) : void
            public SetSelectionById ($ids: System.Collections.Generic.IEnumerable$1<number>) : void
            public SetSelectionByIdWithoutNotify ($ids: System.Collections.Generic.IEnumerable$1<number>) : void
            /** 
            Adds an item to the current selection by id.
            * @param $id The item id.
            */
            public AddToSelectionById ($id: number) : void
            /** 
            Removes an item from the current selection by id.
            * @param $id The item id.
            */
            public RemoveFromSelectionById ($id: number) : void
            /** 
            Returns true if the specified TreeView item is expanded, false otherwise.
            * @param $id The TreeView item identifier.
            */
            public IsExpanded ($id: number) : boolean
            /** 
            Collapses the specified TreeView item.
            * @param $id The TreeView item identifier.
            * @param $collapseAllChildren When true, all children will also get collapsed. This is false by default.
            */
            public CollapseItem ($id: number, $collapseAllChildren?: boolean) : void
            /** 
            Expands the specified TreeView item.
            * @param $id The TreeView item identifier.
            * @param $expandAllChildren When true, all children will also get expanded. This is false by default.
            */
            public ExpandItem ($id: number, $expandAllChildren?: boolean) : void
            /** 
            Expands all root TreeView items.
            */
            public ExpandRootItems () : void
            /** 
            Expands all TreeView items, including children.
            */
            public ExpandAll () : void
            /** 
            Collapses all TreeView items, including children.
            */
            public CollapseAll () : void
        }
        /** 
        Options to display alternating background colors for collection view rows.
        */
        enum AlternatingRowBackground
        { None = 0, ContentOnly = 1, All = 2 }
        /** 
        Options to change the virtualization method used by the collection view to display its content.
        */
        enum CollectionVirtualizationMethod
        { FixedHeight = 0, DynamicHeight = 1 }
        /** 
        Information about a drag-and-drop operation that is about to start.
        See BaseVerticalCollectionView.canStartDrag.
        */
        class CanStartDragArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The element on which the drag operation is starting.
            */
            public draggedElement : UnityEngine.UIElements.VisualElement
            /** 
            The ID of the dragged element.
            */
            public id : number
            /** 
            The selected IDs in the source.
            */
            public selectedIds : System.Collections.Generic.IEnumerable$1<number>
        }
        /** 
        Information about a drag-and-drop operation that just started.
        You can use it to store generic data for the rest of the drag.
        See BaseVerticalCollectionView.setupDragAndDrop.
        */
        class SetupDragAndDropArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The element on which the drag operation started.
            */
            public draggedElement : UnityEngine.UIElements.VisualElement
            /** 
            The selected IDs in the source.
            */
            public selectedIds : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Provides entry points to initialize data and visual of the new drag-and-drop operation.
            */
            public startDragArgs : UnityEngine.UIElements.StartDragArgs
        }
        /** 
        Provides entry points to initialize the new drag-and-drop operation.
        */
        class StartDragArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The title displayed near the pointer to identify what is being dragged.
            Should be set during the BaseVerticalCollectionView.setupDragAndDrop callback.
            */
            public get title(): string;
            /** 
            The mode to use for this drag-and-drop operation.
            */
            public get visualMode(): UnityEngine.UIElements.DragVisualMode;
            /** 
            Sets data associated with the current drag-and-drop operation.
            * @param $key The key for this entry.
            * @param $data The data to store.
            */
            public SetGenericData ($key: string, $data: any) : void
            public SetUnityObjectReferences ($references: System.Collections.Generic.IEnumerable$1<UnityEngine.Object>) : void
            public constructor ($title: string, $visualMode: UnityEngine.UIElements.DragVisualMode)
        }
        /** 
        Information about a drag-and-drop operation in progress.
        See BaseVerticalCollectionView.dragAndDropUpdate and BaseVerticalCollectionView.handleDrop.
        */
        class HandleDragAndDropArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The world position of the pointer.
            */
            public get position(): UnityEngine.Vector2;
            /** 
            The target of the drop. There is only a target when hovering over an item. DropPosition.OverItem
            */
            public get target(): any;
            /** 
            The index at which the drop operation wants to happen.
            */
            public get insertAtIndex(): number;
            /** 
            The new parent targeted by the drag-and-drop operation. Used only for trees.
            */
            public get parentId(): number;
            /** 
            The child index under the parentId that the drag-and-drop operation targets. Used only for trees.
            */
            public get childIndex(): number;
            /** 
            The type of drop position.
            */
            public get dropPosition(): UnityEngine.UIElements.DragAndDropPosition;
            /** 
            Data stored for the drag-and-drop operation.
            */
            public get dragAndDropData(): UnityEngine.UIElements.DragAndDropData;
        }
        /** 
        The status of a drag-and-drop operation.
        */
        enum DragVisualMode
        { None = 0, Copy = 1, Move = 2, Rejected = 3 }
        /** 
        Controls how many items can be selected at once.
        */
        enum SelectionType
        { None = 0, Single = 1, Multiple = 2 }
        class KeyboardEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IKeyboardEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get modifiers(): UnityEngine.EventModifiers;
            public get character(): number;
            public get keyCode(): UnityEngine.KeyCode;
            public get shiftKey(): boolean;
            public get ctrlKey(): boolean;
            public get commandKey(): boolean;
            public get altKey(): boolean;
            public get actionKey(): boolean;
            public static GetPooled ($c: any, $keyCode: any, $modifiers: any) : any
            public static GetPooled ($systemEvent: any) : any
            public static GetPooled () : any
        }
        interface IKeyboardEvent
        {
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            modifiers : UnityEngine.EventModifiers
            /** 
            Gets the character entered.
            */
            character : number
            /** 
            The key code.
            */
            keyCode : UnityEngine.KeyCode
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            shiftKey : boolean
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            ctrlKey : boolean
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            commandKey : boolean
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            altKey : boolean
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            actionKey : boolean
        }
        /** 
        This event is sent when a key is pressed.
        */
        class KeyDownEvent extends UnityEngine.UIElements.KeyboardEventBase$1<UnityEngine.UIElements.KeyDownEvent> implements UnityEngine.UIElements.IKeyboardEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets the character entered.
            */
            public get character(): number;
            /** 
            The key code.
            */
            public get keyCode(): UnityEngine.KeyCode;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Extensions methods to provide additional IBindable functionality.
        */
        class IBindingExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public static IsBound ($control: UnityEngine.UIElements.IBindable) : boolean
        }
        /** 
        A Bounds editor field. For more information, refer to.
        */
        class BoundsField extends UnityEngine.UIElements.BaseField$1<UnityEngine.Bounds> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Bounds>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name of center fields in elements of this type.
            */
            public static centerFieldUssClassName : string
            /** 
            USS class name of extents fields in elements of this type.
            */
            public static extentsFieldUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        interface IUxmlSerializedDataCustomAttributeHandler
        {
        }
        /** 
        A BoundsInt field. For more information, refer to.
        */
        class BoundsIntField extends UnityEngine.UIElements.BaseField$1<UnityEngine.BoundsInt> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.BoundsInt>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name of position fields in elements of this type.
            */
            public static positionUssClassName : string
            /** 
            USS class name of size fields in elements of this type.
            */
            public static sizeUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Styled visual element to match the IMGUI Box Style. For more information, refer to.
        */
        class Box extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            public constructor ()
        }
        /** 
        Describes a VisualElement background.
        */
        class Background extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Background>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The texture to display as a background.
            */
            public get texture(): UnityEngine.Texture2D;
            public set texture(value: UnityEngine.Texture2D);
            /** 
            The sprite to display as a background.
            */
            public get sprite(): UnityEngine.Sprite;
            public set sprite(value: UnityEngine.Sprite);
            /** 
            The RenderTexture to display as a background.
            */
            public get renderTexture(): UnityEngine.RenderTexture;
            public set renderTexture(value: UnityEngine.RenderTexture);
            /** 
            The VectorImage to display as a background.
            */
            public get vectorImage(): UnityEngine.UIElements.VectorImage;
            public set vectorImage(value: UnityEngine.UIElements.VectorImage);
            /** 
            Creates a background from a Texture2D.
            * @param $t The texture to use as a background.
            * @returns A new background object. 
            */
            public static FromTexture2D ($t: UnityEngine.Texture2D) : UnityEngine.UIElements.Background
            /** 
            Creates a background from a RenderTexture.
            * @param $rt The render texture to use as a background.
            * @returns A new background object. 
            */
            public static FromRenderTexture ($rt: UnityEngine.RenderTexture) : UnityEngine.UIElements.Background
            /** 
            Creates a background from a Sprite.
            * @param $s The sprite to use as a background.
            * @returns A new background object. 
            */
            public static FromSprite ($s: UnityEngine.Sprite) : UnityEngine.UIElements.Background
            /** 
            Creates a background from a VectorImage.
            * @param $vi The vector image to use as a background.
            * @returns A new background object. 
            */
            public static FromVectorImage ($vi: UnityEngine.UIElements.VectorImage) : UnityEngine.UIElements.Background
            /** 
            Retrieves the selected asset which can be of a type of Texture, Sprite, RenderTexture or VectorImage.
            * @returns An asset as an object. 
            */
            public GetSelectedImage () : UnityEngine.Object
            /** 
            Help verify whether an asset has been assigned or not.
            * @returns True if no asset is assigned. 
            */
            public IsEmpty () : boolean
            public static op_Equality ($lhs: UnityEngine.UIElements.Background, $rhs: UnityEngine.UIElements.Background) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Background, $rhs: UnityEngine.UIElements.Background) : boolean
            public static op_Implicit ($v: UnityEngine.Texture2D) : UnityEngine.UIElements.Background
            public Equals ($other: UnityEngine.UIElements.Background) : boolean
            public Equals ($obj: any) : boolean
        }
        /** 
        Makes a text field for entering a float. For more information, refer to.
        */
        class FloatField extends UnityEngine.UIElements.TextValueField$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A Rect field. For more information, refer to.
        */
        class RectField extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Rect, UnityEngine.UIElements.FloatField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Rect>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Makes a text field for entering an integer. For more information, refer to.
        */
        class IntegerField extends UnityEngine.UIElements.TextValueField$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A RectInt field. For more information, refer to.
        */
        class RectIntField extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.RectInt, UnityEngine.UIElements.IntegerField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.RectInt>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A Vector2 field. For more information, refer to.
        */
        class Vector2Field extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector2, UnityEngine.UIElements.FloatField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector2>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A Vector3 field. For more information, refer to.
        */
        class Vector3Field extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector3, UnityEngine.UIElements.FloatField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector3>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A Vector4 field. For more information, refer to.
        */
        class Vector4Field extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector4, UnityEngine.UIElements.FloatField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector4>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A Vector2Int field. For more information, refer to.
        */
        class Vector2IntField extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector2Int, UnityEngine.UIElements.IntegerField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector2Int>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A Vector3Int field. For more information, refer to.
        */
        class Vector3IntField extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector3Int, UnityEngine.UIElements.IntegerField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector3Int>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Makes a text field for entering doubles.
        */
        class DoubleField extends UnityEngine.UIElements.TextValueField$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        class PopupField$1<T> extends UnityEngine.UIElements.BasePopupField$2<T, T> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<T>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            public static ussClassName : any
            public static labelUssClassName : any
            public static inputUssClassName : any
            public get formatSelectedValueCallback(): System.Func$2<T, string>;
            public set formatSelectedValueCallback(value: System.Func$2<T, string>);
            public get formatListItemCallback(): System.Func$2<T, string>;
            public set formatListItemCallback(value: System.Func$2<T, string>);
            public get value(): T;
            public set value(value: T);
            public get index(): number;
            public set index(value: number);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($label?: string)
            public constructor ($choices: System.Collections.Generic.List$1<T>, $defaultValue: T, $formatSelectedValueCallback?: System.Func$2<T, string>, $formatListItemCallback?: System.Func$2<T, string>)
            public constructor ($label: string, $choices: System.Collections.Generic.List$1<T>, $defaultValue: T, $formatSelectedValueCallback?: System.Func$2<T, string>, $formatListItemCallback?: System.Func$2<T, string>)
            public constructor ($choices: System.Collections.Generic.List$1<T>, $defaultIndex: number, $formatSelectedValueCallback?: System.Func$2<T, string>, $formatListItemCallback?: System.Func$2<T, string>)
            public constructor ($label: string, $choices: System.Collections.Generic.List$1<T>, $defaultIndex: number, $formatSelectedValueCallback?: System.Func$2<T, string>, $formatListItemCallback?: System.Func$2<T, string>)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            public SetValueWithoutNotify ($newValue: T) : void
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A control that allows the user to pick a choice from a list of options. For more information, refer to.
        */
        class DropdownField extends UnityEngine.UIElements.PopupField$1<string> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($label: string)
            public constructor ($choices: System.Collections.Generic.List$1<string>, $defaultValue: string, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public constructor ($label: string, $choices: System.Collections.Generic.List$1<string>, $defaultValue: string, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public constructor ($choices: System.Collections.Generic.List$1<string>, $defaultIndex: number, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public constructor ($label: string, $choices: System.Collections.Generic.List$1<string>, $defaultIndex: number, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Makes a dropdown for switching between enum values. For more information, refer to.
        */
        class EnumField extends UnityEngine.UIElements.BaseField$1<System.Enum> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<System.Enum>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of text elements in elements of this type.
            */
            public static textUssClassName : string
            /** 
            USS class name of arrow indicators in elements of this type.
            */
            public static arrowUssClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Return the text value of the currently selected enum.
            */
            public get text(): string;
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Initializes the EnumField with a default value, and initializes its underlying type.
            * @param $defaultValue The typed enum value.
            */
            public Init ($defaultValue: System.Enum) : void
            /** 
            Initializes the EnumField with a default value, and initializes its underlying type.
            * @param $defaultValue The typed enum value.
            * @param $includeObsoleteValues Set to true to display obsolete values as choices.
            */
            public Init ($defaultValue: System.Enum, $includeObsoleteValues: boolean) : void
            public constructor ()
            public constructor ($defaultValue: System.Enum)
            public constructor ($label: string, $defaultValue?: System.Enum)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A Foldout control is a collapsible section of a user interface. When toggled, it expands or collapses, which hides or reveals the elements it contains.
        */
        class Foldout extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<boolean>, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for Foldout elements.
            */
            public static ussClassName : string
            /** 
            The USS class name of Toggle sub-elements in Foldout elements.
            */
            public static toggleUssClassName : string
            /** 
            The USS class name for the content element in a Foldout.
            */
            public static contentUssClassName : string
            /** 
            The USS class name for the Label element in a Foldout.
            */
            public static inputUssClassName : string
            /** 
            The USS class name for the Label element in a Foldout.
            */
            public static checkmarkUssClassName : string
            /** 
            The USS class name for the Label element in a Foldout.
            */
            public static textUssClassName : string
            /** 
            This element contains the elements that are shown or hidden when you toggle the Foldout.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            This is the text of the toggle's label.
            */
            public get text(): string;
            public set text(value: string);
            /** 
            This is the state of the Foldout's toggle. It is true if the Foldout is open and its contents are
            visible, and false if the Foldout is closed, and its contents are hidden.
            */
            public get value(): boolean;
            public set value(value: boolean);
            /** 
            Sets the value of the Foldout's Toggle sub-element, but does not notify the rest of the hierarchy of the change.
            * @param $newValue The new value of the foldout
            */
            public SetValueWithoutNotify ($newValue: boolean) : void
            public constructor ()
        }
        /** 
        Provides methods to display contextual menus with default textual options, VisualElement, or a combination of both.
        */
        class GenericDropdownMenu extends System.Object implements UnityEngine.UIElements.IGenericMenu
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            The USS class name of items in elements of this type.
            */
            public static itemUssClassName : string
            /** 
            The USS class name of clicked items in elements of this type.
            */
            public static clickUssClassName : string
            /** 
            The USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            The USS class name of inner containers in elements of this type.
            */
            public static containerInnerUssClassName : string
            /** 
            The USS class name of outer containers in elements of this type.
            */
            public static containerOuterUssClassName : string
            /** 
            The USS class name of separators in elements of this type.
            */
            public static appendixUssClassName : string
            /** 
            The USS class name of checkmarks in elements of this type.
            */
            public static checkmarkUssClassName : string
            /** 
            The USS class name of separators in elements of this type.
            */
            public static separatorUssClassName : string
            /** 
            Adds an item to this menu using a default VisualElement.
            * @param $itemName The text to display to the user.
            * @param $isChecked Whether to display a checkmark next to the item.
            * @param $action The callback to invoke when the item is selected by the user.
            */
            public AddItem ($itemName: string, $isChecked: boolean, $action: System.Action) : void
            public AddItem ($itemName: string, $isChecked: boolean, $action: System.Action$1<any>, $data: any) : void
            /** 
            Adds an item to this menu using a custom VisualElement.
            * @param $itemName The text that identifies this visual element.
            * @param $content Custom menu item visual element.
            */
            public AddItem ($itemName: string, $content: UnityEngine.UIElements.VisualElement) : void
            /** 
            Adds a disabled item to this menu using a default VisualElement.
            * @param $itemName The text that identifies this visual element.
            * @param $isChecked Whether to display a checkmark next to the item.
            */
            public AddDisabledItem ($itemName: string, $isChecked: boolean) : void
            /** 
            Adds a visual separator after the previously added items in this menu.
            * @param $path Path to submenu where the separator is added.
            */
            public AddSeparator ($path: string) : void
            /** 
            Displays the menu at the specified position.
            * @param $position The position in the coordinate space of the panel.
            * @param $targetElement The element used to determine in which root to parent the menu.
            * @param $anchored Whether the menu should use the width of the position argument instead of its normal width.
            */
            public DropDown ($position: UnityEngine.Rect, $targetElement?: UnityEngine.UIElements.VisualElement, $anchored?: boolean) : void
            public constructor ()
        }
        interface IGenericMenu
        {
        }
        /** 
        This is an enclosing container for a group of IGroupBoxOption. All group options within this
        container will interact together to allow a single selection, using the DefaultGroupManager.
        Default options are RadioButton, but users can provide other implementations.
        If no IGroupBox is found in the hierarchy, the default container will be the panel.
        */
        class GroupBox extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IGroupBox, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for GroupBox elements.
            */
            public static ussClassName : string
            /** 
            USS class name for Labels in GroupBox elements.
            */
            public static labelUssClassName : string
            /** 
            The title text of the box.
            */
            public get text(): string;
            public set text(value: string);
            public constructor ()
            public constructor ($text: string)
        }
        interface IGroupBox
        {
        }
        /** 
        Makes a field for editing an Hash128. For more information, refer to.
        */
        class Hash128Field extends UnityEngine.UIElements.TextInputBaseField$1<UnityEngine.Hash128> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Hash128>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            public get value(): UnityEngine.Hash128;
            public set value(value: UnityEngine.Hash128);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        User message types.
        */
        enum HelpBoxMessageType
        { None = 0, Info = 1, Warning = 2, Error = 3 }
        /** 
        Makes a help box with a message to the user. For more information, refer to.
        */
        class HelpBox extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for Elements of this type.
            */
            public static ussClassName : string
            /** 
            The USS class name for labels in Elements of this type.
            */
            public static labelUssClassName : string
            /** 
            The USS class name for images in Elements of this type.
            */
            public static iconUssClassName : string
            /** 
            The USS class name for the HelpBoxMessageType.Info state in Elements of this type.
            */
            public static iconInfoUssClassName : string
            /** 
            The USS class name for the HelpBoxMessageType.Warning state in Elements of this type.
            */
            public static iconwarningUssClassName : string
            /** 
            The USS class name for the HelpBoxMessageType.Error state in Elements of this type.
            */
            public static iconErrorUssClassName : string
            /** 
            The message text.
            */
            public get text(): string;
            public set text(value: string);
            /** 
            The type of message.
            */
            public get messageType(): UnityEngine.UIElements.HelpBoxMessageType;
            public set messageType(value: UnityEngine.UIElements.HelpBoxMessageType);
            public constructor ()
            public constructor ($text: string, $messageType: UnityEngine.UIElements.HelpBoxMessageType)
        }
        /** 
        A VisualElement representing a source texture.
        Note: This is not related to the UnityEngine.UI.Image uGUI control. This is the Image control for the UI Toolkit framework.
        */
        class Image extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            The texture to display in this image. If you assign a Texture or Texture2D, the Image element will resize and show the assigned texture.
            */
            public get image(): UnityEngine.Texture;
            public set image(value: UnityEngine.Texture);
            /** 
            The sprite to display in this image.
            */
            public get sprite(): UnityEngine.Sprite;
            public set sprite(value: UnityEngine.Sprite);
            /** 
            The VectorImage to display in this image.
            */
            public get vectorImage(): UnityEngine.UIElements.VectorImage;
            public set vectorImage(value: UnityEngine.UIElements.VectorImage);
            /** 
            The source rectangle inside the texture relative to the top left corner.
            */
            public get sourceRect(): UnityEngine.Rect;
            public set sourceRect(value: UnityEngine.Rect);
            /** 
            The base texture coordinates of the Image relative to the bottom left corner.
            */
            public get uv(): UnityEngine.Rect;
            public set uv(value: UnityEngine.Rect);
            /** 
            ScaleMode used to display the Image.
            */
            public get scaleMode(): UnityEngine.ScaleMode;
            public set scaleMode(value: UnityEngine.ScaleMode);
            /** 
            Tinting color for this Image.
            */
            public get tintColor(): UnityEngine.Color;
            public set tintColor(value: UnityEngine.Color);
            public constructor ()
        }
        /** 
        An asset that represents a vector image.
        */
        class VectorImage extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** The width of the vector image.
            */
            public get width(): number;
            /** The height of the vector image.
            */
            public get height(): number;
            public constructor ()
        }
        /** 
        INotifyValueChangedExtensions is a set of extension methods useful for objects implementing INotifyValueChanged_1.
        */
        class INotifyValueChangedExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class ChangeEvent$1<T> extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.ChangeEvent$1<T>> implements UnityEngine.UIElements.IChangeEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get previousValue(): T;
            public get newValue(): T;
            public static GetPooled ($previousValue: any, $newValue: any) : any
            public constructor ()
        }
        interface IChangeEvent
        {
        }
        interface EventCallback$1<TEventType>
        { 
        (evt: TEventType) : void; 
        Invoke?: (evt: TEventType) => void;
        }
        /** 
        Provides an Element displaying text. For more information, refer to.
        */
        class Label extends UnityEngine.UIElements.TextElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.ITextSelection
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            public constructor ()
            public constructor ($text: string)
        }
        /** 
        Base class that describes a VisualElement derived class for the parsing of UXML files and the generation of UXML schema definition.
        */
        class BaseUxmlTraits extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Describes a VisualElement derived class for the parsing of UXML files and the generation of UXML schema definition.
        */
        class UxmlTraits extends UnityEngine.UIElements.BaseUxmlTraits
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Base class for describing an XML attribute.
        */
        class UxmlAttributeDescription extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The attribute name.
            */
            public get name(): string;
            public set name(value: string);
            /** 
            A list of obsolete names for this attribute.
            */
            public get obsoleteNames(): System.Collections.Generic.IEnumerable$1<string>;
            public set obsoleteNames(value: System.Collections.Generic.IEnumerable$1<string>);
            /** 
            Attribute type.
            */
            public get type(): string;
            /** 
            Attribute namespace.
            */
            public get typeNamespace(): string;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Whether the attribute is optional, required or prohibited.
            */
            public get use(): UnityEngine.UIElements.UxmlAttributeDescription.Use;
            public set use(value: UnityEngine.UIElements.UxmlAttributeDescription.Use);
            /** 
            Restrictions on the possible values of the attribute.
            */
            public get restriction(): UnityEngine.UIElements.UxmlTypeRestriction;
            public set restriction(value: UnityEngine.UIElements.UxmlTypeRestriction);
        }
        class TypedUxmlAttributeDescription$1<T> extends UnityEngine.UIElements.UxmlAttributeDescription
        {
            protected [__keep_incompatibility]: never;
            public get defaultValue(): T;
            public set defaultValue(value: T);
            public get defaultValueAsString(): string;
            public GetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : T
        }
        class BaseFieldTraits$2<TValueType, TValueUxmlAttributeType> extends UnityEngine.UIElements.BaseField$1.UxmlTraits<TValueType>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        interface IUxmlAttributes
        {
            /** 
            Get the value of an attribute as a string.
            * @param $attributeName Attribute name.
            * @param $value The attribute value or null if not found.
            * @returns True if the attribute was found, false otherwise. 
            */
            TryGetAttributeValue ($attributeName: string, $value: $Ref<string>) : boolean
        }
        /** 
        This structure holds information used during UXML template instantiation.
        */
        class CreationContext extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.CreationContext>
        {
            protected [__keep_incompatibility]: never;
            public static Default : UnityEngine.UIElements.CreationContext
            /** 
            The element into which the visualTreeAsset is being cloned or instantiated.
            VisualTreeAsset.CloneTreeVisualTreeAsset.Instantiate
            */
            public get target(): UnityEngine.UIElements.VisualElement;
            /** 
            The target UXML file to clone or instantiate.
            */
            public get visualTreeAsset(): UnityEngine.UIElements.VisualTreeAsset;
            public get slotInsertionPoints(): System.Collections.Generic.Dictionary$2<string, UnityEngine.UIElements.VisualElement>;
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.CreationContext) : boolean
            public static op_Equality ($context1: UnityEngine.UIElements.CreationContext, $context2: UnityEngine.UIElements.CreationContext) : boolean
            public static op_Inequality ($context1: UnityEngine.UIElements.CreationContext, $context2: UnityEngine.UIElements.CreationContext) : boolean
        }
        /** 
        A TextField accepts and displays text input. For more information, refer to.
        */
        class TextField extends UnityEngine.UIElements.TextInputBaseField$1<string> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Set this to true to allow multiple lines in the textfield and false if otherwise.
            */
            public get multiline(): boolean;
            public set multiline(value: boolean);
            /** 
            The string currently being exposed by the field.
            */
            public get value(): string;
            public set value(value: string);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($maxLength: number, $multiline: boolean, $isPasswordField: boolean, $maskChar: number)
            public constructor ($label: string)
            public constructor ($label: string, $maxLength: number, $multiline: boolean, $isPasswordField: boolean, $maskChar: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Options for controlling the visibility of scroll bars in the ScrollView.
        */
        enum ScrollerVisibility
        { Auto = 0, AlwaysVisible = 1, Hidden = 2 }
        /** 
        A ListView is a vertically scrollable area that links to, and displays, a list of items.
        */
        class ListView extends UnityEngine.UIElements.BaseListView implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            Callback for constructing the VisualElement that is the template for each recycled and re-bound element in the list.
            */
            public get makeItem(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeItem(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            A UXML template that constructs each recycled and rebound element within the list.
            This template is designed to replace the makeItem definition.
            */
            public get itemTemplate(): UnityEngine.UIElements.VisualTreeAsset;
            public set itemTemplate(value: UnityEngine.UIElements.VisualTreeAsset);
            /** 
            Callback for binding a data item to the visual element.
            */
            public get bindItem(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set bindItem(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback for unbinding a data item from the VisualElement.
            */
            public get unbindItem(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set unbindItem(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback invoked when a VisualElement created via makeItem is no longer needed and will be destroyed.
            */
            public get destroyItem(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set destroyItem(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            public constructor ()
            public constructor ($itemsSource: System.Collections.IList, $itemHeight?: number, $makeItem?: System.Func$1<UnityEngine.UIElements.VisualElement>, $bindItem?: System.Action$2<UnityEngine.UIElements.VisualElement, number>)
        }
        /** 
        An instance of this class holds a tree of VisualElementAsset's, created from a UXML file. Each node in the file corresponds to a VisualElementAsset. You can clone a VisualTreeAsset to create a tree of VisualElement's.
        Note: You can't generate a VisualTreeAsset from raw UXML at runtime.
        */
        class VisualTreeAsset extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** 
            Whether there were errors encountered while importing the UXML File
            */
            public get importedWithErrors(): boolean;
            /** 
            Whether there were warnings encountered while importing the UXML File
            */
            public get importedWithWarnings(): boolean;
            /** 
            The UXML templates used by this VisualTreeAsset.
            */
            public get templateDependencies(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.VisualTreeAsset>;
            /** 
            The stylesheets used by this VisualTreeAsset.
            */
            public get stylesheets(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StyleSheet>;
            /** 
            A hash value computed from the template content.
            */
            public get contentHash(): number;
            public set contentHash(value: number);
            /** 
            Build a tree of VisualElements from the asset.
            * @returns The root of the tree of VisualElements that was just cloned. 
            */
            public Instantiate () : UnityEngine.UIElements.TemplateContainer
            /** 
            Build a tree of VisualElements from the asset.
            * @param $bindingPath The path to the property that you want to bind to the root of the cloned tree.
            * @returns The root of the tree of VisualElements that was just cloned. 
            */
            public Instantiate ($bindingPath: string) : UnityEngine.UIElements.TemplateContainer
            /** 
            Build a tree of VisualElements from the asset.
            * @returns The root of the tree of VisualElements that was just cloned. 
            */
            public CloneTree () : UnityEngine.UIElements.TemplateContainer
            /** 
            Build a tree of VisualElements from the asset.
            * @param $bindingPath The path to the property that you want to bind to the root of the cloned tree.
            * @returns The root of the tree of VisualElements that was just cloned. 
            */
            public CloneTree ($bindingPath: string) : UnityEngine.UIElements.TemplateContainer
            /** 
            Builds a tree of VisualElements from the asset.
            * @param $target A VisualElement that will act as the root of the cloned tree.
            */
            public CloneTree ($target: UnityEngine.UIElements.VisualElement) : void
            public CloneTree ($target: UnityEngine.UIElements.VisualElement, $firstElementIndex: $Ref<number>, $elementAddedCount: $Ref<number>) : void
            public constructor ()
        }
        /** 
        Makes a text field for entering long integers. For more information, refer to.
        */
        class LongField extends UnityEngine.UIElements.TextValueField$1<bigint> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<bigint>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<bigint>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A min/max slider containing a representation of a range. For more information, refer to.
        */
        class MinMaxSlider extends UnityEngine.UIElements.BaseField$1<UnityEngine.Vector2> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector2>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name of tracker elements in elements of this type.
            */
            public static trackerUssClassName : string
            /** 
            USS class name of dragger elements in elements of this type.
            */
            public static draggerUssClassName : string
            /** 
            USS class name of the minimum thumb elements in elements of this type.
            */
            public static minThumbUssClassName : string
            /** 
            USS class name of the maximum thumb elements in elements of this type.
            */
            public static maxThumbUssClassName : string
            /** 
            This is the low value of the range represented on the slider.
            */
            public get minValue(): number;
            public set minValue(value: number);
            /** 
            This is the high value of the range represented on the slider.
            */
            public get maxValue(): number;
            public set maxValue(value: number);
            /** 
            This is the value of the slider. This is a Vector2 where the x is the lower bound and the y is the higher bound.
            */
            public get value(): UnityEngine.Vector2;
            public set value(value: UnityEngine.Vector2);
            /** 
            Returns the range of the low/high limits of the slider.
            */
            public get range(): number;
            /** 
            This is the low limit of the slider.
            */
            public get lowLimit(): number;
            public set lowLimit(value: number);
            /** 
            This is the high limit of the slider.
            */
            public get highLimit(): number;
            public set highLimit(value: number);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($minValue: number, $maxValue: number, $minLimit: number, $maxLimit: number)
            public constructor ($label: string, $minValue?: number, $maxValue?: number, $minLimit?: number, $maxLimit?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A list view with multi column support.
        */
        class MultiColumnListView extends UnityEngine.UIElements.BaseListView implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The view controller for this view, cast as a MultiColumnListViewController.
            */
            public get viewController(): UnityEngine.UIElements.MultiColumnListViewController;
            /** 
            Contains information about which columns are currently being sorted.
            */
            public get sortedColumns(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.SortColumnDescription>;
            /** 
            The collection of columns for the multi-column header.
            */
            public get columns(): UnityEngine.UIElements.Columns;
            /** 
            The collection of sorted columns by default.
            */
            public get sortColumnDescriptions(): UnityEngine.UIElements.SortColumnDescriptions;
            /** 
            Whether or not sorting is enabled in the multi-column header.
            */
            public get sortingEnabled(): boolean;
            public set sortingEnabled(value: boolean);
            public add_columnSortingChanged ($value: System.Action) : void
            public remove_columnSortingChanged ($value: System.Action) : void
            public add_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public remove_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public constructor ()
            public constructor ($columns: UnityEngine.UIElements.Columns)
        }
        /** 
        A tree view with multi column support.
        */
        class MultiColumnTreeView extends UnityEngine.UIElements.BaseTreeView implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The view controller for this view, cast as a MultiColumnTreeViewController.
            */
            public get viewController(): UnityEngine.UIElements.MultiColumnTreeViewController;
            /** 
            Contains information about which columns are currently being sorted.
            */
            public get sortedColumns(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.SortColumnDescription>;
            /** 
            The collection of columns for the multi-column header.
            */
            public get columns(): UnityEngine.UIElements.Columns;
            /** 
            The collection of sorted columns by default.
            */
            public get sortColumnDescriptions(): UnityEngine.UIElements.SortColumnDescriptions;
            /** 
            Whether or not sorting is enabled in the multi-column header.
            */
            public get sortingEnabled(): boolean;
            public set sortingEnabled(value: boolean);
            public add_columnSortingChanged ($value: System.Action) : void
            public remove_columnSortingChanged ($value: System.Action) : void
            public add_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public remove_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public constructor ()
            public constructor ($columns: UnityEngine.UIElements.Columns)
        }
        /** 
        The sort direction.
        */
        enum SortDirection
        { Ascending = 0, Descending = 1 }
        /** 
        Styled visual text element. This element doesn't have any functionality. It's just a container with a border and a title, rather than a window or popup. For more information, refer to.
        */
        class PopupWindow extends UnityEngine.UIElements.TextElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.ITextSelection
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of content elements in elements of this type.
            */
            public static contentUssClassName : string
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            public constructor ()
        }
        /** 
        Abstract base class for the ProgressBar.
        */
        class AbstractProgressBar extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS Class Name used to style the ProgressBar.
            */
            public static ussClassName : string
            /** 
            USS Class Name used to style the container of the ProgressBar.
            */
            public static containerUssClassName : string
            /** 
            USS Class Name used to style the title of the ProgressBar.
            */
            public static titleUssClassName : string
            /** 
            USS Class Name used to style the container of the title of the ProgressBar.
            */
            public static titleContainerUssClassName : string
            /** 
            USS Class Name used to style the progress bar of the ProgressBar.
            */
            public static progressUssClassName : string
            /** 
            USS Class Name used to style the background of the ProgressBar.
            */
            public static backgroundUssClassName : string
            /** 
            Sets the title of the ProgressBar that displays in the center of the control.
            */
            public get title(): string;
            public set title(value: string);
            /** 
            Sets the minimum value of the ProgressBar.
            */
            public get lowValue(): number;
            public set lowValue(value: number);
            /** 
            Sets the maximum value of the ProgressBar.
            */
            public get highValue(): number;
            public set highValue(value: number);
            /** 
            Sets the progress value. If the value has changed, dispatches an ChangeEvent_1 of type float.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            Sets the progress value.
            */
            public SetValueWithoutNotify ($newValue: number) : void
        }
        /** 
        A control that displays the progress between a lower and upper bound value.
        */
        class ProgressBar extends UnityEngine.UIElements.AbstractProgressBar implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        A control that allows users to select a single option inside a RadioButtonGroup. For more information, refer to.
        */
        class RadioButton extends UnityEngine.UIElements.BaseBoolField implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IGroupBoxOption, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<boolean>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for RadioButton elements.
            */
            public static ussClassName : string
            /** 
            USS class name for Labels in RadioButton elements.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in RadioButton elements.
            */
            public static inputUssClassName : string
            /** 
            USS class name of checkmark background in RadioButton elements.
            */
            public static checkmarkBackgroundUssClassName : string
            /** 
            USS class name of checkmark in RadioButton elements.
            */
            public static checkmarkUssClassName : string
            /** 
            USS class name of Text elements in RadioButton elements.
            */
            public static textUssClassName : string
            public get value(): boolean;
            public set value(value: boolean);
            public constructor ()
            public constructor ($label: string)
        }
        interface IGroupBoxOption
        {
        }
        /** 
        A control that allows single selection out of a logical group of RadioButton elements. Selecting one will deselect the others. For more information, refer to.
        */
        class RadioButtonGroup extends UnityEngine.UIElements.BaseField$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IGroupBox, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for RadioButtonGroup elements.
            */
            public static ussClassName : string
            /** 
            USS class name of container element of this type.
            */
            public static containerUssClassName : string
            /** 
            The list of available choices in the group.
            */
            public get choices(): System.Collections.Generic.IEnumerable$1<string>;
            public set choices(value: System.Collections.Generic.IEnumerable$1<string>);
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($label: string, $radioButtonChoices?: System.Collections.Generic.List$1<string>)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A button that executes an action repeatedly while it is pressed. For more information, refer to.
        */
        class RepeatButton extends UnityEngine.UIElements.TextElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.ITextSelection
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            public SetAction ($clickEvent: System.Action, $delay: bigint, $interval: bigint) : void
            public constructor ()
            public constructor ($clickEvent: System.Action, $delay: bigint, $interval: bigint)
        }
        /** 
        A vertical or horizontal scrollbar. For more information, refer to.
        */
        class Scroller extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of elements of this type, when they are displayed horizontally.
            */
            public static horizontalVariantUssClassName : string
            /** 
            USS class name of elements of this type, when they are displayed vertically.
            */
            public static verticalVariantUssClassName : string
            /** 
            USS class name of slider elements in elements of this type.
            */
            public static sliderUssClassName : string
            /** 
            USS class name of low buttons in elements of this type.
            */
            public static lowButtonUssClassName : string
            /** 
            USS class name of high buttons in elements of this type.
            */
            public static highButtonUssClassName : string
            /** 
            The slider used by this scroller.
            */
            public get slider(): UnityEngine.UIElements.Slider;
            /** 
            Bottom or left scroll button.
            */
            public get lowButton(): UnityEngine.UIElements.RepeatButton;
            /** 
            Top or right scroll button.
            */
            public get highButton(): UnityEngine.UIElements.RepeatButton;
            /** 
            Value that defines the slider position. It lies between lowValue and highValue.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            Minimum value.
            */
            public get lowValue(): number;
            public set lowValue(value: number);
            /** 
            Maximum value.
            */
            public get highValue(): number;
            public set highValue(value: number);
            /** 
            Direction of this scrollbar.
            */
            public get direction(): UnityEngine.UIElements.SliderDirection;
            public set direction(value: UnityEngine.UIElements.SliderDirection);
            public add_valueChanged ($value: System.Action$1<number>) : void
            public remove_valueChanged ($value: System.Action$1<number>) : void
            /** 
            Updates the slider element size as a ratio of total range. A value greater than or equal to 1 will disable the Scroller.
            * @param $factor Slider size ratio.
            */
            public Adjust ($factor: number) : void
            /** 
            Will change the value according to the current slider pageSize.
            */
            public ScrollPageUp () : void
            /** 
            Will change the value according to the current slider pageSize.
            */
            public ScrollPageDown () : void
            /** 
            Will change the value according to the current slider pageSize.
            */
            public ScrollPageUp ($factor: number) : void
            /** 
            Will change the value according to the current slider pageSize.
            */
            public ScrollPageDown ($factor: number) : void
            public constructor ()
            public constructor ($lowValue: number, $highValue: number, $valueChanged: System.Action$1<number>, $direction?: UnityEngine.UIElements.SliderDirection)
        }
        /** 
        A slider containing floating point values. For more information, refer to.
        */
        class Slider extends UnityEngine.UIElements.BaseSlider$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($start: number, $end: number, $direction?: UnityEngine.UIElements.SliderDirection, $pageSize?: number)
            public constructor ($label: string, $start?: number, $end?: number, $direction?: UnityEngine.UIElements.SliderDirection, $pageSize?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Configurations of the ScrollView to influence the layout of its contents and how scrollbars appear.
        ScrollView.mode
        */
        enum ScrollViewMode
        { Vertical = 0, Horizontal = 1, VerticalAndHorizontal = 2 }
        /** 
        Displays its contents inside a scrollable frame. For more information, see.
        */
        class ScrollView extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of viewport elements in elements of this type.
            */
            public static viewportUssClassName : string
            /** 
            USS class name that's added when the Viewport is in horizontal mode.
            ScrollViewMode.Horizontal
            */
            public static horizontalVariantViewportUssClassName : string
            /** 
            USS class name that's added when the Viewport is in vertical mode.
            ScrollViewMode.Vertical
            */
            public static verticalVariantViewportUssClassName : string
            /** 
            USS class name that's added when the Viewport is in both horizontal and vertical mode.
            ScrollViewMode.VerticalAndHorizontal
            */
            public static verticalHorizontalVariantViewportUssClassName : string
            /** 
            USS class name of content elements in elements of this type.
            */
            public static contentAndVerticalScrollUssClassName : string
            /** 
            USS class name of content elements in elements of this type.
            */
            public static contentUssClassName : string
            /** 
            USS class name that's added when the ContentContainer is in horizontal mode.
            ScrollViewMode.Horizontal
            */
            public static horizontalVariantContentUssClassName : string
            /** 
            USS class name that's added when the ContentContainer is in vertical mode.
            ScrollViewMode.Vertical
            */
            public static verticalVariantContentUssClassName : string
            /** 
            USS class name that's added when the ContentContainer is in both horizontal and vertical mode.
            ScrollViewMode.VerticalAndHorizontal
            */
            public static verticalHorizontalVariantContentUssClassName : string
            /** 
            USS class name of horizontal scrollers in elements of this type.
            */
            public static hScrollerUssClassName : string
            /** 
            USS class name of vertical scrollers in elements of this type.
            */
            public static vScrollerUssClassName : string
            /** 
            USS class name that's added when the ScrollView is in horizontal mode.
            ScrollViewMode.Horizontal
            */
            public static horizontalVariantUssClassName : string
            /** 
            USS class name that's added when the ScrollView is in vertical mode.
            ScrollViewMode.Vertical
            */
            public static verticalVariantUssClassName : string
            /** 
            USS class name that's added when the ScrollView is in both horizontal and vertical mode.
            ScrollViewMode.VerticalAndHorizontal
            */
            public static verticalHorizontalVariantUssClassName : string
            public static scrollVariantUssClassName : string
            /** 
            Specifies whether the horizontal scroll bar is visible.
            */
            public get horizontalScrollerVisibility(): UnityEngine.UIElements.ScrollerVisibility;
            public set horizontalScrollerVisibility(value: UnityEngine.UIElements.ScrollerVisibility);
            /** 
            Specifies whether the vertical scroll bar is visible.
            */
            public get verticalScrollerVisibility(): UnityEngine.UIElements.ScrollerVisibility;
            public set verticalScrollerVisibility(value: UnityEngine.UIElements.ScrollerVisibility);
            /** 
            Specifies the minimum amount of time in milliseconds between each elastic spring animation execution.
            */
            public get elasticAnimationIntervalMs(): bigint;
            public set elasticAnimationIntervalMs(value: bigint);
            /** 
            The current scrolling position.
            */
            public get scrollOffset(): UnityEngine.Vector2;
            public set scrollOffset(value: UnityEngine.Vector2);
            /** 
            This property controls the speed of the horizontal scrolling when using a keyboard or the on-screen scrollbar buttons (arrows and handle), based on the size of the page.
            */
            public get horizontalPageSize(): number;
            public set horizontalPageSize(value: number);
            /** 
            This property controls the speed of the vertical scrolling when using a keyboard or the on-screen scrollbar buttons (arrows and handle), based on the size of the page.
            */
            public get verticalPageSize(): number;
            public set verticalPageSize(value: number);
            /** 
            This property controls the scrolling speed only when using a mouse scroll wheel, based on the size of the page. It takes precedence over the --unity-metrics-single_line-height USS variable.
            */
            public get mouseWheelScrollSize(): number;
            public set mouseWheelScrollSize(value: number);
            /** 
            Controls the rate at which the scrolling movement slows after a user scrolls using a touch interaction.
            */
            public get scrollDecelerationRate(): number;
            public set scrollDecelerationRate(value: number);
            /** 
            The amount of elasticity to use when a user tries to scroll past the boundaries of the scroll view.
            */
            public get elasticity(): number;
            public set elasticity(value: number);
            /** 
            The behavior to use when a user tries to scroll past the boundaries of the ScrollView content using a touch interaction.
            */
            public get touchScrollBehavior(): UnityEngine.UIElements.ScrollView.TouchScrollBehavior;
            public set touchScrollBehavior(value: UnityEngine.UIElements.ScrollView.TouchScrollBehavior);
            /** 
            The behavior to use when scrolling reaches limits of a nested ScrollView.
            */
            public get nestedInteractionKind(): UnityEngine.UIElements.ScrollView.NestedInteractionKind;
            public set nestedInteractionKind(value: UnityEngine.UIElements.ScrollView.NestedInteractionKind);
            /** 
            Represents the visible part of contentContainer.
            */
            public get contentViewport(): UnityEngine.UIElements.VisualElement;
            /** 
            Horizontal scrollbar.
            */
            public get horizontalScroller(): UnityEngine.UIElements.Scroller;
            /** 
            Vertical Scrollbar.
            */
            public get verticalScroller(): UnityEngine.UIElements.Scroller;
            /** 
            Contains full content, potentially partially visible.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Controls how the ScrollView allows the user to scroll the contents.
            ScrollViewMode
            */
            public get mode(): UnityEngine.UIElements.ScrollViewMode;
            public set mode(value: UnityEngine.UIElements.ScrollViewMode);
            /** 
            Scroll to a specific child element.
            * @param $child The child to scroll to.
            */
            public ScrollTo ($child: UnityEngine.UIElements.VisualElement) : void
            public constructor ()
            public constructor ($scrollViewMode: UnityEngine.UIElements.ScrollViewMode)
        }
        /** 
        A slider containing Integer discrete values. For more information, refer to.
        */
        class SliderInt extends UnityEngine.UIElements.BaseSlider$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            The value to add or remove to the SliderInt.value when it is clicked.
            */
            public get pageSize(): number;
            public set pageSize(value: number);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($start: number, $end: number, $direction?: UnityEngine.UIElements.SliderDirection, $pageSize?: number)
            public constructor ($label: string, $start?: number, $end?: number, $direction?: UnityEngine.UIElements.SliderDirection, $pageSize?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Creates a tab to organize content on different screens.
        */
        class Tab extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name for the header of this type.
            */
            public static tabHeaderUssClassName : string
            /** 
            USS class name for the icon inside the header.
            */
            public static tabHeaderImageUssClassName : string
            /** 
            USS class name for the icon inside the header when the value is null.
            */
            public static tabHeaderEmptyImageUssClassName : string
            /** 
            USS class name for the icon inside the header when the label is empty or null.
            */
            public static tabHeaderStandaloneImageUssClassName : string
            /** 
            USS class name for the label of the header.
            */
            public static tabHeaderLabelUssClassName : string
            /** 
            USS class name for the label of the header when the value is empty or null.
            */
            public static tabHeaderEmptyLabeUssClassName : string
            /** 
            USS class name for the active state underline of the header.
            */
            public static tabHeaderUnderlineUssClassName : string
            /** 
            USS class name of container element of this type.
            */
            public static contentUssClassName : string
            /** 
            USS class name for the dragging state of this type.
            */
            public static draggingUssClassName : string
            /** 
            USS class name for reorderable tab elements.
            */
            public static reorderableUssClassName : string
            /** 
            USS class name for drag handle in reorderable tabs.
            */
            public static reorderableItemHandleUssClassName : string
            /** 
            USS class name for drag handlebar in reorderable tabs.
            */
            public static reorderableItemHandleBarUssClassName : string
            /** 
            The USS class name for a closeable tab.
            */
            public static closeableUssClassName : string
            /** 
            The USS class name for close button in closable tabs.
            */
            public static closeButtonUssClassName : string
            /** 
            Returns the Tab's header.
            */
            public get tabHeader(): UnityEngine.UIElements.VisualElement;
            /** 
            Sets the label of the Tab's header.
            */
            public get label(): string;
            public set label(value: string);
            /** 
            Sets the icon for the Tab's header.
            */
            public get iconImage(): UnityEngine.UIElements.Background;
            public set iconImage(value: UnityEngine.UIElements.Background);
            /** 
            A property that adds the ability to close tabs.
            */
            public get closeable(): boolean;
            public set closeable(value: boolean);
            /** 
            The container for the content of the Tab.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            public add_selected ($value: System.Action$1<UnityEngine.UIElements.Tab>) : void
            public remove_selected ($value: System.Action$1<UnityEngine.UIElements.Tab>) : void
            public add_closing ($value: System.Func$1<boolean>) : void
            public remove_closing ($value: System.Func$1<boolean>) : void
            public add_closed ($value: System.Action$1<UnityEngine.UIElements.Tab>) : void
            public remove_closed ($value: System.Action$1<UnityEngine.UIElements.Tab>) : void
            public constructor ()
            public constructor ($label: string)
            public constructor ($iconImage: UnityEngine.UIElements.Background)
            public constructor ($label: string, $iconImage: UnityEngine.UIElements.Background)
        }
        /** 
        Creates a tab view that groups a one or more Tab elements.
        */
        class TabView extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name for the header container of this type.
            */
            public static headerContainerClassName : string
            /** 
            USS class name for the content container of this type.
            */
            public static contentContainerUssClassName : string
            /** 
            The USS class name for reorderable tab view.
            */
            public static reorderableUssClassName : string
            /** 
            The USS class name for vertical tab view.
            */
            public static verticalUssClassName : string
            /** 
            The container for the content of the TabView.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Property that holds the current active tab.
            */
            public get activeTab(): UnityEngine.UIElements.Tab;
            public set activeTab(value: UnityEngine.UIElements.Tab);
            /** 
            A property that returns the index of current active tab inside a list of available tabs.
            */
            public get selectedTabIndex(): number;
            public set selectedTabIndex(value: number);
            /** 
            A property that adds dragging support to tabs.
            */
            public get reorderable(): boolean;
            public set reorderable(value: boolean);
            public add_activeTabChanged ($value: System.Action$2<UnityEngine.UIElements.Tab, UnityEngine.UIElements.Tab>) : void
            public remove_activeTabChanged ($value: System.Action$2<UnityEngine.UIElements.Tab, UnityEngine.UIElements.Tab>) : void
            public constructor ()
        }
        class TextValueFieldTraits$2<TValueType, TValueUxmlAttributeType> extends UnityEngine.UIElements.BaseFieldTraits$2<TValueType, TValueUxmlAttributeType>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        A Toggle is a clickable element that represents a boolean value.
        */
        class Toggle extends UnityEngine.UIElements.BaseBoolField implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<boolean>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for Toggle elements.
            */
            public static ussClassName : string
            /** 
            USS class name for Labels in Toggle elements.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in Toggle elements.
            */
            public static inputUssClassName : string
            /** 
            USS class name of Images in Toggle elements.
            */
            public static checkmarkUssClassName : string
            /** 
            USS class name of Text elements in Toggle elements.
            */
            public static textUssClassName : string
            /** 
            USS class name of Toggle elements that have mixed values
            */
            public static mixedValuesUssClassName : string
            public constructor ()
            public constructor ($label: string)
        }
        /** 
        The structure that keeps track of the Button states inside a ToggleButtonGroup.
        */
        class ToggleButtonGroupState extends System.ValueType implements System.IComparable$1<UnityEngine.UIElements.ToggleButtonGroupState>, System.IEquatable$1<UnityEngine.UIElements.ToggleButtonGroupState>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns the number of toggle button options available.
            */
            public get length(): number;
            public get_Item ($index: number) : boolean
            public set_Item ($index: number, $value: boolean) : void
            /** 
            Sets all the available options to active.
            */
            public SetAllOptions () : void
            /** 
            Resets the states of the toggle buttons.
            */
            public ResetAllOptions () : void
            /** 
            Toggles all the available options' state.
            */
            public ToggleAllOptions () : void
            public static CreateFromOptions ($options: System.Collections.Generic.IList$1<boolean>) : UnityEngine.UIElements.ToggleButtonGroupState
            public static FromEnumFlags ($options: System.Enum, $length?: number) : UnityEngine.UIElements.ToggleButtonGroupState
            /** 
            Compares two ToggleButtonGroupState.
            * @param $other The option set to be compared against.
            * @returns True if both option sets are the same, otherwise returns false. 
            */
            public CompareTo ($other: UnityEngine.UIElements.ToggleButtonGroupState) : number
            public static Compare ($options: UnityEngine.UIElements.ToggleButtonGroupState, $value: System.Enum) : boolean
            public static op_Equality ($lhs: UnityEngine.UIElements.ToggleButtonGroupState, $rhs: UnityEngine.UIElements.ToggleButtonGroupState) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.ToggleButtonGroupState, $rhs: UnityEngine.UIElements.ToggleButtonGroupState) : boolean
            /** 
            Checks if a given ToggleButtonGroupState matches with the current one.
            * @param $other A ToggleButtonGroupState to be compared against.
            * @returns True if both option has the same data and number of options, otherwise returns false. 
            */
            public Equals ($other: UnityEngine.UIElements.ToggleButtonGroupState) : boolean
            /** 
            Compares the the current option set with an Object.
            * @param $obj An object to be compared against.
            * @returns True if both option sets are not the same, otherwise returns false. 
            */
            public Equals ($obj: any) : boolean
            public constructor ($optionsBitMask: bigint, $length: number)
        }
        /** 
        A control that allows single or multiple selection out of a logical group of Button elements.
        */
        class ToggleButtonGroup extends UnityEngine.UIElements.BaseField$1<UnityEngine.UIElements.ToggleButtonGroupState> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.UIElements.ToggleButtonGroupState>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements for this type.
            */
            public static ussClassName : string
            /** 
            USS class name of container element of this type.
            */
            public static containerUssClassName : string
            /** 
            USS class name of container element of this type.
            */
            public static buttonGroupClassName : string
            /** 
            USS class name for any Buttons in the group.
            */
            public static buttonClassName : string
            /** 
            USS class name for the leftmost Button in the group.
            */
            public static buttonLeftClassName : string
            /** 
            USS class name for any Buttons in the middle of the group.
            */
            public static buttonMidClassName : string
            /** 
            USS class name for the rightmost Button in the group.
            */
            public static buttonRightClassName : string
            /** 
            USS class name for the Button if only one is available in the group.
            */
            public static buttonStandaloneClassName : string
            /** 
            Whether all buttons can be selected.
            */
            public get isMultipleSelection(): boolean;
            public set isMultipleSelection(value: boolean);
            /** 
            Allows having all buttons to be unchecked when set to true.
            */
            public get allowEmptySelection(): boolean;
            public set allowEmptySelection(value: boolean);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($label: string)
            public constructor ($toggleButtonGroupState: UnityEngine.UIElements.ToggleButtonGroupState)
            public constructor ($label: string, $toggleButtonGroupState: UnityEngine.UIElements.ToggleButtonGroupState)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A TreeView is a vertically scrollable area that links to, and displays, a list of items organized in a tree.
        */
        class TreeView extends UnityEngine.UIElements.BaseTreeView implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            Callback for constructing the VisualElement that is the template for each recycled and re-bound element in the list.
            */
            public get makeItem(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeItem(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            A UXML template that constructs each recycled and rebound element within the tree.
            This template is designed to replace the makeItem definition.
            */
            public get itemTemplate(): UnityEngine.UIElements.VisualTreeAsset;
            public set itemTemplate(value: UnityEngine.UIElements.VisualTreeAsset);
            /** 
            Callback for binding a data item to the visual element.
            */
            public get bindItem(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set bindItem(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback for unbinding a data item from the VisualElement.
            */
            public get unbindItem(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set unbindItem(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback invoked when a VisualElement created via makeItem is no longer needed and will be destroyed.
            */
            public get destroyItem(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set destroyItem(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            The view controller for this view, cast as a TreeViewController.
            */
            public get viewController(): UnityEngine.UIElements.TreeViewController;
            public constructor ()
            public constructor ($makeItem: System.Func$1<UnityEngine.UIElements.VisualElement>, $bindItem: System.Action$2<UnityEngine.UIElements.VisualElement, number>)
            public constructor ($itemHeight: number, $makeItem: System.Func$1<UnityEngine.UIElements.VisualElement>, $bindItem: System.Action$2<UnityEngine.UIElements.VisualElement, number>)
        }
        /** 
        A SplitView that contains two resizable panes. One pane is fixed-size while the other pane has flex-grow style set to 1 to take all remaining space. The border between the panes is draggable to resize both panes. Both horizontal and vertical modes are supported. Requires exactly two child elements to operate.
        */
        class TwoPaneSplitView extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The child element that is set as the fixed size pane.
            */
            public get fixedPane(): UnityEngine.UIElements.VisualElement;
            /** 
            The child element that is set as the flexable size pane.
            */
            public get flexedPane(): UnityEngine.UIElements.VisualElement;
            /** 
            0 for setting first child as the fixed pane, 1 for the second child element.
            */
            public get fixedPaneIndex(): number;
            public set fixedPaneIndex(value: number);
            /** 
            The initial width or height for the fixed pane.
            */
            public get fixedPaneInitialDimension(): number;
            public set fixedPaneInitialDimension(value: number);
            /** 
            Orientation of the split view.
            */
            public get orientation(): UnityEngine.UIElements.TwoPaneSplitViewOrientation;
            public set orientation(value: UnityEngine.UIElements.TwoPaneSplitViewOrientation);
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Collapse one of the panes of the split view. This will hide the resizer and make the other child take up all available space.
            * @param $index Index of child to collapse.
            */
            public CollapseChild ($index: number) : void
            /** 
            Un-collapse the split view. This will restore the split view to the state it was before the previous collapse.
            */
            public UnCollapse () : void
            public constructor ()
            public constructor ($fixedPaneIndex: number, $fixedPaneStartDimension: number, $orientation: UnityEngine.UIElements.TwoPaneSplitViewOrientation)
        }
        /** 
        Determines the orientation of the two resizable panes.
        */
        enum TwoPaneSplitViewOrientation
        { Horizontal = 0, Vertical = 1 }
        /** 
        Makes a text field for entering an unsigned integer. For more information, refer to.
        */
        class UnsignedIntegerField extends UnityEngine.UIElements.TextValueField$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Makes a text field for entering unsigned long integers. For more information, refer to.
        */
        class UnsignedLongField extends UnityEngine.UIElements.TextValueField$1<bigint> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<bigint>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<bigint>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            public Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            public Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            public Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            public TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            public Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            public Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            public Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            public Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Script interface for VisualElement cursor style property IStyle.cursor.
        */
        class Cursor extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Cursor>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The texture to use for the cursor style. To use a texture as a cursor, import the texture with "Read/Write enabled" in the texture importer (or using the "Cursor" defaults).
            */
            public get texture(): UnityEngine.Texture2D;
            public set texture(value: UnityEngine.Texture2D);
            /** 
            The offset from the top left of the texture to use as the target point (must be within the bounds of the cursor).
            */
            public get hotspot(): UnityEngine.Vector2;
            public set hotspot(value: UnityEngine.Vector2);
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.Cursor) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.Cursor, $style2: UnityEngine.UIElements.Cursor) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.Cursor, $style2: UnityEngine.UIElements.Cursor) : boolean
        }
        /** 
        Data stored during drag-and-drop operations, enabling information to be carried throughout the process.
        */
        class DragAndDropData extends System.Object implements UnityEngine.UIElements.IDragAndDropData
        {
            protected [__keep_incompatibility]: never;
            /** 
            The object that started the drag.
            */
            public get source(): any;
            /** 
            The state of the current drag operation.
            */
            public get visualMode(): UnityEngine.UIElements.DragVisualMode;
            /** 
            Unity Object references being dragged.
            */
            public get unityObjectReferences(): System.Collections.Generic.IEnumerable$1<UnityEngine.Object>;
            /** 
            Gets data associated with the current drag-and-drop operation.
            * @param $key The key for this entry.
            * @returns The object stored for this key. 
            */
            public GetGenericData ($key: string) : any
            /** 
            Sets data associated with the current drag-and-drop operation.
            * @param $key The key for this entry.
            * @param $data The data to store.
            */
            public SetGenericData ($key: string, $data: any) : void
        }
        interface IDragAndDropData
        {
        }
        /** 
        Position where the drop operation occurs.
        */
        enum DragAndDropPosition
        { OverItem = 0, BetweenItems = 1, OutsideItems = 2 }
        /** 
        Provides information about the event that caused the dropdown menu to display.
        */
        class DropdownMenuEventInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The modifier keys that were pressed if those keys triggered the dropdown menu to
            display of the dropdown menu. For example, Alt, Ctrl, Shift, Windows, and Command.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position expressed in the global coordinate system if the event that triggered the dropdown
            menu to display was a mouse event.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The position of the mouse if the event that triggered the dropdown menu to display was a mouse event.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            public constructor ($e: UnityEngine.UIElements.EventBase)
        }
        /** 
        Represents an item in a dropdown menu.
        */
        class DropdownMenuItem extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Provides a separator menu item.
        */
        class DropdownMenuSeparator extends UnityEngine.UIElements.DropdownMenuItem
        {
            protected [__keep_incompatibility]: never;
            /** 
            The submenu path to the separator. Path components are delimited by forward slashes ('/').
            */
            public get subMenuPath(): string;
            public constructor ($subMenuPath: string)
        }
        /** 
        Represents a menu action item.
        */
        class DropdownMenuAction extends UnityEngine.UIElements.DropdownMenuItem
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the item.
            */
            public get name(): string;
            /** 
            The tooltip of the item.
            */
            public get tooltip(): string;
            public set tooltip(value: string);
            /** 
            The icon of the item.
            */
            public get icon(): UnityEngine.Texture2D;
            /** 
            The status of the item.
            */
            public get status(): UnityEngine.UIElements.DropdownMenuAction.Status;
            /** 
            Provides information about the event that triggered the dropdown menu.
            */
            public get eventInfo(): UnityEngine.UIElements.DropdownMenuEventInfo;
            /** 
            The userData object stored by the constructor.
            */
            public get userData(): any;
            /** 
            Creates a status callback that always returns Status.Enabled.
            * @param $a Unused parameter.
            * @returns Always returns Status.Enabled 
            */
            public static AlwaysEnabled ($a: UnityEngine.UIElements.DropdownMenuAction) : UnityEngine.UIElements.DropdownMenuAction.Status
            /** 
            Creates a status callback that always returns Status.Disabled status.
            * @param $a Unused parameter.
            * @returns Always returns Status.Disabled. 
            */
            public static AlwaysDisabled ($a: UnityEngine.UIElements.DropdownMenuAction) : UnityEngine.UIElements.DropdownMenuAction.Status
            /** 
            Updates the status flag of this item by calling the item status callback.
            * @param $eventInfo Information about the event that caused the dropdown menu to display, such as the mouse position or the key pressed.
            */
            public UpdateActionStatus ($eventInfo: UnityEngine.UIElements.DropdownMenuEventInfo) : void
            /** 
            Executes the callback associated with this item.
            */
            public Execute () : void
            public constructor ($actionName: string, $actionCallback: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any)
            public constructor ($actionName: string, $actionCallback: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData: any, $icon: UnityEngine.Texture2D)
            public constructor ($contentName: string, $content: UnityEngine.UIElements.VisualElement, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any)
        }
        /** 
        Represents a dropdown menu.
        */
        class DropdownMenu extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the list of menu items.
            * @returns The list of items in the menu. 
            */
            public MenuItems () : System.Collections.Generic.List$1<UnityEngine.UIElements.DropdownMenuItem>
            public AppendAction ($actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any) : void
            public AppendAction ($actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData: any, $icon: UnityEngine.Texture2D) : void
            public AppendAction ($actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $status?: UnityEngine.UIElements.DropdownMenuAction.Status) : void
            public AppendAction ($actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $status: UnityEngine.UIElements.DropdownMenuAction.Status, $icon: UnityEngine.Texture2D) : void
            public AppendHeaderAction ($icon: UnityEngine.Texture2D, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any) : void
            public InsertAction ($atIndex: number, $actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any) : void
            public InsertAction ($atIndex: number, $actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData: any, $icon: UnityEngine.Texture2D) : void
            public InsertAction ($atIndex: number, $actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $status?: UnityEngine.UIElements.DropdownMenuAction.Status) : void
            public InsertAction ($atIndex: number, $actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $status: UnityEngine.UIElements.DropdownMenuAction.Status, $icon: UnityEngine.Texture2D) : void
            public InsertHeaderAction ($atIndex: number, $icon: UnityEngine.Texture2D, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any) : void
            /** 
            Adds a separator line in the menu.
            * @param $subMenuPath The submenu path to add the separator to. Path components are delimited by forward slashes ('/').
            */
            public AppendSeparator ($subMenuPath?: string) : void
            /** 
            Adds a separator line in the menu.
            * @param $subMenuPath The submenu path to add the separator to. Path components are delimited by forward slashes ('/').
            * @param $atIndex The index to insert the separator at.
            */
            public InsertSeparator ($subMenuPath: string, $atIndex: number) : void
            /** 
            Removes the menu item at index.
            * @param $index The index of the item to remove.
            */
            public RemoveItemAt ($index: number) : void
            /** 
            Removes the menu header item at index.
            * @param $index The index of the item to remove.
            */
            public RemoveHeaderItemAt ($index: number) : void
            /** 
            Clears all items from the menu.
            */
            public ClearItems () : void
            /** 
            Clears all header items from the menu.
            */
            public ClearHeaderItems () : void
            /** 
            Gets the status of all items by calling their status callback and removes the excess separators.
            * @param $e The source event.
            */
            public PrepareForDisplay ($e: UnityEngine.UIElements.EventBase) : void
            public constructor ()
        }
        /** 
        Gates control when the dispatcher processes events.
        */
        class EventDispatcherGate extends System.ValueType implements System.IDisposable, System.IEquatable$1<UnityEngine.UIElements.EventDispatcherGate>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Implementation of IDisposable.Dispose. Opens the gate. If all gates are open, events in the queue are processed.
            */
            public Dispose () : void
            public Equals ($other: UnityEngine.UIElements.EventDispatcherGate) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEngine.UIElements.EventDispatcherGate, $right: UnityEngine.UIElements.EventDispatcherGate) : boolean
            public static op_Inequality ($left: UnityEngine.UIElements.EventDispatcherGate, $right: UnityEngine.UIElements.EventDispatcherGate) : boolean
            public constructor ($d: UnityEngine.UIElements.EventDispatcher)
        }
        /** 
        Dispatches events to a IPanel.
        */
        class EventDispatcher extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        interface IPointerCaptureEvent
        {
        }
        class PointerCaptureEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IPointerCaptureEvent, UnityEngine.UIElements.IPointerCaptureEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get relatedTarget(): UnityEngine.UIElements.IEventHandler;
            public get pointerId(): number;
            public static GetPooled ($target: any, $relatedTarget: any, $pointerId: any) : any
            public static GetPooled () : any
        }
        interface IPointerCaptureEventInternal
        {
        }
        /** 
        Event sent when a VisualElement releases a pointer.
        */
        class PointerCaptureOutEvent extends UnityEngine.UIElements.PointerCaptureEventBase$1<UnityEngine.UIElements.PointerCaptureOutEvent> implements UnityEngine.UIElements.IPointerCaptureEvent, UnityEngine.UIElements.IPointerCaptureEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Event sent when a pointer is captured by a VisualElement.
        */
        class PointerCaptureEvent extends UnityEngine.UIElements.PointerCaptureEventBase$1<UnityEngine.UIElements.PointerCaptureEvent> implements UnityEngine.UIElements.IPointerCaptureEvent, UnityEngine.UIElements.IPointerCaptureEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        interface IMouseCaptureEvent
        {
        }
        class MouseCaptureEventBase$1<T> extends UnityEngine.UIElements.PointerCaptureEventBase$1<T> implements UnityEngine.UIElements.IPointerCaptureEvent, UnityEngine.UIElements.IPointerCaptureEventInternal, UnityEngine.UIElements.IMouseCaptureEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get relatedTarget(): UnityEngine.UIElements.IEventHandler;
            public static GetPooled ($target: any, $relatedTarget: any) : any
            public static GetPooled ($target: any, $relatedTarget: any, $pointerId: any) : any
            public static GetPooled () : any
        }
        /** 
        Event sent before a handler stops capturing the mouse.
        */
        class MouseCaptureOutEvent extends UnityEngine.UIElements.MouseCaptureEventBase$1<UnityEngine.UIElements.MouseCaptureOutEvent> implements UnityEngine.UIElements.IPointerCaptureEvent, UnityEngine.UIElements.IPointerCaptureEventInternal, UnityEngine.UIElements.IMouseCaptureEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Event sent after a handler starts capturing the mouse.
        */
        class MouseCaptureEvent extends UnityEngine.UIElements.MouseCaptureEventBase$1<UnityEngine.UIElements.MouseCaptureEvent> implements UnityEngine.UIElements.IPointerCaptureEvent, UnityEngine.UIElements.IPointerCaptureEventInternal, UnityEngine.UIElements.IMouseCaptureEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        interface ICommandEvent
        {
            /** 
            Name of the command.
            */
            commandName : string
        }
        class CommandEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.ICommandEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get commandName(): string;
            public static GetPooled ($systemEvent: any) : any
            public static GetPooled ($commandName: any) : any
            public static GetPooled () : any
        }
        /** 
        This event is sent by the Editor while it determines whether the command will be handled by an element in the panel.
        */
        class ValidateCommandEvent extends UnityEngine.UIElements.CommandEventBase$1<UnityEngine.UIElements.ValidateCommandEvent> implements UnityEngine.UIElements.ICommandEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Name of the command.
            */
            public get commandName(): string;
            public constructor ()
        }
        /** 
        This event is sent by the Editor when an element in the panel should execute a command.
        */
        class ExecuteCommandEvent extends UnityEngine.UIElements.CommandEventBase$1<UnityEngine.UIElements.ExecuteCommandEvent> implements UnityEngine.UIElements.ICommandEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Name of the command.
            */
            public get commandName(): string;
            public constructor ()
        }
        interface IDragAndDropEvent
        {
        }
        class DragAndDropEventBase$1<T> extends UnityEngine.UIElements.MouseEventBase$1<T> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        The event sent to a dragged element when the drag and drop process ends.
        */
        class DragExitedEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragExitedEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI drag exited event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.DragExitedEvent
            public constructor ()
        }
        /** 
        Use the DragEnterEvent class to manage events that occur when dragging enters an element or one of its descendants. The DragEnterEvent does not trickle down and does not bubble up.
        */
        class DragEnterEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragEnterEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Use the DragLeaveEvent class to manage events sent when dragging leaves an element or one of its descendants. The DragLeaveEvent does not trickle down and does not bubble up.
        */
        class DragLeaveEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragLeaveEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        The event sent when the element being dragged enters a possible drop target.
        */
        class DragUpdatedEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragUpdatedEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI drag updated event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.DragUpdatedEvent
            public constructor ()
        }
        /** 
        The event sent to an element when another element is dragged and dropped on the element.
        */
        class DragPerformEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragPerformEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        The propagation phases of an event.
        */
        enum PropagationPhase
        { None = 0, TrickleDown = 1, BubbleUp = 3, AtTarget = 2, DefaultAction = 4, DefaultActionAtTarget = 5 }
        interface EventCallback$2<TEventType, TCallbackArgs>
        { 
        (evt: TEventType, userArgs: TCallbackArgs) : void; 
        Invoke?: (evt: TEventType, userArgs: TCallbackArgs) => void;
        }
        /** 
        Use this enum to specify during which phases the event handler is executed.
        */
        enum TrickleDown
        { NoTrickleDown = 0, TrickleDown = 1 }
        interface IFocusEvent
        {
            /** 
            Related target. See implementation for specific meaning.
            */
            relatedTarget : UnityEngine.UIElements.Focusable
            /** 
            Direction of the focus change.
            */
            direction : UnityEngine.UIElements.FocusChangeDirection
        }
        /** 
        Base class for defining in which direction the focus moves in a focus ring.
        */
        class FocusChangeDirection extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Focus came from an unspecified direction, for example after a mouse down.
            */
            public static get unspecified(): UnityEngine.UIElements.FocusChangeDirection;
            /** 
            The null direction. This is usually used when the focus stays on the same element.
            */
            public static get none(): UnityEngine.UIElements.FocusChangeDirection;
            public static op_Implicit ($fcd: UnityEngine.UIElements.FocusChangeDirection) : number
        }
        class FocusEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IFocusEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public static GetPooled ($target: any, $relatedTarget: any, $direction: any, $focusController: any, $bIsFocusDelegated?: any) : any
            public static GetPooled () : any
        }
        /** 
        Class in charge of managing the focus inside a Panel.
        */
        class FocusController extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The currently focused VisualElement.
            */
            public get focusedElement(): UnityEngine.UIElements.Focusable;
            /** 
            Instructs the FocusController to ignore the given event.
            This will prevent the event from changing the current focused VisualElement or triggering focus events.
            * @param $evt The event to be ignored.
            */
            public IgnoreEvent ($evt: UnityEngine.UIElements.EventBase) : void
            public constructor ($focusRing: UnityEngine.UIElements.IFocusRing)
        }
        /** 
        Event sent immediately before an element loses focus. This event trickles down and bubbles up.
        */
        class FocusOutEvent extends UnityEngine.UIElements.FocusEventBase$1<UnityEngine.UIElements.FocusOutEvent> implements UnityEngine.UIElements.IFocusEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Related target. See implementation for specific meaning.
            */
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            /** 
            Direction of the focus change.
            */
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public constructor ()
        }
        /** 
        Event sent immediately after an element has lost focus. This event trickles down and does not bubbles up.
        */
        class BlurEvent extends UnityEngine.UIElements.FocusEventBase$1<UnityEngine.UIElements.BlurEvent> implements UnityEngine.UIElements.IFocusEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Related target. See implementation for specific meaning.
            */
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            /** 
            Direction of the focus change.
            */
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public constructor ()
        }
        /** 
        Event sent immediately before an element gains focus. This event trickles down and bubbles up.
        */
        class FocusInEvent extends UnityEngine.UIElements.FocusEventBase$1<UnityEngine.UIElements.FocusInEvent> implements UnityEngine.UIElements.IFocusEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Related target. See implementation for specific meaning.
            */
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            /** 
            Direction of the focus change.
            */
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public constructor ()
        }
        /** 
        Event sent immediately after an element has gained focus. This event trickles down and does not bubbles up.
        */
        class FocusEvent extends UnityEngine.UIElements.FocusEventBase$1<UnityEngine.UIElements.FocusEvent> implements UnityEngine.UIElements.IFocusEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Related target. See implementation for specific meaning.
            */
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            /** 
            Direction of the focus change.
            */
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public constructor ()
        }
        /** 
        Sends an event when text from a TextField changes.
        */
        class InputEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.InputEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The text before the change occured.
            */
            public get previousData(): string;
            /** 
            The new text.
            */
            public get newData(): string;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $previousData The text before the change occured.
            * @param $newData The new text.
            * @returns An initialized event. 
            */
            public static GetPooled ($previousData: string, $newData: string) : UnityEngine.UIElements.InputEvent
            public constructor ()
        }
        /** 
        This event is sent when a pressed key is released.
        */
        class KeyUpEvent extends UnityEngine.UIElements.KeyboardEventBase$1<UnityEngine.UIElements.KeyUpEvent> implements UnityEngine.UIElements.IKeyboardEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets the character entered.
            */
            public get character(): number;
            /** 
            The key code.
            */
            public get keyCode(): UnityEngine.KeyCode;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent after layout calculations, when the position or the dimension of an element changes.
        */
        class GeometryChangedEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.GeometryChangedEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the element's old dimensions.
            */
            public get oldRect(): UnityEngine.Rect;
            /** 
            Gets the elements's new dimensions.
            */
            public get newRect(): UnityEngine.Rect;
            /** 
            Gets an event from the event pool, and initializes it with the specified values. Use this method
            instead of instancing new events. Use Dispose() to release events back to the event pool.
            * @param $oldRect The old dimensions of the element.
            * @param $newRect The new dimensions of the element.
            * @returns An initialized event. 
            */
            public static GetPooled ($oldRect: UnityEngine.Rect, $newRect: UnityEngine.Rect) : UnityEngine.UIElements.GeometryChangedEvent
            public constructor ()
        }
        /** 
        This event is sent when a mouse button is pressed.
        */
        class MouseDownEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseDownEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI mouse event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.MouseDownEvent
            public constructor ()
        }
        /** 
        This event is sent when a mouse button is released.
        */
        class MouseUpEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseUpEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI mouse event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.MouseUpEvent
            public constructor ()
        }
        /** 
        This event is sent when the mouse moves.
        */
        class MouseMoveEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseMoveEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI mouse event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.MouseMoveEvent
            public constructor ()
        }
        /** 
        The event sent when clicking the right mouse button.
        */
        class ContextClickEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.ContextClickEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when the mouse wheel moves.
        */
        class WheelEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.WheelEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The amount of scrolling applied with the mouse wheel.
            */
            public get delta(): UnityEngine.Vector3;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent A wheel IMGUI event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.WheelEvent
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer enters an element or one of its descendent elements.
        The event trickles down but does not bubble up.
        */
        class MouseEnterEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseEnterEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer exits an element and all its descendent elements.
        The event trickles down but does not bubble up.
        */
        class MouseLeaveEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseLeaveEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer enters an element.
        The event trickles down and bubbles up.
        */
        class MouseOverEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseOverEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer exits an element.
        The event trickles down and bubbles up.
        */
        class MouseOutEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseOutEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer enters a window.
        The event bubbles up but does not trickle down.
        */
        class MouseEnterWindowEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseEnterWindowEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer exits a window.
        The event bubbles up but does not trickle down.
        */
        class MouseLeaveWindowEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseLeaveWindowEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI MouseLeaveWindow event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.MouseLeaveWindowEvent
            public constructor ()
        }
        interface INavigationEvent
        {
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            modifiers : UnityEngine.EventModifiers
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            shiftKey : boolean
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            ctrlKey : boolean
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            commandKey : boolean
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            altKey : boolean
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            actionKey : boolean
        }
        class NavigationEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.INavigationEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get modifiers(): UnityEngine.EventModifiers;
            public get shiftKey(): boolean;
            public get ctrlKey(): boolean;
            public get commandKey(): boolean;
            public get altKey(): boolean;
            public get actionKey(): boolean;
            public static GetPooled ($modifiers?: any) : any
            public static GetPooled () : any
        }
        /** 
        Event typically sent when the user presses the D-pad, moves a joystick or presses the arrow keys.
        */
        class NavigationMoveEvent extends UnityEngine.UIElements.NavigationEventBase$1<UnityEngine.UIElements.NavigationMoveEvent> implements UnityEngine.UIElements.INavigationEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The direction of the navigation.
            */
            public get direction(): UnityEngine.UIElements.NavigationMoveEvent.Direction;
            /** 
            The move vector, if applicable.
            */
            public get move(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values.
            Use this function instead of creating new events.
            Events obtained from this method should be released back to the pool using Dispose().
            * @param $moveVector The move vector.
            * @param $modifiers The modifier keys held down during the event.
            * @returns An initialized navigation event. 
            */
            public static GetPooled ($moveVector: UnityEngine.Vector2, $modifiers?: UnityEngine.EventModifiers) : UnityEngine.UIElements.NavigationMoveEvent
            public static GetPooled ($direction: UnityEngine.UIElements.NavigationMoveEvent.Direction, $modifiers?: UnityEngine.EventModifiers) : UnityEngine.UIElements.NavigationMoveEvent
            public constructor ()
        }
        /** 
        Event sent when the user presses the cancel button.
        */
        class NavigationCancelEvent extends UnityEngine.UIElements.NavigationEventBase$1<UnityEngine.UIElements.NavigationCancelEvent> implements UnityEngine.UIElements.INavigationEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the user presses the submit button.
        */
        class NavigationSubmitEvent extends UnityEngine.UIElements.NavigationEventBase$1<UnityEngine.UIElements.NavigationSubmitEvent> implements UnityEngine.UIElements.INavigationEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        interface IPanelChangedEvent
        {
        }
        class PanelChangedEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IPanelChangedEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get originPanel(): UnityEngine.UIElements.IPanel;
            public get destinationPanel(): UnityEngine.UIElements.IPanel;
            public static GetPooled ($originPanel: any, $destinationPanel: any) : any
            public static GetPooled () : any
        }
        /** 
        Event sent after an element is added to an element that is a descendent of a panel.
        */
        class AttachToPanelEvent extends UnityEngine.UIElements.PanelChangedEventBase$1<UnityEngine.UIElements.AttachToPanelEvent> implements UnityEngine.UIElements.IPanelChangedEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Event sent just before an element is detach from its parent, if the parent is the descendant of a panel.
        */
        class DetachFromPanelEvent extends UnityEngine.UIElements.PanelChangedEventBase$1<UnityEngine.UIElements.DetachFromPanelEvent> implements UnityEngine.UIElements.IPanelChangedEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        A static class that holds pointer type values.
        */
        class PointerType extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The pointer type for mouse events.
            */
            public static mouse : string
            /** 
            The pointer type for touch events.
            */
            public static touch : string
            /** 
            The pointer type for pen events.
            */
            public static pen : string
            /** 
            The pointer type for events created by unknown devices.
            */
            public static unknown : string
        }
        /** 
        A static class that holds pointer ID values.
        */
        class PointerId extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The maximum number of pointers the implementation supports.
            */
            public static maxPointers : number
            /** 
            Represents an invalid pointer ID value.
            */
            public static invalidPointerId : number
            /** 
            The mouse pointer ID.
            */
            public static mousePointerId : number
            /** 
            The base ID for touch pointers.
            */
            public static touchPointerIdBase : number
            /** 
            The number of touch pointers the implementation supports.
            */
            public static touchPointerCount : number
            /** 
            The base ID for pen pointers.
            */
            public static penPointerIdBase : number
            /** 
            The number of pen pointers the implementation supports.
            */
            public static penPointerCount : number
        }
        interface IPointerEvent
        {
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            pointerId : number
            /** 
            Gets the type of pointer that created the event.
            */
            pointerType : string
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            isPrimary : boolean
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            button : number
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            pressedButtons : number
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            position : UnityEngine.Vector3
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            localPosition : UnityEngine.Vector3
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            deltaPosition : UnityEngine.Vector3
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            deltaTime : number
            /** 
            Gets the number of times the button was pressed.
            */
            clickCount : number
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            pressure : number
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            tangentialPressure : number
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            altitudeAngle : number
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            azimuthAngle : number
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            twist : number
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            tilt : UnityEngine.Vector2
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            penStatus : UnityEngine.PenStatus
            /** 
            Gets an estimate of the radius of a touch.
            */
            radius : UnityEngine.Vector2
            /** 
            Gets the accuracy of the touch radius.
            */
            radiusVariance : UnityEngine.Vector2
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            modifiers : UnityEngine.EventModifiers
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            shiftKey : boolean
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            ctrlKey : boolean
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            commandKey : boolean
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            altKey : boolean
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            actionKey : boolean
        }
        class PointerEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get pointerId(): number;
            public get pointerType(): string;
            public get isPrimary(): boolean;
            public get button(): number;
            public get pressedButtons(): number;
            public get position(): UnityEngine.Vector3;
            public get localPosition(): UnityEngine.Vector3;
            public get deltaPosition(): UnityEngine.Vector3;
            public get deltaTime(): number;
            public get clickCount(): number;
            public get pressure(): number;
            public get tangentialPressure(): number;
            public get altitudeAngle(): number;
            public get azimuthAngle(): number;
            public get twist(): number;
            public get tilt(): UnityEngine.Vector2;
            public get penStatus(): UnityEngine.PenStatus;
            public get radius(): UnityEngine.Vector2;
            public get radiusVariance(): UnityEngine.Vector2;
            public get modifiers(): UnityEngine.EventModifiers;
            public get shiftKey(): boolean;
            public get ctrlKey(): boolean;
            public get commandKey(): boolean;
            public get altKey(): boolean;
            public get actionKey(): boolean;
            public get currentTarget(): UnityEngine.UIElements.IEventHandler;
            public static GetPooled ($systemEvent: any) : any
            public static GetPooled ($touch: any, $modifiers?: any) : any
            public static GetPooled ($pen: any, $modifiers?: any) : any
            public static GetPooled ($triggerEvent: any) : any
            public static GetPooled () : any
        }
        interface IPointerEventInternal
        {
        }
        /** 
        This event is sent when a pointer is pressed.
        */
        class PointerDownEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerDownEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer changes state.
        */
        class PointerMoveEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerMoveEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer does not change for a set amount of time, determined by the operating system.
        */
        class PointerStationaryEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerStationaryEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer's last pressed button is released.
        */
        class PointerUpEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerUpEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when pointer interaction is cancelled.
        */
        class PointerCancelEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerCancelEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when the left mouse button is clicked.
        */
        class ClickEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.ClickEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer enters a VisualElement or one of its descendants.
        The event does not trickle down and does not bubble up.
        */
        class PointerEnterEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerEnterEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer exits an element and all of its descendants.
        The event does not trickle down and does not bubble up.
        */
        class PointerLeaveEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerLeaveEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer enters an element.
        The event trickles down and bubbles up.
        */
        class PointerOverEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerOverEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer exits an element.
        The event trickles down and bubbles up.
        */
        class PointerOutEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerOutEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent after the custom style properties of a VisualElement have been resolved.
        */
        class CustomStyleResolvedEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.CustomStyleResolvedEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns the custom style properties accessor for the targeted VisualElement.
            */
            public get customStyle(): UnityEngine.UIElements.ICustomStyle;
            public constructor ()
        }
        interface ICustomStyle
        {
        }
        /** 
        Event sent to find the first VisualElement that displays a tooltip.
        */
        class TooltipEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.TooltipEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Text to display inside the tooltip box.
            */
            public get tooltip(): string;
            public set tooltip(value: string);
            /** 
            Rectangle of the hovered VisualElement in the panel coordinate system.
            */
            public get rect(): UnityEngine.Rect;
            public set rect(value: UnityEngine.Rect);
            public constructor ()
        }
        interface ITransitionEvent
        {
            /** 
            The names of the properties associated with the transition.
            */
            stylePropertyNames : UnityEngine.UIElements.StylePropertyNameCollection
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            elapsedTime : number
        }
        /** 
        Collection of StylePropertyName.
        */
        class StylePropertyNameCollection extends System.ValueType implements System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>, System.Collections.IEnumerable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns an enumerator that iterates through the StylePropertyNameCollection.
            * @returns An enumerator that can be used to iterate through the StylePropertyNameCollection. 
            */
            public GetEnumerator () : UnityEngine.UIElements.StylePropertyNameCollection.Enumerator
            /** 
            Determines whether a StylePropertyNameCollection contains the specified element.
            * @param $stylePropertyName The element to locate in the <see cref="StylePropertyNameCollection" />.
            * @returns true if the StylePropertyNameCollection contains the specified element; otherwise, false. 
            */
            public Contains ($stylePropertyName: UnityEngine.UIElements.StylePropertyName) : boolean
        }
        /** 
        Defines the name of a style property.
        */
        class StylePropertyName extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StylePropertyName>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Checks if the StylePropertyName is null or empty.
            * @param $propertyName StylePropertyName you want to check.
            * @returns True if propertyName is invalid. False otherwise. 
            */
            public static IsNullOrEmpty ($propertyName: UnityEngine.UIElements.StylePropertyName) : boolean
            public static op_Equality ($lhs: UnityEngine.UIElements.StylePropertyName, $rhs: UnityEngine.UIElements.StylePropertyName) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StylePropertyName, $rhs: UnityEngine.UIElements.StylePropertyName) : boolean
            public static op_Implicit ($name: string) : UnityEngine.UIElements.StylePropertyName
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.UIElements.StylePropertyName) : boolean
            public constructor ($name: string)
        }
        class TransitionEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            public get elapsedTime(): number;
            public static GetPooled ($stylePropertyName: any, $elapsedTime: any) : any
            public AffectsProperty ($stylePropertyName: UnityEngine.UIElements.StylePropertyName) : boolean
            public static GetPooled () : any
        }
        /** 
        Event sent when a transition is created (i.e. added to the set of running transitions).
        */
        class TransitionRunEvent extends UnityEngine.UIElements.TransitionEventBase$1<UnityEngine.UIElements.TransitionRunEvent> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The names of the properties associated with the transition.
            */
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            public get elapsedTime(): number;
            public constructor ()
        }
        /** 
        Event sent when a transition's delay phase ends.
        */
        class TransitionStartEvent extends UnityEngine.UIElements.TransitionEventBase$1<UnityEngine.UIElements.TransitionStartEvent> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The names of the properties associated with the transition.
            */
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            public get elapsedTime(): number;
            public constructor ()
        }
        /** 
        Event sent at the completion of the transition. In the case where a transition is removed before completion then the event will not fire.
        */
        class TransitionEndEvent extends UnityEngine.UIElements.TransitionEventBase$1<UnityEngine.UIElements.TransitionEndEvent> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The names of the properties associated with the transition.
            */
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            public get elapsedTime(): number;
            public constructor ()
        }
        /** 
        Event sent when a transition is canceled.
        */
        class TransitionCancelEvent extends UnityEngine.UIElements.TransitionEventBase$1<UnityEngine.UIElements.TransitionCancelEvent> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The names of the properties associated with the transition.
            */
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            public get elapsedTime(): number;
            public constructor ()
        }
        /** 
        Class used to send a IMGUI event that has no equivalent UIElements event.
        */
        class IMGUIEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.IMGUIEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent The IMGUI event used to initialize the event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.IMGUIEvent
            public constructor ()
        }
        /** 
        Provides the base class for field mouse draggers.
        */
        class BaseFieldMouseDragger extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Sets the drag zone for the driven field.
            * @param $dragElement The target of the drag operation.
            */
            public SetDragZone ($dragElement: UnityEngine.UIElements.VisualElement) : void
            /** 
            Sets the drag zone for the driven field.
            * @param $dragElement The target of the drag operation.
            * @param $hotZone The rectangle that contains the drag zone.
            */
            public SetDragZone ($dragElement: UnityEngine.UIElements.VisualElement, $hotZone: UnityEngine.Rect) : void
        }
        class FieldMouseDragger$1<T> extends UnityEngine.UIElements.BaseFieldMouseDragger
        {
            protected [__keep_incompatibility]: never;
            public get dragging(): boolean;
            public set dragging(value: boolean);
            public get startValue(): T;
            public set startValue(value: T);
            public constructor ($drivenField: UnityEngine.UIElements.IValueField$1<T>)
        }
        /** 
        The filter parameter declaration for a FilterFunctionDefinition.
        */
        class FilterParameterDeclaration extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The parameter name, used for display in the UI Builder.
            */
            public get name(): string;
            public set name(value: string);
            /** 
            Default value when interpolating between two filters with missing declarations.
            */
            public get interpolationDefaultValue(): UnityEngine.UIElements.FilterParameter;
            public set interpolationDefaultValue(value: UnityEngine.UIElements.FilterParameter);
        }
        /** 
        Represents a filter parameter for a FilterFunctionDefinition.
        */
        class FilterParameter extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.FilterParameter>
        {
            protected [__keep_incompatibility]: never;
            /** The type of the filter parameter.
            */
            public get type(): UnityEngine.UIElements.FilterParameterType;
            public set type(value: UnityEngine.UIElements.FilterParameterType);
            /** The float value of the filter parameter.
            */
            public get floatValue(): number;
            public set floatValue(value: number);
            /** The color value of the filter parameter.
            */
            public get colorValue(): UnityEngine.Color;
            public set colorValue(value: UnityEngine.Color);
            public static op_Equality ($a: UnityEngine.UIElements.FilterParameter, $b: UnityEngine.UIElements.FilterParameter) : boolean
            public static op_Inequality ($a: UnityEngine.UIElements.FilterParameter, $b: UnityEngine.UIElements.FilterParameter) : boolean
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.FilterParameter) : boolean
            public constructor ($value: number)
            public constructor ($value: UnityEngine.Color)
        }
        /** 
        Represents a filter function definition that holds the parameters and effects of a filter.
        */
        class FilterFunctionDefinition extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** The name of the filter function used for display.
            */
            public get filterName(): string;
            public set filterName(value: string);
            /** The description of the function parameters.
            */
            public get parameters(): System.Array$1<UnityEngine.UIElements.FilterParameterDeclaration>;
            public set parameters(value: System.Array$1<UnityEngine.UIElements.FilterParameterDeclaration>);
            /** The post-processing effects applied by the filter function.
            */
            public get passes(): System.Array$1<UnityEngine.UIElements.PostProcessingPass>;
            public set passes(value: System.Array$1<UnityEngine.UIElements.PostProcessingPass>);
            public constructor ()
        }
        /** 
        Represents a post-processing effect that can be applied to a visual element.
        This is used as part of a FilterFunctionDefinition.
        */
        class PostProcessingPass extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The material to use for the effect.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            /** The pass index to use in the material.
            */
            public get passIndex(): number;
            public set passIndex(value: number);
            /** The parameter bindings for the effect.
            */
            public get parameterBindings(): System.Array$1<UnityEngine.UIElements.ParameterBinding>;
            public set parameterBindings(value: System.Array$1<UnityEngine.UIElements.ParameterBinding>);
            /** The extra margins, in points, required for the effect to write to destination texture.
            */
            public get writeMargins(): UnityEngine.UIElements.PostProcessingMargins;
            public set writeMargins(value: UnityEngine.UIElements.PostProcessingMargins);
            /** The optional callback to prepare the material property block for the effect.
            */
            public get prepareMaterialPropertyBlockCallback(): UnityEngine.UIElements.PostProcessingPass.PrepareMaterialPropertyBlockDelegate;
            public set prepareMaterialPropertyBlockCallback(value: UnityEngine.UIElements.PostProcessingPass.PrepareMaterialPropertyBlockDelegate);
            /** The optional callback to compute the required read margins for the effect.
            */
            public get computeRequiredReadMarginsCallback(): UnityEngine.UIElements.PostProcessingPass.ComputeRequiredMarginsDelegate;
            public set computeRequiredReadMarginsCallback(value: UnityEngine.UIElements.PostProcessingPass.ComputeRequiredMarginsDelegate);
            /** The optional callback to compute the required write margins for the effect.
            */
            public get computeRequiredWriteMarginsCallback(): UnityEngine.UIElements.PostProcessingPass.ComputeRequiredMarginsDelegate;
            public set computeRequiredWriteMarginsCallback(value: UnityEngine.UIElements.PostProcessingPass.ComputeRequiredMarginsDelegate);
        }
        /** 
        Represents a binding of a parameter index to a post-processing material property.
        */
        class ParameterBinding extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The index of the parameter in the filter function.
            */
            public get index(): number;
            public set index(value: number);
            /** The name of the material property.
            */
            public get name(): string;
            public set name(value: string);
        }
        /** 
        The post-processing margins required by a FilterFunction.
        */
        class PostProcessingMargins extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The left margin value.
            */
            public get left(): number;
            public set left(value: number);
            /** The top margin value.
            */
            public get top(): number;
            public set top(value: number);
            /** The right margin value.
            */
            public get right(): number;
            public set right(value: number);
            /** The bottom margin value.
            */
            public get bottom(): number;
            public set bottom(value: number);
        }
        /** 
        Represents a filter function that holds the definition and parameters of a filter.
        */
        class FilterFunction extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.FilterFunction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The type of the filter function.
            */
            public get type(): UnityEngine.UIElements.FilterFunctionType;
            public set type(value: UnityEngine.UIElements.FilterFunctionType);
            /** The number of parameters in the filter function.
            */
            public get parameterCount(): number;
            /** 
            The custom filter function definition, when the filter function type is FilterFunctionType.Custom.
            */
            public get customDefinition(): UnityEngine.UIElements.FilterFunctionDefinition;
            public set customDefinition(value: UnityEngine.UIElements.FilterFunctionDefinition);
            /** 
            Adds a parameter to the filter function.
            * @param $p The parameter to add.
            */
            public AddParameter ($p: UnityEngine.UIElements.FilterParameter) : void
            /** 
            Sets a parameter to the filter function at the provided index.
            * @param $index The parameter index.
            * @param $p The parameter to set.
            */
            public SetParameter ($index: number, $p: UnityEngine.UIElements.FilterParameter) : void
            /** 
            Gets the parameter at the specified index.
            * @param $index The parameter index.
            * @returns The filter parameter at the provided index. 
            */
            public GetParameter ($index: number) : UnityEngine.UIElements.FilterParameter
            /** 
            Clears all parameters from the filter function.
            */
            public ClearParameters () : void
            public static op_Equality ($lhs: UnityEngine.UIElements.FilterFunction, $rhs: UnityEngine.UIElements.FilterFunction) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.FilterFunction, $rhs: UnityEngine.UIElements.FilterFunction) : boolean
            public Equals ($other: UnityEngine.UIElements.FilterFunction) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($type: UnityEngine.UIElements.FilterFunctionType)
            public constructor ($filterDef: UnityEngine.UIElements.FilterFunctionDefinition)
        }
        interface IFocusRing
        {
            /** 
            Get the direction of the focus change for the given event. For example, when the Tab key is pressed, focus should be given to the element to the right.
            */
            GetFocusChangeDirection ($currentFocusable: UnityEngine.UIElements.Focusable, $e: UnityEngine.UIElements.EventBase) : UnityEngine.UIElements.FocusChangeDirection
            /** 
            Get the next element in the given direction.
            */
            GetNextFocusable ($currentFocusable: UnityEngine.UIElements.Focusable, $direction: UnityEngine.UIElements.FocusChangeDirection) : UnityEngine.UIElements.Focusable
        }
        /** 
        Contains the settings used by the dynamic atlas system.
        */
        class DynamicAtlasSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Specifies the minimum size (width/height) of the atlas texture, in pixels. This value must be a power of two,
            and must be greater than 0 and less than or equal to maxAtlasSize.
            */
            public get minAtlasSize(): number;
            public set minAtlasSize(value: number);
            /** 
            Specifies the maximum size (width/height) of the atlas texture, in pixels. This value must be a power of two,
            and must be greater than or equal to minAtlasSize.
            */
            public get maxAtlasSize(): number;
            public set maxAtlasSize(value: number);
            /** 
            Specifies the maximum size (width/height) of a texture that can be added to the atlas. When activeFilters
            contains DynamicAtlasFilters.Size, textures larger than this size are excluded from the atlas. Otherwise, this
            value is not used.
            */
            public get maxSubTextureSize(): number;
            public set maxSubTextureSize(value: number);
            /** 
            Defines the filters that the dynamic atlas system uses to exclude textures from the texture atlas.
            */
            public get activeFilters(): UnityEngine.UIElements.DynamicAtlasFilters;
            public set activeFilters(value: UnityEngine.UIElements.DynamicAtlasFilters);
            /** 
            Default filters for a dynamic atlas.
            */
            public static get defaultFilters(): UnityEngine.UIElements.DynamicAtlasFilters;
            /** 
            When a delegate is assigned, the dynamic atlas system calls it to determine whether or not a texture can be added to the atlas.
            */
            public get customFilter(): UnityEngine.UIElements.DynamicAtlasCustomFilter;
            public set customFilter(value: UnityEngine.UIElements.DynamicAtlasCustomFilter);
            /** 
            Specifies default values used to initialize the structure.
            */
            public static get defaults(): UnityEngine.UIElements.DynamicAtlasSettings;
            public constructor ()
        }
        /** 
        Options that specify how elements in the panel scale when the screen size changes. See PanelSettings.scaleMode.
        */
        enum PanelScaleMode
        { ConstantPixelSize = 0, ConstantPhysicalSize = 1, ScaleWithScreenSize = 2 }
        /** 
        Options that specify how to scale the panel area when the aspect ratio of the current screen resolution
        does not match the reference resolution. See PanelSettings.screenMatchMode.
        */
        enum PanelScreenMatchMode
        { MatchWidthOrHeight = 0, Shrink = 1, Expand = 2 }
        /** 
        Defines a Panel Settings asset that instantiates a panel at runtime. The panel makes it possible for Unity to display
        UXML-file based UI in the Game view.
        */
        class PanelSettings extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** 
            Specifies a PanelTextSettings that will be used by every UI Document attached to the panel.
            */
            public textSettings : UnityEngine.UIElements.PanelTextSettings
            /** 
            Specifies a style sheet that Unity applies to every UI Document attached to the panel.
            */
            public get themeStyleSheet(): UnityEngine.UIElements.ThemeStyleSheet;
            public set themeStyleSheet(value: UnityEngine.UIElements.ThemeStyleSheet);
            /** 
            Specifies a Render Texture to render the panel's UI on.
            */
            public get targetTexture(): UnityEngine.RenderTexture;
            public set targetTexture(value: UnityEngine.RenderTexture);
            /** 
            Determines how elements in the panel scale when the screen size changes.
            */
            public get scaleMode(): UnityEngine.UIElements.PanelScaleMode;
            public set scaleMode(value: UnityEngine.UIElements.PanelScaleMode);
            /** 
            Sprites have a Pixels Per Unit value that controls the pixel density of the sprite.
            For sprites that have the same Pixels Per Unit value as the Reference Pixels Per Unit value in the
            PanelSettings asset, the pixel density will be one to one.
            */
            public get referenceSpritePixelsPerUnit(): number;
            public set referenceSpritePixelsPerUnit(value: number);
            /** 
            A uniform scaling factor that Unity applies to elements in the panel before
            the panel transform.
            */
            public get scale(): number;
            public set scale(value: number);
            /** 
            The DPI that the UI is designed for.
            */
            public get referenceDpi(): number;
            public set referenceDpi(value: number);
            /** 
            The DPI value that Unity uses when it cannot determine the screen DPI.
            */
            public get fallbackDpi(): number;
            public set fallbackDpi(value: number);
            /** 
            The resolution the UI is designed for.
            */
            public get referenceResolution(): UnityEngine.Vector2Int;
            public set referenceResolution(value: UnityEngine.Vector2Int);
            /** 
            Specifies how to scale the panel area when the aspect ratio of the current resolution
            does not match the reference resolution.
            */
            public get screenMatchMode(): UnityEngine.UIElements.PanelScreenMatchMode;
            public set screenMatchMode(value: UnityEngine.UIElements.PanelScreenMatchMode);
            /** 
            Determines whether Unity uses width, height, or a mix of the two as a reference when it scales the panel area.
            */
            public get match(): number;
            public set match(value: number);
            /** 
            When the Scene uses more than one panel, this value determines where this panel appears in the sorting
            order relative to other panels.
            */
            public get sortingOrder(): number;
            public set sortingOrder(value: number);
            /** 
            Set the display intended for the panel.
            */
            public get targetDisplay(): number;
            public set targetDisplay(value: number);
            /** 
            Sets the log level for bindings in panels using this PanelSettings asset.
            */
            public get bindingLogLevel(): UnityEngine.UIElements.BindingLogLevel;
            public set bindingLogLevel(value: UnityEngine.UIElements.BindingLogLevel);
            /** 
            Determines whether the depth/stencil buffer is cleared before the panel is rendered.
            */
            public get clearDepthStencil(): boolean;
            public set clearDepthStencil(value: boolean);
            /** 
            The depth used to clear the depth/stencil buffer.
            */
            public get depthClearValue(): number;
            /** 
            Determines whether the color buffer is cleared before the panel is rendered.
            */
            public get clearColor(): boolean;
            public set clearColor(value: boolean);
            /** 
            The color used to clear the color buffer.
            */
            public get colorClearValue(): UnityEngine.Color;
            public set colorClearValue(value: UnityEngine.Color);
            /** 
            The expected number of vertices that will be used by this panel.
            */
            public get vertexBudget(): number;
            public set vertexBudget(value: number);
            /** 
            Settings of the dynamic atlas.
            */
            public get dynamicAtlasSettings(): UnityEngine.UIElements.DynamicAtlasSettings;
            public set dynamicAtlasSettings(value: UnityEngine.UIElements.DynamicAtlasSettings);
            /** 
            Sets a custom IPanelChangeReceiver in the panelChangeReceiver setter to receive every change event.
            This method is available only in development builds and the editor, as it is a debug feature to go along the profiling of an application.
            */
            public SetPanelChangeReceiver ($value: UnityEngine.UIElements.IDebugPanelChangeReceiver) : void
            public SetScreenToPanelSpaceFunction ($screentoPanelSpaceFunction: System.Func$2<UnityEngine.Vector2, UnityEngine.Vector2>) : void
        }
        /** 
        Represents text rendering settings for a specific UI panel.
        PanelSettings.textSettings
        */
        class PanelTextSettings extends UnityEngine.TextCore.Text.TextSettings
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Style sheets are applied to visual elements in order to control the layout and visual appearance of the user interface.
        */
        class StyleSheet extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** 
            Whether there were errors encountered while importing the StyleSheet
            */
            public get importedWithErrors(): boolean;
            /** 
            Whether there were warnings encountered while importing the StyleSheet
            */
            public get importedWithWarnings(): boolean;
            /** 
            A hash value computed from the stylesheet content.
            */
            public get contentHash(): number;
            public set contentHash(value: number);
            public constructor ()
        }
        /** 
        Represents a style sheet that's assembled from other style sheets.
        */
        class ThemeStyleSheet extends UnityEngine.UIElements.StyleSheet
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        interface IDebugPanelChangeReceiver
        {
            /** 
            Receives notifications for every change that occurs on the panel's visual elements.
            This method is exclusively available in development builds and the Editor, as it serves as a debug feature that complements the profiling of an application.
            * @param $element  The element that changed.
            * @param $changeType A string that contains the comma-separated value of what has changed.
            */
            OnVisualElementChange ($element: UnityEngine.UIElements.VisualElement, $changeType: UnityEngine.UIElements.VersionChangeType) : void
        }
        /** 
        A collection of static methods that provide simple World, Screen, and Panel coordinate transformations.
        */
        class RuntimePanelUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Transforms a screen absolute position to its equivalent local coordinate on given panel.
            * @param $panel The local coordinates reference panel.
            * @param $screenPosition The screen position to transform.
            * @returns A position in panel coordinates that corresponds to the provided screen position. 
            */
            public static ScreenToPanel ($panel: UnityEngine.UIElements.IPanel, $screenPosition: UnityEngine.Vector2) : UnityEngine.Vector2
            /** 
            Transforms a world absolute position to its equivalent local coordinate on given panel,
            using provided camera for internal WorldToScreen transformation.
            * @param $panel The local coordinates reference panel.
            * @param $worldPosition The world position to transform.
            * @param $camera The Camera used for internal WorldToScreen transformation.
            * @returns A position in panel coordinates that corresponds to the provided world position. 
            */
            public static CameraTransformWorldToPanel ($panel: UnityEngine.UIElements.IPanel, $worldPosition: UnityEngine.Vector3, $camera: UnityEngine.Camera) : UnityEngine.Vector2
            /** 
            Transforms a world position and size (in world units) to their equivalent local position and size
            on given panel, using provided camera for internal WorldToScreen transformation.
            * @param $panel The local coordinates reference panel.
            * @param $worldPosition The world position to transform.
            * @param $worldSize The world size to transform. The object in the panel will appear to have
            that size when compared to other 3D objects at neighboring positions.
            * @param $camera The Camera used for internal WorldToScreen transformation.
            * @returns A (position, size) Rect in panel coordinates that corresponds to the provided world position
            and size. 
            */
            public static CameraTransformWorldToPanelRect ($panel: UnityEngine.UIElements.IPanel, $worldPosition: UnityEngine.Vector3, $worldSize: UnityEngine.Vector2, $camera: UnityEngine.Camera) : UnityEngine.Rect
            /** 
            Resets the dynamic atlas of the panel. Textured elements will be repainted.
            */
            public static ResetDynamicAtlas ($panel: UnityEngine.UIElements.IPanel) : void
            /** 
            Notifies the dynamic atlas of the panel that the content of the provided texture has changed. If the dynamic
            atlas contains the texture, it will update it.
            * @param $panel The current panel
            * @param $texture The texture whose content has changed.
            */
            public static SetTextureDirty ($panel: UnityEngine.UIElements.IPanel, $texture: UnityEngine.Texture2D) : void
        }
        /** 
        Defines a Component that connects VisualElements to GameObjects. This makes it
        possible to render UI defined in UXML documents in the Game view.
        */
        class UIDocument extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            /** 
            Specifies the PanelSettings instance to connect this UIDocument component to.
            */
            public get panelSettings(): UnityEngine.UIElements.PanelSettings;
            public set panelSettings(value: UnityEngine.UIElements.PanelSettings);
            /** 
            If the GameObject that this UIDocument component is attached to has a parent GameObject, and
            that parent GameObject also has a UIDocument component attached to it, this value is set to
            the parent GameObject's UIDocument component automatically.
            */
            public get parentUI(): UnityEngine.UIElements.UIDocument;
            /** 
            The VisualTreeAsset loaded into the root visual element automatically.
            */
            public get visualTreeAsset(): UnityEngine.UIElements.VisualTreeAsset;
            public set visualTreeAsset(value: UnityEngine.UIElements.VisualTreeAsset);
            /** 
            The root visual element where the UI hierarchy starts.
            */
            public get rootVisualElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The order in which this UIDocument will show up on the hierarchy in relation to other UIDocuments either
            attached to the same PanelSettings, or with the same UIDocument parent.
            */
            public get sortingOrder(): number;
            public set sortingOrder(value: number);
        }
        /** 
        Element that draws IMGUI content. For more information, refer to.
        */
        class IMGUIContainer extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, System.IDisposable, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            The function that's called to render and handle IMGUI events.
            */
            public get onGUIHandler(): System.Action;
            public set onGUIHandler(value: System.Action);
            /** 
            When this property is set to true, onGUIHandler is not called when the Element is outside the viewport.
            */
            public get cullingEnabled(): boolean;
            public set cullingEnabled(value: boolean);
            /** 
            ContextType of this IMGUIContainer. Currently only supports ContextType.Editor.
            */
            public get contextType(): UnityEngine.UIElements.ContextType;
            public set contextType(value: UnityEngine.UIElements.ContextType);
            public get canGrabFocus(): boolean;
            /** 
            Marks layout as dirty to trigger a redraw.
            */
            public MarkDirtyLayout () : void
            /** 
            Releases the native memory that this IMGUIContainer instance uses.
            */
            public Dispose () : void
            public constructor ()
            public constructor ($onGUIHandler: System.Action)
        }
        /** 
        Describes in which context a VisualElement hierarchy is being ran.
        */
        enum ContextType
        { Player = 0, Editor = 1 }
        /** 
        VisualElement that can implement custom immediate mode rendering.
        */
        class ImmediateModeElement extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            When this property is set to true, the Element does not repaint itself when it is outside the viewport.
            */
            public get cullingEnabled(): boolean;
            public set cullingEnabled(value: boolean);
        }
        /** 
        Represents an operation that the user is trying to accomplish through a specific input mechanism.
        */
        enum KeyboardNavigationOperation
        { None = 0, SelectAll = 1, Cancel = 2, Submit = 3, Previous = 4, Next = 5, MoveRight = 6, MoveLeft = 7, PageUp = 8, PageDown = 9, Begin = 10, End = 11 }
        /** 
        Provides a default implementation for translating input device specific events to higher level navigation operations as commonly possible with a keyboard.
        */
        class KeyboardNavigationManipulator extends UnityEngine.UIElements.Manipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            public constructor ($action: System.Action$2<UnityEngine.UIElements.KeyboardNavigationOperation, UnityEngine.UIElements.EventBase>)
        }
        /** 
        Used by manipulators to match events against their requirements.
        */
        class ManipulatorActivationFilter extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.ManipulatorActivationFilter>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The button that activates the manipulation.
            */
            public get button(): UnityEngine.UIElements.MouseButton;
            public set button(value: UnityEngine.UIElements.MouseButton);
            /** 
            Any modifier keys (ie. ctrl, alt, ...) that are needed to activate the manipulation.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            public set modifiers(value: UnityEngine.EventModifiers);
            /** 
            Number of mouse clicks required to activate the manipulator.
            */
            public get clickCount(): number;
            public set clickCount(value: number);
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.ManipulatorActivationFilter) : boolean
            /** 
            Checks whether the current mouse event satisfies the activation requirements.
            * @param $e The mouse event.
            * @returns True if the event matches the requirements. False otherwise. 
            */
            public Matches ($e: UnityEngine.UIElements.IMouseEvent) : boolean
            /** 
            Checks whether the current mouse event satisfies the activation requirements.
            * @param $e The mouse event.
            * @returns True if the event matches the requirements. False otherwise. 
            */
            public Matches ($e: UnityEngine.UIElements.IPointerEvent) : boolean
            public static op_Equality ($filter1: UnityEngine.UIElements.ManipulatorActivationFilter, $filter2: UnityEngine.UIElements.ManipulatorActivationFilter) : boolean
            public static op_Inequality ($filter1: UnityEngine.UIElements.ManipulatorActivationFilter, $filter2: UnityEngine.UIElements.ManipulatorActivationFilter) : boolean
        }
        /** 
        Describes a MouseButton.
        */
        enum MouseButton
        { LeftMouse = 0, RightMouse = 1, MiddleMouse = 2 }
        /** 
        Class that manages capturing mouse events.
        */
        class MouseCaptureController extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Checks if there is a handler capturing the mouse.
            * @returns True if a handler is capturing the mouse, false otherwise. 
            */
            public static IsMouseCaptured () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public static HasMouseCapture ($handler: UnityEngine.UIElements.IEventHandler) : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public static CaptureMouse ($handler: UnityEngine.UIElements.IEventHandler) : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public static ReleaseMouse ($handler: UnityEngine.UIElements.IEventHandler) : void
            /** 
            Stops an event handler from capturing the mouse.
            */
            public static ReleaseMouse () : void
        }
        /** 
        The fill rule to use when filling shapes with Painter2D.Fill.
        */
        enum FillRule
        { NonZero = 0, OddEven = 1 }
        /** 
        Join types connecting two sub-paths (see Painter2D.lineJoin).
        */
        enum LineJoin
        { Miter = 0, Bevel = 1, Round = 2 }
        /** 
        Cap types for the beginning and end of paths (see Painter2D.lineCap).
        */
        enum LineCap
        { Butt = 0, Round = 1 }
        /** 
        Direction to use when defining an arc (see Painter2D.Arc).
        */
        enum ArcDirection
        { Clockwise = 0, CounterClockwise = 1 }
        /** 
        A renderer Component that should be added next to a UIDocument Component to allow
        world-space rendering. This Component is added automatically by the UIDocument when
        the PanelSettings asset is configured in world-space.
        */
        class UIRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Value used to signify some changes in the VisualElement
        */
        enum VersionChangeType
        { Bindings = 1, ViewData = 2, Hierarchy = 4, Layout = 8, StyleSheet = 16, Styles = 32, Overflow = 64, BorderRadius = 128, BorderWidth = 256, Transform = 512, Size = 1024, Repaint = 2048, Opacity = 4096, Color = 8192, RenderHints = 16384, TransitionProperty = 32768, EventCallbackCategories = 65536, DisableRendering = 131072, BindingRegistration = 262144, DataSource = 524288 }
        /** 
        Offers a set of options that describe the intended usage patterns of a VisualElement.
        These options serve as guidance for optimizations. You can set multiple
        usage hints on an element. For example, if both position and color change, you can set both
        DynamicTransform and DynamicColor.
        Note: Set the usage hints at edit time or before you add the VisualElement to a panel.
        In the case of transition, when it starts, the system might automatically add missing relevant
        usage hints to avoid regenerating geometry in every frame. However, this causes a one-frame performance penalty
        because the rendering data for the VisualElement and its descendants is regenerated.
        */
        enum UsageHints
        { None = 0, DynamicTransform = 1, GroupTransform = 2, MaskContainer = 4, DynamicColor = 8 }
        /** 
        Describes a PenButton. Based on W3 conventions: https:www.w3.orgTRpointerevents2/#the-buttons-property.
        */
        enum PenButton
        { PenContact = 0, PenBarrel = 1, PenEraser = 5 }
        /** 
        A static class to capture and release pointers.
        */
        class PointerCaptureHelper extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public static HasPointerCapture ($handler: UnityEngine.UIElements.IEventHandler, $pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public static CapturePointer ($handler: UnityEngine.UIElements.IEventHandler, $pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public static ReleasePointer ($handler: UnityEngine.UIElements.IEventHandler, $pointerId: number) : void
            /** 
            Returns the element that is capturing the pointer.
            * @param $panel The panel that holds the element.
            * @param $pointerId The captured pointer.
            * @returns The element that is capturing the pointer. 
            */
            public static GetCapturingElement ($panel: UnityEngine.UIElements.IPanel, $pointerId: number) : UnityEngine.UIElements.IEventHandler
            /** 
            Releases the pointer.
            * @param $panel The panel that holds the element that captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public static ReleasePointer ($panel: UnityEngine.UIElements.IPanel, $pointerId: number) : void
        }
        /** 
        Represents a vertex of geometry for drawing content of VisualElement.
        */
        class Vertex extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            A special value representing the near clipping plane. Always use this value as the vertex position's z component when building 2D (flat) UI geometry.
            */
            public static nearZ : number
            /** 
            Describes the vertex's position.
            */
            public position : UnityEngine.Vector3
            /** 
            A color value for the vertex.
            */
            public tint : UnityEngine.Color32
            /** 
            The UV coordinate of the vertex.
            */
            public uv : UnityEngine.Vector2
        }
        /** 
        Represents the vertex and index data allocated for drawing the content of a VisualElement.
        */
        class MeshWriteData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The number of vertices successfully allocated for VisualElement content drawing.
            */
            public get vertexCount(): number;
            /** 
            The number of indices successfully allocated for VisualElement content drawing.
            */
            public get indexCount(): number;
            /** 
            Assigns the value of the next vertex of the allocated vertices list.
            * @param $vertex The value of the next vertex.
            */
            public SetNextVertex ($vertex: UnityEngine.UIElements.Vertex) : void
            public SetNextIndex ($index: number) : void
            /** 
            Fills the values of the allocated vertices with values copied directly from an array.
            When this method is called, it is not possible to use SetNextVertex to fill the allocated vertices array.
            * @param $vertices The array of vertices to copy from. The length of the array must match the allocated vertex count.
            */
            public SetAllVertices ($vertices: System.Array$1<UnityEngine.UIElements.Vertex>) : void
            public SetAllVertices ($vertices: Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>) : void
            public SetAllIndices ($indices: System.Array$1<number>) : void
            public SetAllIndices ($indices: Unity.Collections.NativeSlice$1<number>) : void
        }
        /** 
        Provides methods for generating a VisualElement's visual content during the generateVisualContent callback.
        */
        class MeshGenerationContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The element for which VisualElement.generateVisualContent was invoked.
            */
            public get visualElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The vector painter object used to issue drawing commands.
            */
            public get painter2D(): UnityEngine.UIElements.Painter2D;
            public AllocateTempMesh ($vertexCount: number, $indexCount: number, $vertices: $Ref<Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>>, $indices: $Ref<Unity.Collections.NativeSlice$1<number>>) : void
            /** 
            Allocates and draws the specified number of vertices and indices required to express geometry for drawing the content of a VisualElement.
            * @param $vertexCount The number of vertices to allocate. The maximum is 65535 (or UInt16.MaxValue).
            * @param $indexCount The number of triangle list indices to allocate. Each 3 indices represent one triangle, so this value should be multiples of 3.
            * @param $texture An optional texture to be applied on the triangles allocated. Pass null to rely on vertex colors only.
            * @returns An object that gives access to the newely allocated data. If the returned vertex count is 0, then allocation failed (the system ran out of memory). 
            */
            public Allocate ($vertexCount: number, $indexCount: number, $texture?: UnityEngine.Texture) : UnityEngine.UIElements.MeshWriteData
            public DrawMesh ($vertices: Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>, $indices: Unity.Collections.NativeSlice$1<number>, $texture?: UnityEngine.Texture) : void
            /** 
            Draws a VectorImage asset.
            * @param $vectorImage The vector image to draw.
            * @param $offset The position offset where to draw the vector image.
            * @param $rotationAngle The rotation of the vector image.
            * @param $scale The scale of the vector image
            */
            public DrawVectorImage ($vectorImage: UnityEngine.UIElements.VectorImage, $offset: UnityEngine.Vector2, $rotationAngle: UnityEngine.UIElements.Angle, $scale: UnityEngine.Vector2) : void
            /** 
            Draw a string of text.
            * @param $text The text to display.
            * @param $pos The start position where the text will be displayed.
            * @param $fontSize The font size to use.
            * @param $color The text color.
            * @param $font The font asset to use. If the value is null, the font asset of the VisualElement style is used instead. For more information, refer to <see cref="IStyle.unityFontDefinition" />.
            */
            public DrawText ($text: string, $pos: UnityEngine.Vector2, $fontSize: number, $color: UnityEngine.Color, $font?: UnityEngine.TextCore.Text.FontAsset) : void
            /** 
            Returns an allocator that can be used to safely allocate temporary meshes from the job system. The meshes
            have the same scope as those allocated by AllocateTempMesh.
            * @param $allocator The allocator.
            */
            public GetTempMeshAllocator ($allocator: $Ref<UnityEngine.UIElements.TempMeshAllocator>) : void
            /** 
            Inserts a node into the rendering tree that can be populated from the job system.
            * @param $node The inserted mesh generation node.
            */
            public InsertMeshGenerationNode ($node: $Ref<UnityEngine.UIElements.MeshGenerationNode>) : void
            /** 
            Instructs the renderer to wait for the completion of the provided JobHandle before beginning processing the meshes.
            * @param $jobHandle JobHandle to wait for.
            */
            public AddMeshGenerationJob ($jobHandle: Unity.Jobs.JobHandle) : void
        }
        /** 
        Object to draw 2D vector graphics.
        */
        class Painter2D extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The line width of draw paths when using Stroke.
            */
            public get lineWidth(): number;
            public set lineWidth(value: number);
            /** 
            The color of draw paths when using Stroke.
            */
            public get strokeColor(): UnityEngine.Color;
            public set strokeColor(value: UnityEngine.Color);
            /** 
            The stroke gradient to use when using Stroke.
            */
            public get strokeGradient(): UnityEngine.Gradient;
            public set strokeGradient(value: UnityEngine.Gradient);
            /** 
            The color used for fill paths when using Fill.
            */
            public get fillColor(): UnityEngine.Color;
            public set fillColor(value: UnityEngine.Color);
            /** 
            The join to use when drawing paths using Stroke.
            */
            public get lineJoin(): UnityEngine.UIElements.LineJoin;
            public set lineJoin(value: UnityEngine.UIElements.LineJoin);
            /** 
            The cap to use when drawing paths using Stroke.
            */
            public get lineCap(): UnityEngine.UIElements.LineCap;
            public set lineCap(value: UnityEngine.UIElements.LineCap);
            /** 
            When using LineJoin.Miter joins, this defines the limit on the ratio of the miter length to the
            stroke width before converting the miter to a bevel.
            */
            public get miterLimit(): number;
            public set miterLimit(value: number);
            /** 
            When created as a detached painter, clears the current content. Does nothing otherwise.
            */
            public Clear () : void
            /** 
            Dispose the Painter2D object and free its internal unmanaged resources.
            */
            public Dispose () : void
            /** 
            Begins a new path and empties the list of recorded sub-paths and resets the pen position to (0,0).
            */
            public BeginPath () : void
            /** 
            Closes the current sub-path with a straight line. If the sub-path is already closed, this does nothing.
            */
            public ClosePath () : void
            /** 
            Begins a new sub-path at the provied coordinate.
            * @param $pos The position of the new sub-path.
            */
            public MoveTo ($pos: UnityEngine.Vector2) : void
            /** 
            Adds a straight line to the current sub-path to the provided position.
            * @param $pos The end position of the line.
            */
            public LineTo ($pos: UnityEngine.Vector2) : void
            /** 
            Adds an arc to the current sub-path to the provided position using a control point.
            * @param $p1 The first control point of the arc.
            * @param $p2 The final point of the arc.
            * @param $radius The radius of the arc.
            */
            public ArcTo ($p1: UnityEngine.Vector2, $p2: UnityEngine.Vector2, $radius: number) : void
            /** 
            Adds an arc to the current sub-path to the provided position, radius and angles.
            * @param $center The center position of the arc.
            * @param $radius The radius of the arc.
            * @param $startAngle The starting angle the arc.
            * @param $endAngle The ending angle of the arc.
            * @param $antiClockwise Whether the arc should draw in the anti-clockwise direction (default=false).
            */
            public Arc ($center: UnityEngine.Vector2, $radius: number, $startAngle: UnityEngine.UIElements.Angle, $endAngle: UnityEngine.UIElements.Angle, $direction?: UnityEngine.UIElements.ArcDirection) : void
            /** 
            Adds a cubic bezier curve to the current sub-path to the provided position using two control points.
            * @param $p1 The first control point of the cubic bezier.
            * @param $p2 The second control point of the cubic bezier.
            * @param $p3 The final position of the cubic bezier.
            */
            public BezierCurveTo ($p1: UnityEngine.Vector2, $p2: UnityEngine.Vector2, $p3: UnityEngine.Vector2) : void
            /** 
            Adds a quadratic bezier curve to the current sub-path to the provided position using a control point.
            * @param $p1 The control point of the quadratic bezier.
            * @param $p2 The final position of the quadratic bezier.
            */
            public QuadraticCurveTo ($p1: UnityEngine.Vector2, $p2: UnityEngine.Vector2) : void
            /** 
            Strokes the currently defined path.
            */
            public Stroke () : void
            /** 
            Fills the currently defined path.
            * @param $fillRule The fill rule (non-zero or odd-even) to use. Default is non-zero.
            */
            public Fill ($fillRule?: UnityEngine.UIElements.FillRule) : void
            /** 
            Saves the content of this Painter2D to a VectorImage object.
            * @param $vectorImage The VectorImage object that will be initialized with this painter. This object should not be null.
            * @returns True if the VectorImage initialization succeeded. False otherwise. 
            */
            public SaveToVectorImage ($vectorImage: UnityEngine.UIElements.VectorImage) : boolean
            public constructor ()
        }
        /** 
        Represents an angle value.
        */
        class Angle extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Angle>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The angle value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The unit of the value property.
            */
            public get unit(): UnityEngine.UIElements.AngleUnit;
            public set unit(value: UnityEngine.UIElements.AngleUnit);
            /** 
            Creates an Angle from degrees.
            * @returns The created angle. 
            */
            public static Degrees ($value: number) : UnityEngine.UIElements.Angle
            /** 
            Creates an Angle from gradians
            * @returns The created angle. 
            */
            public static Gradians ($value: number) : UnityEngine.UIElements.Angle
            /** 
            Creates an Angle from radians
            * @returns The created angle. 
            */
            public static Radians ($value: number) : UnityEngine.UIElements.Angle
            /** 
            Creates an Angle from turns
            * @returns The created angle. 
            */
            public static Turns ($value: number) : UnityEngine.UIElements.Angle
            /** 
            Returns the value of the angle, expressed in degrees.
            */
            public ToDegrees () : number
            /** 
            Returns the value of the angle, expressed in gradians.
            */
            public ToGradians () : number
            /** 
            Returns the value of the angle, expressed in radians.
            */
            public ToRadians () : number
            /** 
            Returns the value of the angle, expressed in turns.
            */
            public ToTurns () : number
            public static op_Implicit ($value: number) : UnityEngine.UIElements.Angle
            public static op_Equality ($lhs: UnityEngine.UIElements.Angle, $rhs: UnityEngine.UIElements.Angle) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Angle, $rhs: UnityEngine.UIElements.Angle) : boolean
            public Equals ($other: UnityEngine.UIElements.Angle) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($value: number)
            public constructor ($value: number, $unit: UnityEngine.UIElements.AngleUnit)
        }
        /** 
        Used in jobs to allocate UI Toolkit temporary meshes.
        */
        class TempMeshAllocator extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public AllocateTempMesh ($vertexCount: number, $indexCount: number, $vertices: $Ref<Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>>, $indices: $Ref<Unity.Collections.NativeSlice$1<number>>) : void
        }
        /** 
        Contains a part of the draw sequence of a VisualElement. You can use it in a job to add nested draw calls.
        */
        class MeshGenerationNode extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public DrawMesh ($vertices: Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>, $indices: Unity.Collections.NativeSlice$1<number>, $texture?: UnityEngine.Texture) : void
        }
        /** 
        Contains timing information of scheduler events.
        */
        class TimerState extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.TimerState>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Start time in milliseconds, or last callback time for repeatable IScheduledItem.
            */
            public get start(): bigint;
            public set start(value: bigint);
            /** 
            Current time in milliseconds.
            */
            public get now(): bigint;
            public set now(value: bigint);
            /** 
            Time difference in milliseconds between now and the previous callback.
            */
            public get deltaTime(): bigint;
            /** 
            Compare this object with another object and return true if they are equal.
            * @param $obj The object to compare with.
            * @returns True if the objects are equal. 
            */
            public Equals ($obj: any) : boolean
            /** 
            Compare this object with another object and return true if they are equal.
            * @param $other The object to compare with.
            * @returns True if the objects are equal. 
            */
            public Equals ($other: UnityEngine.UIElements.TimerState) : boolean
            public static op_Equality ($state1: UnityEngine.UIElements.TimerState, $state2: UnityEngine.UIElements.TimerState) : boolean
            public static op_Inequality ($state1: UnityEngine.UIElements.TimerState, $state2: UnityEngine.UIElements.TimerState) : boolean
        }
        /** 
        Unit of measurement used to express the value of an Angle.
        */
        enum AngleUnit
        { Degree = 0, Gradian = 1, Radian = 2, Turn = 3 }
        class CustomStyleProperty$1<T> extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.CustomStyleProperty$1<T>>
        {
            protected [__keep_incompatibility]: never;
            public get name(): string;
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.CustomStyleProperty$1<T>) : boolean
            public static op_Equality ($a: any, $b: any) : any
            public static op_Inequality ($a: any, $b: any) : any
            public constructor ($propertyName: string)
        }
        /** 
        Represents a mathematical function that describes the rate at which a numerical value changes.
        */
        enum EasingMode
        { Ease = 0, EaseIn = 1, EaseOut = 2, EaseInOut = 3, Linear = 4, EaseInSine = 5, EaseOutSine = 6, EaseInOutSine = 7, EaseInCubic = 8, EaseOutCubic = 9, EaseInOutCubic = 10, EaseInCirc = 11, EaseOutCirc = 12, EaseInOutCirc = 13, EaseInElastic = 14, EaseOutElastic = 15, EaseInOutElastic = 16, EaseInBack = 17, EaseOutBack = 18, EaseInOutBack = 19, EaseInBounce = 20, EaseOutBounce = 21, EaseInOutBounce = 22 }
        /** 
        Determines how intermediate values are calculated for a transition.
        */
        class EasingFunction extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.EasingFunction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The value of the EasingMode.
            */
            public get mode(): UnityEngine.UIElements.EasingMode;
            public set mode(value: UnityEngine.UIElements.EasingMode);
            public static op_Implicit ($easingMode: UnityEngine.UIElements.EasingMode) : UnityEngine.UIElements.EasingFunction
            public static op_Equality ($lhs: UnityEngine.UIElements.EasingFunction, $rhs: UnityEngine.UIElements.EasingFunction) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.EasingFunction, $rhs: UnityEngine.UIElements.EasingFunction) : boolean
            public Equals ($other: UnityEngine.UIElements.EasingFunction) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($mode: UnityEngine.UIElements.EasingMode)
        }
        /** 
        The filter function type for a FilterFunction .
        */
        enum FilterFunctionType
        { None = 0, Custom = 1, Tint = 2, Opacity = 3, Invert = 4, Grayscale = 5, Sepia = 6, Blur = 7, Contrast = 8, HueRotate = 9, Count = 10 }
        /** 
        The type of a filter parameter.
        */
        enum FilterParameterType
        { Float = 0, Color = 1 }
        /** 
        Describes a VisualElement font.
        */
        class FontDefinition extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.FontDefinition>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Font to use to display text. You cannot set this and FontDefinition.fontAsset at the same time.
            */
            public get font(): UnityEngine.Font;
            public set font(value: UnityEngine.Font);
            /** 
            SDF font to use to display text. You cannot set this and FontDefinition.font at the same time.
            */
            public get fontAsset(): UnityEngine.TextCore.Text.FontAsset;
            public set fontAsset(value: UnityEngine.TextCore.Text.FontAsset);
            /** 
            Create a FontDefinition from Font.
            * @param $f The font to use to display text.
            * @returns A new FontDefinition object. 
            */
            public static FromFont ($f: UnityEngine.Font) : UnityEngine.UIElements.FontDefinition
            /** 
            Create a FontDefinition from FontAsset.
            * @param $f The SDF font to use to display text.
            * @returns A new FontDefinition object. 
            */
            public static FromSDFFont ($f: UnityEngine.TextCore.Text.FontAsset) : UnityEngine.UIElements.FontDefinition
            public Equals ($other: UnityEngine.UIElements.FontDefinition) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEngine.UIElements.FontDefinition, $right: UnityEngine.UIElements.FontDefinition) : boolean
            public static op_Inequality ($left: UnityEngine.UIElements.FontDefinition, $right: UnityEngine.UIElements.FontDefinition) : boolean
        }
        /** 
        Defines the alignment behavior along an axis.
        */
        enum Align
        { Auto = 0, FlexStart = 1, Center = 2, FlexEnd = 3, Stretch = 4 }
        /** 
        Defines how an element is displayed in the layout.
        */
        enum DisplayStyle
        { Flex = 0, None = 1 }
        /** 
        Style value that can be either a float or a StyleKeyword.
        */
        class StyleFloat extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<number>, System.IEquatable$1<UnityEngine.UIElements.StyleFloat>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The float value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleFloat, $rhs: UnityEngine.UIElements.StyleFloat) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleFloat, $rhs: UnityEngine.UIElements.StyleFloat) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleFloat
            public static op_Implicit ($v: number) : UnityEngine.UIElements.StyleFloat
            public Equals ($other: UnityEngine.UIElements.StyleFloat) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: number)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        interface IStyleValue$1<T>
        {
        }
        /** 
        Defines the main-axis of the flex layout.
        */
        enum FlexDirection
        { Column = 0, ColumnReverse = 1, Row = 2, RowReverse = 3 }
        /** 
        By default, items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.
        */
        enum Wrap
        { NoWrap = 0, Wrap = 1, WrapReverse = 2 }
        /** 
        Defines the alignment along the main axis, how is extra space distributed.
        */
        enum Justify
        { FlexStart = 0, Center = 1, FlexEnd = 2, SpaceBetween = 3, SpaceAround = 4, SpaceEvenly = 5 }
        /** 
        Defines how the position values are interpreted by the layout engine.
        */
        enum Position
        { Relative = 0, Absolute = 1 }
        /** 
        Provides rotation information for visual elements that rotates around the TransformOrigin. Positive values represent clockwise rotation.
        */
        class Rotate extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Rotate>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The angle applied by the rotation. Positive values represent clockwise rotation and negative values represent counterclockwise rotation.
            */
            public get angle(): UnityEngine.UIElements.Angle;
            public set angle(value: UnityEngine.UIElements.Angle);
            /** 
            Return a value of Rotate that applies no rotation
            */
            public static None () : UnityEngine.UIElements.Rotate
            public static op_Equality ($lhs: UnityEngine.UIElements.Rotate, $rhs: UnityEngine.UIElements.Rotate) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Rotate, $rhs: UnityEngine.UIElements.Rotate) : boolean
            public Equals ($other: UnityEngine.UIElements.Rotate) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($angle: UnityEngine.UIElements.Angle)
        }
        /** 
        Represents the scale applied as element transformations. The center point that doesn't move when the scaling is applied is the TransformOrigin.
        */
        class Scale extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Scale>
        {
            protected [__keep_incompatibility]: never;
            public get value(): UnityEngine.Vector3;
            public set value(value: UnityEngine.Vector3);
            /** 
            Returns a value of Scale without any scaling applied.
            */
            public static None () : UnityEngine.UIElements.Scale
            public static op_Implicit ($scale: UnityEngine.Vector2) : UnityEngine.UIElements.Scale
            public static op_Equality ($lhs: UnityEngine.UIElements.Scale, $rhs: UnityEngine.UIElements.Scale) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Scale, $rhs: UnityEngine.UIElements.Scale) : boolean
            public Equals ($other: UnityEngine.UIElements.Scale) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($scale: UnityEngine.Vector2)
            public constructor ($scale: UnityEngine.Vector3)
        }
        /** 
        Specifies how the text Element treats hidden overflow content.
        */
        enum TextOverflow
        { Clip = 0, Ellipsis = 1 }
        /** 
        Represents a time value.
        */
        class TimeValue extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.TimeValue>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The time value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The unit of the value property.
            */
            public get unit(): UnityEngine.UIElements.TimeUnit;
            public set unit(value: UnityEngine.UIElements.TimeUnit);
            public static op_Implicit ($value: number) : UnityEngine.UIElements.TimeValue
            public static op_Equality ($lhs: UnityEngine.UIElements.TimeValue, $rhs: UnityEngine.UIElements.TimeValue) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.TimeValue, $rhs: UnityEngine.UIElements.TimeValue) : boolean
            public Equals ($other: UnityEngine.UIElements.TimeValue) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($value: number)
            public constructor ($value: number, $unit: UnityEngine.UIElements.TimeUnit)
        }
        /** 
        Specifies which part of the text the Element replaces with an ellipsis when textOverflow is set to TextOverflow.Ellipsis.
        */
        enum TextOverflowPosition
        { End = 0, Start = 1, Middle = 2 }
        /** 
        Style value that specifies whether or not a VisualElement is visible.
        */
        enum Visibility
        { Visible = 0, Hidden = 1 }
        /** 
        Word wrapping over multiple lines if not enough space is available to draw the text of an element.
        */
        enum WhiteSpace
        { Normal = 0, NoWrap = 1 }
        class StyleEnum$1<T> extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<T>, System.IEquatable$1<UnityEngine.UIElements.StyleEnum$1<T>>
        {
            protected [__keep_incompatibility]: never;
            public get value(): T;
            public set value(value: T);
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: any, $rhs: any) : any
            public static op_Inequality ($lhs: any, $rhs: any) : any
            public static op_Implicit ($keyword: any) : any
            public static op_Implicit ($v: any) : any
            public Equals ($other: UnityEngine.UIElements.StyleEnum$1<T>) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: T)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        interface IStyle
        {
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            alignContent : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Align>
            /** 
            Alignment of children on the cross axis of this container.
            */
            alignItems : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Align>
            /** 
            Similar to align-items, but only for this specific element.
            */
            alignSelf : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Align>
            /** 
            Background color to paint in the element's box.
            */
            backgroundColor : UnityEngine.UIElements.StyleColor
            /** 
            Background image to paint in the element's box.
            */
            backgroundImage : UnityEngine.UIElements.StyleBackground
            /** 
            Background image x position value.
            */
            backgroundPositionX : UnityEngine.UIElements.StyleBackgroundPosition
            /** 
            Background image y position value.
            */
            backgroundPositionY : UnityEngine.UIElements.StyleBackgroundPosition
            /** 
            Background image repeat value.
            */
            backgroundRepeat : UnityEngine.UIElements.StyleBackgroundRepeat
            /** 
            Background image size value.
            */
            backgroundSize : UnityEngine.UIElements.StyleBackgroundSize
            /** 
            Color of the element's bottom border.
            */
            borderBottomColor : UnityEngine.UIElements.StyleColor
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            borderBottomLeftRadius : UnityEngine.UIElements.StyleLength
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            borderBottomRightRadius : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            borderBottomWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Color of the element's left border.
            */
            borderLeftColor : UnityEngine.UIElements.StyleColor
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            borderLeftWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Color of the element's right border.
            */
            borderRightColor : UnityEngine.UIElements.StyleColor
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            borderRightWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Color of the element's top border.
            */
            borderTopColor : UnityEngine.UIElements.StyleColor
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            borderTopLeftRadius : UnityEngine.UIElements.StyleLength
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            borderTopRightRadius : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            borderTopWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Bottom distance from the element's box during layout.
            */
            bottom : UnityEngine.UIElements.StyleLength
            /** 
            Color to use when drawing the text of an element.
            */
            color : UnityEngine.UIElements.StyleColor
            /** 
            Mouse cursor to display when the mouse pointer is over an element.
            */
            cursor : UnityEngine.UIElements.StyleCursor
            /** 
            Defines how an element is displayed in the layout.
            */
            display : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.DisplayStyle>
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            flexBasis : UnityEngine.UIElements.StyleLength
            /** 
            Direction of the main axis to layout children in a container.
            */
            flexDirection : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.FlexDirection>
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            flexGrow : UnityEngine.UIElements.StyleFloat
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            flexShrink : UnityEngine.UIElements.StyleFloat
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            flexWrap : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Wrap>
            /** 
            Font size to draw the element's text.
            */
            fontSize : UnityEngine.UIElements.StyleLength
            /** 
            Fixed height of an element for the layout.
            */
            height : UnityEngine.UIElements.StyleLength
            /** 
            Justification of children on the main axis of this container.
            */
            justifyContent : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Justify>
            /** 
            Left distance from the element's box during layout.
            */
            left : UnityEngine.UIElements.StyleLength
            /** 
            Increases or decreases the space between characters.
            */
            letterSpacing : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            marginBottom : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            marginLeft : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            marginRight : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            marginTop : UnityEngine.UIElements.StyleLength
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            maxHeight : UnityEngine.UIElements.StyleLength
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            maxWidth : UnityEngine.UIElements.StyleLength
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            minHeight : UnityEngine.UIElements.StyleLength
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            minWidth : UnityEngine.UIElements.StyleLength
            /** 
            Specifies the transparency of an element and of its children.
            */
            opacity : UnityEngine.UIElements.StyleFloat
            /** 
            How a container behaves if its content overflows its own box.
            */
            overflow : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Overflow>
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            paddingBottom : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            paddingLeft : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            paddingRight : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            paddingTop : UnityEngine.UIElements.StyleLength
            /** 
            Element's positioning in its parent container.
            */
            position : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Position>
            /** 
            Right distance from the element's box during layout.
            */
            right : UnityEngine.UIElements.StyleLength
            /** 
            A rotation transformation.
            */
            rotate : UnityEngine.UIElements.StyleRotate
            /** 
            A scaling transformation.
            */
            scale : UnityEngine.UIElements.StyleScale
            /** 
            The element's text overflow mode.
            */
            textOverflow : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.TextOverflow>
            /** 
            Drop shadow of the text.
            */
            textShadow : UnityEngine.UIElements.StyleTextShadow
            /** 
            Top distance from the element's box during layout.
            */
            top : UnityEngine.UIElements.StyleLength
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            transformOrigin : UnityEngine.UIElements.StyleTransformOrigin
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            transitionDelay : UnityEngine.UIElements.StyleList$1<UnityEngine.UIElements.TimeValue>
            /** 
            Time a transition animation should take to complete.
            */
            transitionDuration : UnityEngine.UIElements.StyleList$1<UnityEngine.UIElements.TimeValue>
            /** 
            Properties to which a transition effect should be applied.
            */
            transitionProperty : UnityEngine.UIElements.StyleList$1<UnityEngine.UIElements.StylePropertyName>
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            transitionTimingFunction : UnityEngine.UIElements.StyleList$1<UnityEngine.UIElements.EasingFunction>
            /** 
            A translate transformation.
            */
            translate : UnityEngine.UIElements.StyleTranslate
            /** 
            Tinting color for the element's backgroundImage.
            */
            unityBackgroundImageTintColor : UnityEngine.UIElements.StyleColor
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            unityFont : UnityEngine.UIElements.StyleFont
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            unityFontDefinition : UnityEngine.UIElements.StyleFontDefinition
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            unityFontStyleAndWeight : UnityEngine.UIElements.StyleEnum$1<UnityEngine.FontStyle>
            /** 
            Specifies which box the element content is clipped against.
            */
            unityOverflowClipBox : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.OverflowClipBox>
            /** 
            Increases or decreases the space between paragraphs.
            */
            unityParagraphSpacing : UnityEngine.UIElements.StyleLength
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            unitySliceBottom : UnityEngine.UIElements.StyleInt
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            unitySliceLeft : UnityEngine.UIElements.StyleInt
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            unitySliceRight : UnityEngine.UIElements.StyleInt
            /** 
            Scale applied to an element's slices.
            */
            unitySliceScale : UnityEngine.UIElements.StyleFloat
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            unitySliceTop : UnityEngine.UIElements.StyleInt
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            unityTextAlign : UnityEngine.UIElements.StyleEnum$1<UnityEngine.TextAnchor>
            /** 
            Outline color of the text.
            */
            unityTextOutlineColor : UnityEngine.UIElements.StyleColor
            /** 
            Outline width of the text.
            */
            unityTextOutlineWidth : UnityEngine.UIElements.StyleFloat
            /** 
            The element's text overflow position.
            */
            unityTextOverflowPosition : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.TextOverflowPosition>
            /** 
            Specifies whether or not an element is visible.
            */
            visibility : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Visibility>
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            whiteSpace : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.WhiteSpace>
            /** 
            Fixed width of an element for the layout.
            */
            width : UnityEngine.UIElements.StyleLength
            /** 
            Increases or decreases the space between words.
            */
            wordSpacing : UnityEngine.UIElements.StyleLength
        }
        /** 
        Style value that can be either a Color or a StyleKeyword.
        */
        class StyleColor extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.Color>, System.IEquatable$1<UnityEngine.UIElements.StyleColor>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Color value.
            */
            public get value(): UnityEngine.Color;
            public set value(value: UnityEngine.Color);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleColor, $rhs: UnityEngine.UIElements.StyleColor) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleColor, $rhs: UnityEngine.UIElements.StyleColor) : boolean
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleColor, $rhs: UnityEngine.Color) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleColor, $rhs: UnityEngine.Color) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleColor
            public static op_Implicit ($v: UnityEngine.Color) : UnityEngine.UIElements.StyleColor
            public Equals ($other: UnityEngine.UIElements.StyleColor) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.Color)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Background or a StyleKeyword.
        */
        class StyleBackground extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Background>, System.IEquatable$1<UnityEngine.UIElements.StyleBackground>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Background value.
            */
            public get value(): UnityEngine.UIElements.Background;
            public set value(value: UnityEngine.UIElements.Background);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleBackground, $rhs: UnityEngine.UIElements.StyleBackground) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleBackground, $rhs: UnityEngine.UIElements.StyleBackground) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleBackground
            public static op_Implicit ($v: UnityEngine.UIElements.Background) : UnityEngine.UIElements.StyleBackground
            public static op_Implicit ($v: UnityEngine.Texture2D) : UnityEngine.UIElements.StyleBackground
            public Equals ($other: UnityEngine.UIElements.StyleBackground) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Background)
            public constructor ($v: UnityEngine.Texture2D)
            public constructor ($v: UnityEngine.Sprite)
            public constructor ($v: UnityEngine.UIElements.VectorImage)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents a style value that can be either a BackgroundPosition or a StyleKeyword.
        */
        class StyleBackgroundPosition extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.BackgroundPosition>, System.IEquatable$1<UnityEngine.UIElements.StyleBackgroundPosition>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The BackgroundPosition value.
            */
            public get value(): UnityEngine.UIElements.BackgroundPosition;
            public set value(value: UnityEngine.UIElements.BackgroundPosition);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleBackgroundPosition, $rhs: UnityEngine.UIElements.StyleBackgroundPosition) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleBackgroundPosition, $rhs: UnityEngine.UIElements.StyleBackgroundPosition) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleBackgroundPosition
            public static op_Implicit ($v: UnityEngine.UIElements.BackgroundPosition) : UnityEngine.UIElements.StyleBackgroundPosition
            public Equals ($other: UnityEngine.UIElements.StyleBackgroundPosition) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.BackgroundPosition)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents a style value that can be either a BackgroundRepeat or a StyleKeyword.
        */
        class StyleBackgroundRepeat extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.BackgroundRepeat>, System.IEquatable$1<UnityEngine.UIElements.StyleBackgroundRepeat>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The BackgroundRepeat value.
            */
            public get value(): UnityEngine.UIElements.BackgroundRepeat;
            public set value(value: UnityEngine.UIElements.BackgroundRepeat);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleBackgroundRepeat, $rhs: UnityEngine.UIElements.StyleBackgroundRepeat) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleBackgroundRepeat, $rhs: UnityEngine.UIElements.StyleBackgroundRepeat) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleBackgroundRepeat
            public static op_Implicit ($v: UnityEngine.UIElements.BackgroundRepeat) : UnityEngine.UIElements.StyleBackgroundRepeat
            public Equals ($other: UnityEngine.UIElements.StyleBackgroundRepeat) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.BackgroundRepeat)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents a style value that can be either a BackgroundSize or a StyleKeyword.
        */
        class StyleBackgroundSize extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.BackgroundSize>, System.IEquatable$1<UnityEngine.UIElements.StyleBackgroundSize>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The BackgroundSize value.
            */
            public get value(): UnityEngine.UIElements.BackgroundSize;
            public set value(value: UnityEngine.UIElements.BackgroundSize);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleBackgroundSize, $rhs: UnityEngine.UIElements.StyleBackgroundSize) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleBackgroundSize, $rhs: UnityEngine.UIElements.StyleBackgroundSize) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleBackgroundSize
            public static op_Implicit ($v: UnityEngine.UIElements.BackgroundSize) : UnityEngine.UIElements.StyleBackgroundSize
            public Equals ($other: UnityEngine.UIElements.StyleBackgroundSize) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.BackgroundSize)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Length or a StyleKeyword.
        */
        class StyleLength extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Length>, System.IEquatable$1<UnityEngine.UIElements.StyleLength>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Length value.
            */
            public get value(): UnityEngine.UIElements.Length;
            public set value(value: UnityEngine.UIElements.Length);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleLength, $rhs: UnityEngine.UIElements.StyleLength) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleLength, $rhs: UnityEngine.UIElements.StyleLength) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleLength
            public static op_Implicit ($v: number) : UnityEngine.UIElements.StyleLength
            public static op_Implicit ($v: UnityEngine.UIElements.Length) : UnityEngine.UIElements.StyleLength
            public Equals ($other: UnityEngine.UIElements.StyleLength) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: number)
            public constructor ($v: UnityEngine.UIElements.Length)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Cursor or a StyleKeyword.
        */
        class StyleCursor extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Cursor>, System.IEquatable$1<UnityEngine.UIElements.StyleCursor>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Cursor value.
            */
            public get value(): UnityEngine.UIElements.Cursor;
            public set value(value: UnityEngine.UIElements.Cursor);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleCursor, $rhs: UnityEngine.UIElements.StyleCursor) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleCursor, $rhs: UnityEngine.UIElements.StyleCursor) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleCursor
            public static op_Implicit ($v: UnityEngine.UIElements.Cursor) : UnityEngine.UIElements.StyleCursor
            public Equals ($other: UnityEngine.UIElements.StyleCursor) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Cursor)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Defines what should happened if content overflows an element bounds.
        */
        enum Overflow
        { Visible = 0, Hidden = 1 }
        /** 
        Represents a style value that can be either a Rotate or a StyleKeyword.
        */
        class StyleRotate extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Rotate>, System.IEquatable$1<UnityEngine.UIElements.StyleRotate>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Rotate value.
            */
            public get value(): UnityEngine.UIElements.Rotate;
            public set value(value: UnityEngine.UIElements.Rotate);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleRotate, $rhs: UnityEngine.UIElements.StyleRotate) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleRotate, $rhs: UnityEngine.UIElements.StyleRotate) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleRotate
            public static op_Implicit ($v: UnityEngine.UIElements.Rotate) : UnityEngine.UIElements.StyleRotate
            public Equals ($other: UnityEngine.UIElements.StyleRotate) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Rotate)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Scale or a StyleKeyword.
        */
        class StyleScale extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Scale>, System.IEquatable$1<UnityEngine.UIElements.StyleScale>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Scale value.
            */
            public get value(): UnityEngine.UIElements.Scale;
            public set value(value: UnityEngine.UIElements.Scale);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Implicit ($scale: UnityEngine.Vector2) : UnityEngine.UIElements.StyleScale
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleScale, $rhs: UnityEngine.UIElements.StyleScale) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleScale, $rhs: UnityEngine.UIElements.StyleScale) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleScale
            public static op_Implicit ($v: UnityEngine.UIElements.Scale) : UnityEngine.UIElements.StyleScale
            public Equals ($other: UnityEngine.UIElements.StyleScale) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Scale)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
            public constructor ($scale: UnityEngine.Vector2)
        }
        /** 
        Style value that can be either a TextShadow or a StyleKeyword.
        */
        class StyleTextShadow extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.TextShadow>, System.IEquatable$1<UnityEngine.UIElements.StyleTextShadow>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The TextShadow value.
            */
            public get value(): UnityEngine.UIElements.TextShadow;
            public set value(value: UnityEngine.UIElements.TextShadow);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleTextShadow, $rhs: UnityEngine.UIElements.StyleTextShadow) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleTextShadow, $rhs: UnityEngine.UIElements.StyleTextShadow) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleTextShadow
            public static op_Implicit ($v: UnityEngine.UIElements.TextShadow) : UnityEngine.UIElements.StyleTextShadow
            public Equals ($other: UnityEngine.UIElements.StyleTextShadow) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.TextShadow)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Script interface for VisualElement text-shadow style property IStyle.textShadow.
        */
        class TextShadow extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.TextShadow>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The offset of the shadow.
            */
            public offset : UnityEngine.Vector2
            /** 
            The blur radius of the shadow.
            */
            public blurRadius : number
            /** 
            The color of the shadow.
            */
            public color : UnityEngine.Color
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.TextShadow) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.TextShadow, $style2: UnityEngine.UIElements.TextShadow) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.TextShadow, $style2: UnityEngine.UIElements.TextShadow) : boolean
        }
        /** 
        Represents a style value that can be either a TransformOrigin or a StyleKeyword.
        */
        class StyleTransformOrigin extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.TransformOrigin>, System.IEquatable$1<UnityEngine.UIElements.StyleTransformOrigin>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The TransformOrigin value.
            */
            public get value(): UnityEngine.UIElements.TransformOrigin;
            public set value(value: UnityEngine.UIElements.TransformOrigin);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleTransformOrigin, $rhs: UnityEngine.UIElements.StyleTransformOrigin) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleTransformOrigin, $rhs: UnityEngine.UIElements.StyleTransformOrigin) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleTransformOrigin
            public static op_Implicit ($v: UnityEngine.UIElements.TransformOrigin) : UnityEngine.UIElements.StyleTransformOrigin
            public Equals ($other: UnityEngine.UIElements.StyleTransformOrigin) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.TransformOrigin)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents the point of origin where the (Scale, Translate, Rotate) transformations are applied.
        */
        class TransformOrigin extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.TransformOrigin>
        {
            protected [__keep_incompatibility]: never;
            public get x(): UnityEngine.UIElements.Length;
            public set x(value: UnityEngine.UIElements.Length);
            public get y(): UnityEngine.UIElements.Length;
            public set y(value: UnityEngine.UIElements.Length);
            public get z(): number;
            public set z(value: number);
            /** 
            Returns the initial value for the TransformOrigin property.
            */
            public static Initial () : UnityEngine.UIElements.TransformOrigin
            public static op_Equality ($lhs: UnityEngine.UIElements.TransformOrigin, $rhs: UnityEngine.UIElements.TransformOrigin) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.TransformOrigin, $rhs: UnityEngine.UIElements.TransformOrigin) : boolean
            public Equals ($other: UnityEngine.UIElements.TransformOrigin) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($x: UnityEngine.UIElements.Length, $y: UnityEngine.UIElements.Length, $z: number)
            public constructor ($x: UnityEngine.UIElements.Length, $y: UnityEngine.UIElements.Length)
        }
        class StyleList$1<T> extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<System.Collections.Generic.List$1<T>>, System.IEquatable$1<UnityEngine.UIElements.StyleList$1<T>>
        {
            protected [__keep_incompatibility]: never;
            public get value(): System.Collections.Generic.List$1<T>;
            public set value(value: System.Collections.Generic.List$1<T>);
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: any, $rhs: any) : any
            public static op_Inequality ($lhs: any, $rhs: any) : any
            public static op_Implicit ($keyword: any) : any
            public static op_Implicit ($v: any) : any
            public Equals ($other: UnityEngine.UIElements.StyleList$1<T>) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: System.Collections.Generic.List$1<T>)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Translate or a StyleKeyword.
        */
        class StyleTranslate extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Translate>, System.IEquatable$1<UnityEngine.UIElements.StyleTranslate>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Translate value.
            */
            public get value(): UnityEngine.UIElements.Translate;
            public set value(value: UnityEngine.UIElements.Translate);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleTranslate, $rhs: UnityEngine.UIElements.StyleTranslate) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleTranslate, $rhs: UnityEngine.UIElements.StyleTranslate) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleTranslate
            public static op_Implicit ($v: UnityEngine.UIElements.Translate) : UnityEngine.UIElements.StyleTranslate
            public Equals ($other: UnityEngine.UIElements.StyleTranslate) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Translate)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents a translation of the object. Percentage values in X and Y are relative to the width and height of the visual element where the style value is applied.
        */
        class Translate extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Translate>
        {
            protected [__keep_incompatibility]: never;
            public get x(): UnityEngine.UIElements.Length;
            public set x(value: UnityEngine.UIElements.Length);
            public get y(): UnityEngine.UIElements.Length;
            public set y(value: UnityEngine.UIElements.Length);
            public get z(): number;
            public set z(value: number);
            /** 
            Returns the value of a Translate object with no translation applied.
            */
            public static None () : UnityEngine.UIElements.Translate
            public static op_Equality ($lhs: UnityEngine.UIElements.Translate, $rhs: UnityEngine.UIElements.Translate) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Translate, $rhs: UnityEngine.UIElements.Translate) : boolean
            public Equals ($other: UnityEngine.UIElements.Translate) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($x: UnityEngine.UIElements.Length, $y: UnityEngine.UIElements.Length, $z: number)
            public constructor ($x: UnityEngine.UIElements.Length, $y: UnityEngine.UIElements.Length)
        }
        /** 
        Style value that can be either a Font or a StyleKeyword.
        */
        class StyleFont extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.Font>, System.IEquatable$1<UnityEngine.UIElements.StyleFont>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Font value.
            */
            public get value(): UnityEngine.Font;
            public set value(value: UnityEngine.Font);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleFont, $rhs: UnityEngine.UIElements.StyleFont) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleFont, $rhs: UnityEngine.UIElements.StyleFont) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleFont
            public static op_Implicit ($v: UnityEngine.Font) : UnityEngine.UIElements.StyleFont
            public Equals ($other: UnityEngine.UIElements.StyleFont) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.Font)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a FontDefinition or a StyleKeyword.
        */
        class StyleFontDefinition extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.FontDefinition>, System.IEquatable$1<UnityEngine.UIElements.StyleFontDefinition>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The actual value of the definition.
            */
            public get value(): UnityEngine.UIElements.FontDefinition;
            public set value(value: UnityEngine.UIElements.FontDefinition);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleFontDefinition
            public static op_Implicit ($f: UnityEngine.UIElements.FontDefinition) : UnityEngine.UIElements.StyleFontDefinition
            public Equals ($other: UnityEngine.UIElements.StyleFontDefinition) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEngine.UIElements.StyleFontDefinition, $right: UnityEngine.UIElements.StyleFontDefinition) : boolean
            public static op_Inequality ($left: UnityEngine.UIElements.StyleFontDefinition, $right: UnityEngine.UIElements.StyleFontDefinition) : boolean
            public constructor ($f: UnityEngine.UIElements.FontDefinition)
            public constructor ($f: UnityEngine.TextCore.Text.FontAsset)
            public constructor ($f: UnityEngine.Font)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Boxes against which the VisualElement content is clipped.
        */
        enum OverflowClipBox
        { PaddingBox = 0, ContentBox = 1 }
        /** 
        Style value that can be either an integer or a StyleKeyword.
        */
        class StyleInt extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<number>, System.IEquatable$1<UnityEngine.UIElements.StyleInt>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The integer value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleInt, $rhs: UnityEngine.UIElements.StyleInt) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleInt, $rhs: UnityEngine.UIElements.StyleInt) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleInt
            public static op_Implicit ($v: number) : UnityEngine.UIElements.StyleInt
            public Equals ($other: UnityEngine.UIElements.StyleInt) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: number)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Describes the picking behavior.
        */
        enum PickingMode
        { Position = 0, Ignore = 1 }
        /** 
        Indicates the directionality of the element's text.
        */
        enum LanguageDirection
        { Inherit = 0, LTR = 1, RTL = 2 }
        /** 
        This structure manipulates the set of StyleSheet objects attached to the owner VisualElement.
        */
        class VisualElementStyleSheetSet extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.VisualElementStyleSheetSet>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Number of style sheets attached to the owner element.
            */
            public get count(): number;
            /** 
            Adds a style sheet for the owner element.
            */
            public Add ($styleSheet: UnityEngine.UIElements.StyleSheet) : void
            /** 
            Removes all style sheets for the owner element.
            */
            public Clear () : void
            /** 
            Removes a style sheet for the owner element.
            */
            public Remove ($styleSheet: UnityEngine.UIElements.StyleSheet) : boolean
            /** 
            Looks for the specified StyleSheet
            * @returns Returns true if the style sheet is attached to the owner element, false otherwise. 
            */
            public Contains ($styleSheet: UnityEngine.UIElements.StyleSheet) : boolean
            public get_Item ($index: number) : UnityEngine.UIElements.StyleSheet
            /** 
            Compares instances of the VisualElementStyleSheetSet struct for equality.
            * @param $other The structure to compare with.
            * @returns Returns true if the two instances refer to the same element, false otherwise. 
            */
            public Equals ($other: UnityEngine.UIElements.VisualElementStyleSheetSet) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEngine.UIElements.VisualElementStyleSheetSet, $right: UnityEngine.UIElements.VisualElementStyleSheetSet) : boolean
            public static op_Inequality ($left: UnityEngine.UIElements.VisualElementStyleSheetSet, $right: UnityEngine.UIElements.VisualElementStyleSheetSet) : boolean
        }
        /** 
        Describes how to interpret a Length value.
        */
        enum LengthUnit
        { Pixel = 0, Percent = 1 }
        /** 
        Keyword that can be used on any style value types.
        */
        enum StyleKeyword
        { Undefined = 0, Null = 1, Auto = 2, None = 3, Initial = 4 }
        /** 
        Describes how to interpret a TimeValue.
        */
        enum TimeUnit
        { Second = 0, Millisecond = 1 }
        /** 
        Specifies the alignment keywords for TransformOrigin.
        */
        enum TransformOriginOffset
        { Left = 1, Right = 2, Top = 3, Bottom = 4, Center = 5 }
        /** 
        Represents the root VisualElement of UXML file.
        */
        class TemplateContainer extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The local ID of the template in the parent UXML file (Read Only).
            */
            public get templateId(): string;
            /** 
            Stores the template asset reference, if the generated element is cloned from a VisualTreeAsset as a
            Template declaration inside another VisualTreeAsset.
            */
            public get templateSource(): UnityEngine.UIElements.VisualTreeAsset;
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            public constructor ()
            public constructor ($templateId: string)
        }
        /** 
        Global configuration options for UI Toolkit input.
        */
        class UIToolkitInputConfiguration extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Use this method to activate one of the two input backends available for UIToolkit events at runtime.
            The new Input System compatible backend allows the Input System package to send its input to UI Toolkit
            directly, removing the need for an UnityEngine.EventSystems.EventSystem in the user scene,
            and will automatically fall back to Input Manager input if the Input System package input isn't enabled in
            the Player Settings active input handling.
            Alternatively, use the legacy backend to always rely on Input Manager input only. In that case,
            if the Input Manager is not enabled as an active input handler, UI Toolkit runtime events will not work.
            * @param $backend 
            The input backend to be used as the source of input for UI Toolkit events at runtime.
            */
            public static SetRuntimeInputBackend ($backend: UnityEngine.UIElements.UIToolkitInputBackendOption) : void
        }
        /** 
        Input backend options for UI Toolkit events at runtime.
        */
        enum UIToolkitInputBackendOption
        { Default = 0, InputSystemCompatibleBackend = 0, LegacyBackend = 1 }
        /** 
        UQuery is a set of extension methods allowing you to select individual or collection of visualElements inside a complex hierarchy.
        See UQuery for further information.
        */
        class UQuery extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class UQueryState$1<T> extends System.ValueType implements System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable, System.IEquatable$1<UnityEngine.UIElements.UQueryState$1<T>>
        {
            protected [__keep_incompatibility]: never;
            public RebuildOn ($element: UnityEngine.UIElements.VisualElement) : UnityEngine.UIElements.UQueryState$1<T>
            public First () : T
            public Last () : T
            public ToList ($results: System.Collections.Generic.List$1<T>) : void
            public ToList () : System.Collections.Generic.List$1<T>
            public AtIndex ($index: number) : T
            public ForEach ($funcCall: System.Action$1<T>) : void
            public GetEnumerator () : UnityEngine.UIElements.UQueryState$1.Enumerator<T>
            public Equals ($other: UnityEngine.UIElements.UQueryState$1<T>) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($state1: any, $state2: any) : any
            public static op_Inequality ($state1: any, $state2: any) : any
            public [Symbol.iterator]() : IterableIterator<T>
        }
        class UQueryBuilder$1<T> extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.UQueryBuilder$1<T>>
        {
            protected [__keep_incompatibility]: never;
            public Class ($classname: string) : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Name ($id: string) : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Where ($selectorPredicate: System.Func$2<T, boolean>) : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Active () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public NotActive () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Visible () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public NotVisible () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Hovered () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public NotHovered () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Checked () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public NotChecked () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Enabled () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public NotEnabled () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Focused () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public NotFocused () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Build () : UnityEngine.UIElements.UQueryState$1<T>
            public static op_Implicit ($s: any) : any
            public static op_Equality ($builder1: any, $builder2: any) : any
            public static op_Inequality ($builder1: any, $builder2: any) : any
            public First () : T
            public Last () : T
            public ToList () : System.Collections.Generic.List$1<T>
            public ToList ($results: System.Collections.Generic.List$1<T>) : void
            public AtIndex ($index: number) : T
            public ForEach ($funcCall: System.Action$1<T>) : void
            public Equals ($other: UnityEngine.UIElements.UQueryBuilder$1<T>) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($visualElement: UnityEngine.UIElements.VisualElement)
        }
        /** 
        UQuery is a set of extension methods allowing you to select individual or collection of visualElements inside a complex hierarchy.
        */
        class UQueryExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Convenience overload, shorthand for UQueryExtensions.Query|Query().UQueryBuilder_1.Build|Build().UQueryBuilder_1.First|First()
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $classes If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns The first element matching all the criteria, or null if none was found. 
            */
            public static Q ($e: UnityEngine.UIElements.VisualElement, $name?: string, ...classes: string[]) : UnityEngine.UIElements.VisualElement
            /** 
            Convenience overload, shorthand for UQueryExtensions.Query|Query().UQueryBuilder_1.Build|Build().UQueryBuilder_1.First|First()
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $className If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns The first element matching all the criteria, or null if none was found. 
            */
            public static Q ($e: UnityEngine.UIElements.VisualElement, $name?: string, $className?: string) : UnityEngine.UIElements.VisualElement
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $classes If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            public static Query ($e: UnityEngine.UIElements.VisualElement, $name?: string, ...classes: string[]) : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $className If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            public static Query ($e: UnityEngine.UIElements.VisualElement, $name?: string, $className?: string) : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            public static Query ($e: UnityEngine.UIElements.VisualElement) : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>
        }
        /** 
        Defines UxmlTraits for the UXML root element.
        */
        class UxmlRootElementTraits extends UnityEngine.UIElements.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns an enumerable containing UxmlChildElementDescription(typeof(VisualElement)), since the root element can contain VisualElements.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
        }
        class BaseUxmlFactory$2<TCreatedType, TTraits> extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class UxmlFactory$2<TCreatedType, TTraits> extends UnityEngine.UIElements.BaseUxmlFactory$2<TCreatedType, TTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
        }
        interface IBaseUxmlFactory
        {
        }
        interface IUxmlFactory extends UnityEngine.UIElements.IBaseUxmlFactory
        {
        }
        /** 
        Factory for the root UXML element.
        */
        class UxmlRootElementFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlRootElementTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns "UXML".
            */
            public get uxmlName(): string;
            /** 
            Returns the qualified name for this element.
            */
            public get uxmlQualifiedName(): string;
            /** 
            Returns the empty string, as the root element can not appear anywhere else bit at the root of the document.
            */
            public get substituteForTypeName(): string;
            /** 
            Returns the empty string, as the root element can not appear anywhere else bit at the root of the document.
            */
            public get substituteForTypeNamespace(): string;
            /** 
            Returns the empty string, as the root element can not appear anywhere else bit at the root of the document.
            */
            public get substituteForTypeQualifiedName(): string;
            public constructor ()
        }
        /** 
        Describe an allowed child element for an element.
        */
        class UxmlChildElementDescription extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the allowed child element.
            */
            public get elementName(): string;
            /** 
            The namespace name of the allowed child element.
            */
            public get elementNamespace(): string;
            public constructor ($t: System.Type)
        }
        /** 
        Defines UxmlTraits for the Style tag.
        */
        class UxmlStyleTraits extends UnityEngine.UIElements.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
        }
        /** 
        Factory for the root Style element.
        */
        class UxmlStyleFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlStyleTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public get uxmlName(): string;
            public get uxmlQualifiedName(): string;
            public get substituteForTypeName(): string;
            public get substituteForTypeNamespace(): string;
            public get substituteForTypeQualifiedName(): string;
            public constructor ()
        }
        /** 
        Defines UxmlTraits for the Template tag.
        */
        class UxmlTemplateTraits extends UnityEngine.UIElements.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
        }
        /** 
        Factory for the root Template element.
        */
        class UxmlTemplateFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlTemplateTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public get uxmlName(): string;
            public get uxmlQualifiedName(): string;
            public get substituteForTypeName(): string;
            public get substituteForTypeNamespace(): string;
            public get substituteForTypeQualifiedName(): string;
            public constructor ()
        }
        /** 
        Defines UxmlTraits for the AttributeOverrides tag.
        */
        class UxmlAttributeOverridesTraits extends UnityEngine.UIElements.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
        }
        /** 
        Factory for the root AttributeOverrides element.
        */
        class UxmlAttributeOverridesFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlAttributeOverridesTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public get uxmlName(): string;
            public get uxmlQualifiedName(): string;
            public get substituteForTypeName(): string;
            public get substituteForTypeNamespace(): string;
            public get substituteForTypeQualifiedName(): string;
            public constructor ()
        }
        class UxmlAssetAttributeDescription$1<T> extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<T> implements UnityEngine.UIElements.IUxmlAssetAttributeDescription
        {
            protected [__keep_incompatibility]: never;
            public get defaultValueAsString(): string;
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<T>) : boolean
            public constructor ()
        }
        interface IUxmlAssetAttributeDescription
        {
        }
        /** 
        Base class to restricts the value of an attribute.
        */
        class UxmlTypeRestriction extends System.Object implements System.IEquatable$1<UnityEngine.UIElements.UxmlTypeRestriction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Indicates whether the current UxmlTypeRestriction object is equal to another object of the same type.
            * @param $other The object to compare with.
            * @returns True if the otheer object is equal to this one. 
            */
            public Equals ($other: UnityEngine.UIElements.UxmlTypeRestriction) : boolean
        }
        /** 
        Describes a UXML string attribute.
        */
        class UxmlStringAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<string>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<string>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML float attribute.
        */
        class UxmlFloatAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<number>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML double attribute.
        */
        class UxmlDoubleAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<number>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML int attribute.
        */
        class UxmlIntAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<number>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML uint attribute.
        */
        class UxmlUnsignedIntAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<number>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML ulong attribute.
        */
        class UxmlUnsignedLongAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<bigint>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<bigint>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML long attribute.
        */
        class UxmlLongAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<bigint>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<bigint>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML bool attribute.
        */
        class UxmlBoolAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<boolean>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<boolean>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML attribute representing a Color as a string.
        */
        class UxmlColorAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<UnityEngine.Color>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<UnityEngine.Color>) : boolean
            public constructor ()
        }
        class UxmlTypeAttributeDescription$1<TBase> extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<System.Type>
        {
            protected [__keep_incompatibility]: never;
            public get defaultValueAsString(): string;
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<System.Type>) : boolean
            public constructor ()
        }
        class UxmlEnumAttributeDescription$1<T> extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<T>
        {
            protected [__keep_incompatibility]: never;
            public get defaultValueAsString(): string;
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<T>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML Hash128 attribute.
        */
        class UxmlHash128AttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<UnityEngine.Hash128>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<UnityEngine.Hash128>) : boolean
            public constructor ()
        }
        /** 
        Declares a custom control.
        */
        class UxmlElementAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            Provides a custom name for an element.
            */
            public name : string
            public constructor ()
            public constructor ($uxmlName: string)
        }
        /** 
        Declares that a field or property is associated with a UXML attribute.
        */
        class UxmlAttributeAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            Provides a custom UXML name to the attribute.
            */
            public name : string
            /** 
            Provides support for obsolete UXML attribute names.
            */
            public obsoleteNames : System.Array$1<string>
            public constructor ()
            public constructor ($name: string)
            public constructor ($name: string, ...obsoleteNames: string[])
        }
        /** 
        Provides information about the expected type when applied to a Type field or property that has the UxmlAttributeAttribute attribute.
        */
        class UxmlTypeReferenceAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            The base type that the value inherits from.
            */
            public baseType : System.Type
            public constructor ()
            public constructor ($baseType: System.Type)
        }
        /** 
        Declares that a class can be instantiated from UXML and contain UXML attributes.
        */
        class UxmlObjectAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Declares that a field or property is associated with nested UXML objects.
        */
        class UxmlObjectReferenceAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the nested UXML element that the UXML Objects are serialized to. Note: A null or empty value will result in the objects being serialized into the root.
            */
            public name : string
            /** 
            In UI Builder, when adding a UXML Object to a field that has multiple derived types,
            a dropdown list appears with a selection of available types that can be added to the field. By default,
            this list comprises all types that inherit from the UXML object type. You can use a parameter
            to specify a list of accepted types to be displayed, rather than showing all available types
            */
            public types : System.Array$1<System.Type>
            public constructor ()
            public constructor ($uxmlName: string)
            public constructor ($uxmlName: string, ...acceptedTypes: System.Type[])
        }
        /** 
        This is used by the code generator when a custom control is using the UxmlElementAttribute.
        */
        class UxmlSerializedDataUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            This is used by the code generator when a custom control is using the UxmlElementAttribute.
            */
            public static CopySerialized ($value: any) : any
        }
        /** 
        Restricts the value of an attribute to match a regular expression.
        */
        class UxmlValueMatches extends UnityEngine.UIElements.UxmlTypeRestriction implements System.IEquatable$1<UnityEngine.UIElements.UxmlTypeRestriction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The regular expression that should be matched by the value.
            */
            public get regex(): string;
            public set regex(value: string);
            public constructor ()
        }
        /** 
        Restricts the value of an attribute to be within the specified bounds.
        */
        class UxmlValueBounds extends UnityEngine.UIElements.UxmlTypeRestriction implements System.IEquatable$1<UnityEngine.UIElements.UxmlTypeRestriction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The minimum value for the attribute.
            */
            public get min(): string;
            public set min(value: string);
            /** 
            The maximum value for the attribute.
            */
            public get max(): string;
            public set max(value: string);
            /** 
            True if the bounds exclude min.
            */
            public get excludeMin(): boolean;
            public set excludeMin(value: boolean);
            /** 
            True if the bounds exclude max.
            */
            public get excludeMax(): boolean;
            public set excludeMax(value: boolean);
            public constructor ()
        }
        /** 
        Restricts the value of an attribute to be taken from a list of values.
        */
        class UxmlEnumeration extends UnityEngine.UIElements.UxmlTypeRestriction implements System.IEquatable$1<UnityEngine.UIElements.UxmlTypeRestriction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The list of values the attribute can take.
            */
            public get values(): System.Collections.Generic.IEnumerable$1<string>;
            public set values(value: System.Collections.Generic.IEnumerable$1<string>);
            public constructor ()
        }
        /** 
        VisualElementExtensions is a set of extension methods useful for VisualElement.
        */
        class VisualElementExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Aligns a VisualElement's left, top, right and bottom edges with the corresponding edges of its parent.
            * @param $elem The element to be aligned with its parent
            */
            public static StretchToParentSize ($elem: UnityEngine.UIElements.VisualElement) : void
            /** 
            Aligns a VisualElement's left and right edges with the corresponding edges of its parent.
            * @param $elem The element to be aligned with its parent
            */
            public static StretchToParentWidth ($elem: UnityEngine.UIElements.VisualElement) : void
            /** 
            Add a manipulator associated to a VisualElement.
            * @param $ele VisualElement associated to the manipulator.
            * @param $manipulator Manipulator to be added to the VisualElement.
            */
            public static AddManipulator ($ele: UnityEngine.UIElements.VisualElement, $manipulator: UnityEngine.UIElements.IManipulator) : void
            /** 
            Remove a manipulator associated to a VisualElement.
            * @param $ele VisualElement associated to the manipulator.
            * @param $manipulator Manipulator to be removed from the VisualElement.
            */
            public static RemoveManipulator ($ele: UnityEngine.UIElements.VisualElement, $manipulator: UnityEngine.UIElements.IManipulator) : void
            /** 
            Transforms a point from the world space to the local space of the element.
            * @param $ele The element to use as a reference for the local space.
            * @param $p The point to transform, in world space.
            * @returns A point in the local space of the element. 
            */
            public static WorldToLocal ($ele: UnityEngine.UIElements.VisualElement, $p: UnityEngine.Vector2) : UnityEngine.Vector2
            /** 
            Transforms a point from the local space of the element to the world space.
            * @param $ele The element to use as a reference for the local space.
            * @param $p The point to transform, in local space.
            * @returns A point in the world space. 
            */
            public static LocalToWorld ($ele: UnityEngine.UIElements.VisualElement, $p: UnityEngine.Vector2) : UnityEngine.Vector2
            /** 
            Transforms a rectangle from the world space to the local space of the element.
            * @param $ele The element to use as a reference for the local space.
            * @param $r The rectangle to transform, in world space.
            * @returns A rectangle in the local space of the element. 
            */
            public static WorldToLocal ($ele: UnityEngine.UIElements.VisualElement, $r: UnityEngine.Rect) : UnityEngine.Rect
            /** 
            Transforms a rectangle from the local space of the element to the world space.
            * @param $ele The element to use as a reference for the local space.
            * @param $r The rectangle to transform, in local space.
            * @returns A rectangle in the world space. 
            */
            public static LocalToWorld ($ele: UnityEngine.UIElements.VisualElement, $r: UnityEngine.Rect) : UnityEngine.Rect
            /** 
            Transforms a point from the local space of an element to the local space of another element.
            * @param $src The element to use as a reference as the source local space.
            * @param $dest The element to use as a reference as the destination local space.
            * @param $point The point to transform, in the local space of the source element.
            * @returns A point in the local space of destination element. 
            */
            public static ChangeCoordinatesTo ($src: UnityEngine.UIElements.VisualElement, $dest: UnityEngine.UIElements.VisualElement, $point: UnityEngine.Vector2) : UnityEngine.Vector2
            /** 
            Transforms a rectangle from the local space of an element to the local space of another element.
            * @param $src The element to use as a reference as the source local space.
            * @param $dest The element to use as a reference as the destination local space.
            * @param $rect The rectangle to transform, in the local space of the source element.
            * @returns A rectangle in the local space of destination element. 
            */
            public static ChangeCoordinatesTo ($src: UnityEngine.UIElements.VisualElement, $dest: UnityEngine.UIElements.VisualElement, $rect: UnityEngine.Rect) : UnityEngine.Rect
        }
        class VisualElementDebugExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static DebugIncrementVersionChange ($ve: UnityEngine.UIElements.VisualElement, $changeType: UnityEngine.UIElements.VersionChangeType) : void
        }
        /** 
        Options used as arguments for EventInterestAttribute when the affected method treats events in a general,
        non type-specific manner.
        */
        enum EventInterestOptions
        { Inherit = 0, AllEventTypes = -1 }
        /** 
        Optional attribute on overrides of CallbackEventHandler.HandleEventBubbleUp.
        */
        class EventInterestAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor (...eventTypes: System.Type[])
            public constructor ($interests: UnityEngine.UIElements.EventInterestOptions)
        }
        /** 
        Define focus change directions for the VisualElementFocusRing.
        */
        class VisualElementFocusChangeDirection extends UnityEngine.UIElements.FocusChangeDirection implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The focus is moving to the left.
            */
            public static get left(): UnityEngine.UIElements.FocusChangeDirection;
            /** 
            The focus is moving to the right.
            */
            public static get right(): UnityEngine.UIElements.FocusChangeDirection;
        }
        /** 
        Implementation of a linear focus ring. Elements are sorted according to their focusIndex.
        */
        class VisualElementFocusRing extends System.Object implements UnityEngine.UIElements.IFocusRing
        {
            protected [__keep_incompatibility]: never;
            /** 
            The focus order for elements having 0 has a focusIndex.
            */
            public get defaultFocusOrder(): UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder;
            public set defaultFocusOrder(value: UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder);
            /** 
            Get the direction of the focus change for the given event. For example, when the Tab key is pressed, focus should be given to the element to the right in the focus ring.
            */
            public GetFocusChangeDirection ($currentFocusable: UnityEngine.UIElements.Focusable, $e: UnityEngine.UIElements.EventBase) : UnityEngine.UIElements.FocusChangeDirection
            /** 
            Get the next element in the given direction.
            */
            public GetNextFocusable ($currentFocusable: UnityEngine.UIElements.Focusable, $direction: UnityEngine.UIElements.FocusChangeDirection) : UnityEngine.UIElements.Focusable
            public constructor ($root: UnityEngine.UIElements.VisualElement, $dfo?: UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder)
        }
        interface IVisualElementScheduledItem
        {
            /** 
            Returns the VisualElement this object is associated with.
            */
            element : UnityEngine.UIElements.VisualElement
            /** 
            Will be true when this item is scheduled. Note that an item's callback will only be executed when it's VisualElement is attached to a panel.
            */
            isActive : boolean
            /** 
            If not already active, will schedule this item on its VisualElement's scheduler.
            */
            Resume () : void
            /** 
            Removes this item from its VisualElement's scheduler.
            */
            Pause () : void
            /** 
            Cancels any previously scheduled execution of this item and re-schedules the item.
            * @param $delayMs Minimum time in milliseconds before this item will be executed.
            */
            ExecuteLater ($delayMs: bigint) : void
            /** 
            Adds a delay to the first invokation.
            * @param $delayMs The minimum number of milliseconds after activation where this item's action will be executed.
            * @returns This ScheduledItem. 
            */
            StartingIn ($delayMs: bigint) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Repeats this action after a specified time.
            * @param $intervalMs Minimum amount of time in milliseconds between each action execution.
            * @returns This ScheduledItem. 
            */
            Every ($intervalMs: bigint) : UnityEngine.UIElements.IVisualElementScheduledItem
            Until ($stopCondition: System.Func$1<boolean>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            After specified duration, the item will be automatically unscheduled.
            * @param $durationMs The total duration in milliseconds where this item will be active.
            * @returns This ScheduledItem. 
            */
            ForDuration ($durationMs: bigint) : UnityEngine.UIElements.IVisualElementScheduledItem
        }
        class InputWrapper extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            public get compositionString(): string;
            public get imeCompositionMode(): UnityEngine.IMECompositionMode;
            public set imeCompositionMode(value: UnityEngine.IMECompositionMode);
            public get compositionCursorPos(): UnityEngine.Vector2;
            public set compositionCursorPos(value: UnityEngine.Vector2);
            public get mousePresent(): boolean;
            public get mousePosition(): UnityEngine.Vector2;
            public get mouseScrollDelta(): UnityEngine.Vector2;
            public get touchSupported(): boolean;
            public get touchCount(): number;
            public GetMouseButtonDown ($button: number) : boolean
            public GetMouseButtonUp ($button: number) : boolean
            public GetMouseButton ($button: number) : boolean
            public GetTouch ($index: number) : UnityEngine.Touch
            public GetAxisRaw ($axisName: string) : number
            public GetButtonDown ($buttonName: string) : boolean
            public constructor ()
        }
    }
    namespace UnityEngine {
        /** Scaling mode to draw textures with.
        */
        enum ScaleMode
        { StretchToFill = 0, ScaleAndCrop = 1, ScaleToFit = 2 }
        /** Types of modifier key that can be active during a keystroke event.
        */
        enum EventModifiers
        { None = 0, Shift = 1, Control = 2, Alt = 4, Command = 8, Numeric = 16, CapsLock = 32, FunctionKey = 64 }
        /** A UnityGUI event.
        */
        class Event extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get rawType(): UnityEngine.EventType;
            /** The mouse position.
            */
            public get mousePosition(): UnityEngine.Vector2;
            public set mousePosition(value: UnityEngine.Vector2);
            /** The relative movement of the mouse compared to last event.
            */
            public get delta(): UnityEngine.Vector2;
            public set delta(value: UnityEngine.Vector2);
            /** The type of pointer that created this event (for example, mouse, touch screen, pen).
            */
            public get pointerType(): UnityEngine.PointerType;
            public set pointerType(value: UnityEngine.PointerType);
            /** Which mouse button was pressed.
            */
            public get button(): number;
            public set button(value: number);
            /** Which modifier keys are held down.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            public set modifiers(value: UnityEngine.EventModifiers);
            /** How hard pen pressure is applied, normalized between 0 (no pressure) and 1 (maximum pressure).
            */
            public get pressure(): number;
            public set pressure(value: number);
            /** Specifies the rotation of the pen around its axis, expressed in radians. The default value is 0.
            */
            public get twist(): number;
            public set twist(value: number);
            /** Specifies the angle of the pen relative to the X and Y axes, expressed in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            public set tilt(value: UnityEngine.Vector2);
            /** Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            */
            public get penStatus(): UnityEngine.PenStatus;
            public set penStatus(value: UnityEngine.PenStatus);
            /** How many consecutive mouse clicks have we received.
            */
            public get clickCount(): number;
            public set clickCount(value: number);
            /** The character typed.
            */
            public get character(): number;
            public set character(value: number);
            /** The raw key code for keyboard events.
            */
            public get keyCode(): UnityEngine.KeyCode;
            public set keyCode(value: UnityEngine.KeyCode);
            /** Index of display that the event belongs to.
            */
            public get displayIndex(): number;
            public set displayIndex(value: number);
            /** The type of event.
            */
            public get type(): UnityEngine.EventType;
            public set type(value: UnityEngine.EventType);
            /** The name of an ExecuteCommand or ValidateCommand Event.
            */
            public get commandName(): string;
            public set commandName(value: string);
            /** Is Shift held down? (Read Only)
            */
            public get shift(): boolean;
            public set shift(value: boolean);
            /** Is Control key held down? (Read Only)
            */
            public get control(): boolean;
            public set control(value: boolean);
            /** Is Alt/Option key held down? (Read Only)
            */
            public get alt(): boolean;
            public set alt(value: boolean);
            /** Is Command/Windows key held down? (Read Only)
            */
            public get command(): boolean;
            public set command(value: boolean);
            /** Is Caps Lock on? (Read Only)
            */
            public get capsLock(): boolean;
            public set capsLock(value: boolean);
            /** Is the current keypress on the numeric keyboard? (Read Only)
            */
            public get numeric(): boolean;
            public set numeric(value: boolean);
            /** Is the current keypress a function key? (Read Only)
            */
            public get functionKey(): boolean;
            /** The current event that's being processed right now.
            */
            public static get current(): UnityEngine.Event;
            public static set current(value: UnityEngine.Event);
            /** Is this event a keyboard event? (Read Only)
            */
            public get isKey(): boolean;
            /** Is this event a mouse event? (Read Only)
            */
            public get isMouse(): boolean;
            public get isScrollWheel(): boolean;
            /** Get a filtered event type for a given control ID.
            * @param $controlID The ID of the control you are querying from.
            */
            public GetTypeForControl ($controlID: number) : UnityEngine.EventType
            /** Get the next queued [Event] from the event system.
            * @param $outEvent Next Event.
            */
            public static PopEvent ($outEvent: UnityEngine.Event) : boolean
            /** Returns the current number of events that are stored in the event queue.
            * @returns Current number of events currently in the event queue. 
            */
            public static GetEventCount () : number
            /** Create a keyboard event.
            * @param $key A string representing keyboard keys and modifiers.
            * @returns A new Event with EventType.KeyDown and the requested KeyCode and optional EventModifier. 
            */
            public static KeyboardEvent ($key: string) : UnityEngine.Event
            /** Use this event.
            */
            public Use () : void
            public constructor ()
            public constructor ($displayIndex: number)
            public constructor ($other: UnityEngine.Event)
        }
        /** Options for specifying the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed. You can combine states using bitwise OR operators.
        */
        enum PenStatus
        { None = 0, Contact = 1, Barrel = 2, Inverted = 4, Eraser = 8 }
        /** Structure describing the status of a finger touching the screen.
        */
        class Touch extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The unique index for the touch.
            */
            public get fingerId(): number;
            public set fingerId(value: number);
            /** The position of the touch in screen space pixel coordinates.
            */
            public get position(): UnityEngine.Vector2;
            public set position(value: UnityEngine.Vector2);
            /** The first position of the touch contact in screen space pixel coordinates.
            */
            public get rawPosition(): UnityEngine.Vector2;
            public set rawPosition(value: UnityEngine.Vector2);
            /** The position delta since last change in pixel coordinates.
            */
            public get deltaPosition(): UnityEngine.Vector2;
            public set deltaPosition(value: UnityEngine.Vector2);
            /** Amount of time that has passed since the last recorded change in Touch values.
            */
            public get deltaTime(): number;
            public set deltaTime(value: number);
            /** Number of taps.
            */
            public get tapCount(): number;
            public set tapCount(value: number);
            /** Describes the phase of the touch.
            */
            public get phase(): UnityEngine.TouchPhase;
            public set phase(value: UnityEngine.TouchPhase);
            /** The current amount of pressure being applied to a touch.  1.0f is considered to be the pressure of an average touch.  If Input.touchPressureSupported returns false, the value of this property will always be 1.0f.
            */
            public get pressure(): number;
            public set pressure(value: number);
            /** The maximum possible pressure value for a platform.  If Input.touchPressureSupported returns false, the value of this property will always be 1.0f.
            */
            public get maximumPossiblePressure(): number;
            public set maximumPossiblePressure(value: number);
            /** A value that indicates whether a touch was of Direct, Indirect (or remote), or Stylus type.
            */
            public get type(): UnityEngine.TouchType;
            public set type(value: UnityEngine.TouchType);
            /** Value of 0 radians indicates that the stylus is parallel to the surface, pi/2 indicates that it is perpendicular.
            */
            public get altitudeAngle(): number;
            public set altitudeAngle(value: number);
            /** Value of 0 radians indicates that the stylus is pointed along the x-axis of the device.
            */
            public get azimuthAngle(): number;
            public set azimuthAngle(value: number);
            /** An estimated value of the radius of a touch.  Add radiusVariance to get the maximum touch size, subtract it to get the minimum touch size.
            */
            public get radius(): number;
            public set radius(value: number);
            /** This value determines the accuracy of the touch radius. Add this value to the radius to get the maximum touch size, subtract it to get the minimum touch size.
            */
            public get radiusVariance(): number;
            public set radiusVariance(value: number);
        }
        /** Structure describing the status of a pen event.
        */
        class PenData extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Specifies the position of the pen.
            */
            public position : UnityEngine.Vector2
            /** Specifies the angle of the pen relative to the X and Y axes, expressed in radians.
            */
            public tilt : UnityEngine.Vector2
            /** Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            */
            public penStatus : UnityEngine.PenStatus
            /** Specifies the rotation of the pen around its axis, expressed in radians.
            */
            public twist : number
            /** How hard pen pressure is applied, normalized between 0 (no pressure) and 1 (maximum pressure).
            */
            public pressure : number
            /** Contact type of a pen event, can be pen up, pen down, or no contact.
            */
            public contactType : UnityEngine.PenEventType
            /** The position delta since last pointer event in pixel coordinates.
            */
            public deltaPos : UnityEngine.Vector2
        }
        /** Script interface for.
        */
        class Font extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The material used for the font display.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            public get fontNames(): System.Array$1<string>;
            public set fontNames(value: System.Array$1<string>);
            /** Is the font a dynamic font.
            */
            public get dynamic(): boolean;
            /** The ascent of the font.
            */
            public get ascent(): number;
            /** The default size of the font.
            */
            public get fontSize(): number;
            /** Access an array of all characters contained in the font texture.
            */
            public get characterInfo(): System.Array$1<UnityEngine.CharacterInfo>;
            public set characterInfo(value: System.Array$1<UnityEngine.CharacterInfo>);
            /** The line height of the font.
            */
            public get lineHeight(): number;
            public static add_textureRebuilt ($value: System.Action$1<UnityEngine.Font>) : void
            public static remove_textureRebuilt ($value: System.Action$1<UnityEngine.Font>) : void
            /** Creates a Font object which lets you render a font installed on the user machine.
            * @param $fontname The name of the OS font to use for this font object.
            * @param $size The default character size of the generated font.
            * @param $fontnames Am array of names of OS fonts to use for this font object. When rendering characters using this font object, the first font which is installed on the machine, which contains the requested character will be used.
            * @returns The generate Font object. 
            */
            public static CreateDynamicFontFromOSFont ($fontname: string, $size: number) : UnityEngine.Font
            /** Creates a Font object which lets you render a font installed on the user machine.
            * @param $fontname The name of the OS font to use for this font object.
            * @param $size The default character size of the generated font.
            * @param $fontnames Am array of names of OS fonts to use for this font object. When rendering characters using this font object, the first font which is installed on the machine, which contains the requested character will be used.
            * @returns The generate Font object. 
            */
            public static CreateDynamicFontFromOSFont ($fontnames: System.Array$1<string>, $size: number) : UnityEngine.Font
            /** Returns the maximum number of verts that the text generator may return for a given string.
            * @param $str Input string.
            */
            public static GetMaxVertsForString ($str: string) : number
            /** Does this font have a specific character?
            * @param $c The character to check for.
            * @returns Whether or not the font has the character specified. 
            */
            public HasCharacter ($c: number) : boolean
            /** Get names of fonts installed on the machine.
            * @returns An array of the names of all fonts installed on the machine. 
            */
            public static GetOSInstalledFontNames () : System.Array$1<string>
            /** Gets the file paths of the fonts that are installed on the operating system.
            * @returns An array of the file paths of all fonts installed on the machine. 
            */
            public static GetPathsToOSFonts () : System.Array$1<string>
            /** Get rendering info for a specific character.
            * @param $ch The character you need rendering information for.
            * @param $info Returns the CharacterInfo struct with the rendering information for the character (if available).
            * @param $size The size of the character (default value of zero will use font default size).
            * @param $style The style of the character.
            */
            public GetCharacterInfo ($ch: number, $info: $Ref<UnityEngine.CharacterInfo>, $size: number, $style: UnityEngine.FontStyle) : boolean
            /** Get rendering info for a specific character.
            * @param $ch The character you need rendering information for.
            * @param $info Returns the CharacterInfo struct with the rendering information for the character (if available).
            * @param $size The size of the character (default value of zero will use font default size).
            * @param $style The style of the character.
            */
            public GetCharacterInfo ($ch: number, $info: $Ref<UnityEngine.CharacterInfo>, $size: number) : boolean
            /** Get rendering info for a specific character.
            * @param $ch The character you need rendering information for.
            * @param $info Returns the CharacterInfo struct with the rendering information for the character (if available).
            * @param $size The size of the character (default value of zero will use font default size).
            * @param $style The style of the character.
            */
            public GetCharacterInfo ($ch: number, $info: $Ref<UnityEngine.CharacterInfo>) : boolean
            /** Request characters to be added to the font texture (dynamic fonts only).
            * @param $characters The characters which are needed to be in the font texture.
            * @param $size The size of the requested characters (the default value of zero will use the font's default size).
            * @param $style The style of the requested characters.
            */
            public RequestCharactersInTexture ($characters: string, $size: number, $style: UnityEngine.FontStyle) : void
            public RequestCharactersInTexture ($characters: string, $size: number) : void
            public RequestCharactersInTexture ($characters: string) : void
            public constructor ()
            public constructor ($name: string)
        }
        /** Font Style applied to GUI Texts, Text Meshes or GUIStyles.
        */
        enum FontStyle
        { Normal = 0, Bold = 1, Italic = 2, BoldAndItalic = 3 }
        /** Where the anchor of the text is placed.
        */
        enum TextAnchor
        { UpperLeft = 0, UpperCenter = 1, UpperRight = 2, MiddleLeft = 3, MiddleCenter = 4, MiddleRight = 5, LowerLeft = 6, LowerCenter = 7, LowerRight = 8 }
        /** Controls IME input.
        */
        enum IMECompositionMode
        { Auto = 0, On = 1, Off = 2 }
        /** Types of UnityGUI input and processing events.
        */
        enum EventType
        { MouseDown = 0, MouseUp = 1, MouseMove = 2, MouseDrag = 3, KeyDown = 4, KeyUp = 5, ScrollWheel = 6, Repaint = 7, Layout = 8, DragUpdated = 9, DragPerform = 10, DragExited = 15, Ignore = 11, Used = 12, ValidateCommand = 13, ExecuteCommand = 14, ContextClick = 16, MouseEnterWindow = 20, MouseLeaveWindow = 21, TouchDown = 30, TouchUp = 31, TouchMove = 32, TouchEnter = 33, TouchLeave = 34, TouchStationary = 35, mouseDown = 0, mouseUp = 1, mouseMove = 2, mouseDrag = 3, keyDown = 4, keyUp = 5, scrollWheel = 6, repaint = 7, layout = 8, dragUpdated = 9, dragPerform = 10, ignore = 11, used = 12 }
        /** Pointer types.
        */
        enum PointerType
        { Mouse = 0, Touch = 1, Pen = 2 }
        /** The GUI class is the interface for Unity's GUI with manual positioning.
        */
        class GUI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Applies a global tint to the GUI. The tint affects backgrounds and text colors.
            */
            public static get color(): UnityEngine.Color;
            public static set color(value: UnityEngine.Color);
            /** Global tinting color for all background elements rendered by the GUI.
            */
            public static get backgroundColor(): UnityEngine.Color;
            public static set backgroundColor(value: UnityEngine.Color);
            /** Tinting color for all text rendered by the GUI.
            */
            public static get contentColor(): UnityEngine.Color;
            public static set contentColor(value: UnityEngine.Color);
            /** Returns true if any controls changed the value of the input data.
            */
            public static get changed(): boolean;
            public static set changed(value: boolean);
            /** Is the GUI enabled?
            */
            public static get enabled(): boolean;
            public static set enabled(value: boolean);
            /** The sorting depth of the currently executing GUI behaviour.
            */
            public static get depth(): number;
            public static set depth(value: number);
            /** The global skin to use.
            */
            public static get skin(): UnityEngine.GUISkin;
            public static set skin(value: UnityEngine.GUISkin);
            /** The GUI transform matrix.
            */
            public static get matrix(): UnityEngine.Matrix4x4;
            public static set matrix(value: UnityEngine.Matrix4x4);
            /** The tooltip of the control the mouse is currently over, or which has keyboard focus. (Read Only).
            */
            public static get tooltip(): string;
            public static set tooltip(value: string);
            /** Set the name of the next control.
            */
            public static SetNextControlName ($name: string) : void
            /** Get the name of named control that has focus.
            */
            public static GetNameOfFocusedControl () : string
            /** Move keyboard focus to a named control.
            * @param $name Name set using SetNextControlName.
            */
            public static FocusControl ($name: string) : void
            /** Make a window draggable.
            * @param $position The part of the window that can be dragged. This is clipped to the actual window.
            */
            public static DragWindow ($position: UnityEngine.Rect) : void
            /** Bring a specific window to front of the floating windows.
            * @param $windowID The identifier used when you created the window in the Window call.
            */
            public static BringWindowToFront ($windowID: number) : void
            /** Bring a specific window to back of the floating windows.
            * @param $windowID The identifier used when you created the window in the Window call.
            */
            public static BringWindowToBack ($windowID: number) : void
            /** Make a window become the active window.
            * @param $windowID The identifier used when you created the window in the Window call.
            */
            public static FocusWindow ($windowID: number) : void
            /** Remove focus from all windows.
            */
            public static UnfocusWindow () : void
            /** Make a text or texture label on screen.
            * @param $position Rectangle on the screen to use for the label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Rect, $text: string) : void
            /** Make a text or texture label on screen.
            * @param $position Rectangle on the screen to use for the label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Make a text or texture label on screen.
            * @param $position Rectangle on the screen to use for the label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent) : void
            /** Make a text or texture label on screen.
            * @param $position Rectangle on the screen to use for the label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Make a text or texture label on screen.
            * @param $position Rectangle on the screen to use for the label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : void
            /** Make a text or texture label on screen.
            * @param $position Rectangle on the screen to use for the label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            /** Draw a texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            */
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Draw a texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            */
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode) : void
            /** Draw a texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            */
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean) : void
            /** Draw a texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            */
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean, $imageAspect: number) : void
            /** Draws a border with rounded corners within a rectangle. The texture is used to pattern the border.  Note that this method only works on shader model 2.5 and above.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            * @param $color A tint color to apply on the texture.
            * @param $borderWidth The width of the border. If 0, the full texture is drawn.
            * @param $borderWidths The width of the borders (left, top, right and bottom). If Vector4.zero, the full texture is drawn.
            * @param $borderRadius The radius for rounded corners. If 0, corners will not be rounded.
            * @param $borderRadiuses The radiuses for rounded corners (top-left, top-right, bottom-right and bottom-left). If Vector4.zero, corners will not be rounded.
            */
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean, $imageAspect: number, $color: UnityEngine.Color, $borderWidth: number, $borderRadius: number) : void
            /** Draws a border with rounded corners within a rectangle. The texture is used to pattern the border.  Note that this method only works on shader model 2.5 and above.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            * @param $color A tint color to apply on the texture.
            * @param $borderWidth The width of the border. If 0, the full texture is drawn.
            * @param $borderWidths The width of the borders (left, top, right and bottom). If Vector4.zero, the full texture is drawn.
            * @param $borderRadius The radius for rounded corners. If 0, corners will not be rounded.
            * @param $borderRadiuses The radiuses for rounded corners (top-left, top-right, bottom-right and bottom-left). If Vector4.zero, corners will not be rounded.
            */
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean, $imageAspect: number, $color: UnityEngine.Color, $borderWidths: UnityEngine.Vector4, $borderRadius: number) : void
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean, $imageAspect: number, $color: UnityEngine.Color, $borderWidths: UnityEngine.Vector4, $borderRadiuses: UnityEngine.Vector4) : void
            /** Draw a texture within a rectangle with the given texture coordinates.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $texCoords How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to alpha blend the image on to the display (the default). If false, the picture is drawn on to the display.
            */
            public static DrawTextureWithTexCoords ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $texCoords: UnityEngine.Rect) : void
            /** Draw a texture within a rectangle with the given texture coordinates.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $texCoords How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to alpha blend the image on to the display (the default). If false, the picture is drawn on to the display.
            */
            public static DrawTextureWithTexCoords ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $texCoords: UnityEngine.Rect, $alphaBlend: boolean) : void
            /** Create a Box on the GUI Layer.
            * @param $position Rectangle on the screen to use for the box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box ($position: UnityEngine.Rect, $text: string) : void
            /** Create a Box on the GUI Layer.
            * @param $position Rectangle on the screen to use for the box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Create a Box on the GUI Layer.
            * @param $position Rectangle on the screen to use for the box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent) : void
            /** Create a Box on the GUI Layer.
            * @param $position Rectangle on the screen to use for the box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Create a Box on the GUI Layer.
            * @param $position Rectangle on the screen to use for the box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : void
            /** Create a Box on the GUI Layer.
            * @param $position Rectangle on the screen to use for the box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button ($position: UnityEngine.Rect, $text: string) : boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent) : boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : boolean
            /** Make a button that is active as long as the user holds it down.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton ($position: UnityEngine.Rect, $text: string) : boolean
            /** Make a button that is active as long as the user holds it down.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : boolean
            /** Make a button that is active as long as the user holds it down.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent) : boolean
            /** Make a button that is active as long as the user holds it down.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : boolean
            /** Make a button that is active as long as the user holds it down.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : boolean
            /** Make a button that is active as long as the user holds it down.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : boolean
            /** Make a single-line text field where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextField ($position: UnityEngine.Rect, $text: string) : string
            /** Make a single-line text field where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextField ($position: UnityEngine.Rect, $text: string, $maxLength: number) : string
            /** Make a single-line text field where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextField ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : string
            /** Make a single-line text field where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextField ($position: UnityEngine.Rect, $text: string, $maxLength: number, $style: UnityEngine.GUIStyle) : string
            /** Make a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $password: string, $maskChar: number) : string
            /** Make a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $password: string, $maskChar: number, $maxLength: number) : string
            /** Make a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $password: string, $maskChar: number, $style: UnityEngine.GUIStyle) : string
            /** Make a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $password: string, $maskChar: number, $maxLength: number, $style: UnityEngine.GUIStyle) : string
            /** Make a Multi-line text area where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextArea ($position: UnityEngine.Rect, $text: string) : string
            /** Make a Multi-line text area where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextArea ($position: UnityEngine.Rect, $text: string, $maxLength: number) : string
            /** Make a Multi-line text area where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextArea ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : string
            /** Make a Multi-line text area where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextArea ($position: UnityEngine.Rect, $text: string, $maxLength: number, $style: UnityEngine.GUIStyle) : string
            /** Make an on/off toggle button.
            * @param $position Rectangle on the screen to use for the button.
            * @param $value Is this button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $text: string) : boolean
            /** Make an on/off toggle button.
            * @param $position Rectangle on the screen to use for the button.
            * @param $value Is this button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $image: UnityEngine.Texture) : boolean
            /** Make an on/off toggle button.
            * @param $position Rectangle on the screen to use for the button.
            * @param $value Is this button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $content: UnityEngine.GUIContent) : boolean
            /** Make an on/off toggle button.
            * @param $position Rectangle on the screen to use for the button.
            * @param $value Is this button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $text: string, $style: UnityEngine.GUIStyle) : boolean
            /** Make an on/off toggle button.
            * @param $position Rectangle on the screen to use for the button.
            * @param $value Is this button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : boolean
            /** Make an on/off toggle button.
            * @param $position Rectangle on the screen to use for the button.
            * @param $value Is this button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : boolean
            public static Toggle ($position: UnityEngine.Rect, $id: number, $value: boolean, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : boolean
            /** Make a toolbar.
            * @param $position Rectangle on the screen to use for the toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the toolbar buttons.
            * @param $images An array of textures on the toolbar buttons.
            * @param $contents An array of text, image and tooltips for the toolbar buttons.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $texts: System.Array$1<string>) : number
            /** Make a toolbar.
            * @param $position Rectangle on the screen to use for the toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the toolbar buttons.
            * @param $images An array of textures on the toolbar buttons.
            * @param $contents An array of text, image and tooltips for the toolbar buttons.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $images: System.Array$1<UnityEngine.Texture>) : number
            /** Make a toolbar.
            * @param $position Rectangle on the screen to use for the toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the toolbar buttons.
            * @param $images An array of textures on the toolbar buttons.
            * @param $contents An array of text, image and tooltips for the toolbar buttons.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $contents: System.Array$1<UnityEngine.GUIContent>) : number
            /** Make a toolbar.
            * @param $position Rectangle on the screen to use for the toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the toolbar buttons.
            * @param $images An array of textures on the toolbar buttons.
            * @param $contents An array of text, image and tooltips for the toolbar buttons.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $texts: System.Array$1<string>, $style: UnityEngine.GUIStyle) : number
            /** Make a toolbar.
            * @param $position Rectangle on the screen to use for the toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the toolbar buttons.
            * @param $images An array of textures on the toolbar buttons.
            * @param $contents An array of text, image and tooltips for the toolbar buttons.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $images: System.Array$1<UnityEngine.Texture>, $style: UnityEngine.GUIStyle) : number
            /** Make a toolbar.
            * @param $position Rectangle on the screen to use for the toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the toolbar buttons.
            * @param $images An array of textures on the toolbar buttons.
            * @param $contents An array of text, image and tooltips for the toolbar buttons.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle) : number
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize) : number
            /** Make a grid of buttons.
            * @param $position Rectangle on the screen to use for the grid.
            * @param $selected The index of the selected grid button.
            * @param $texts An array of strings to show on the grid buttons.
            * @param $images An array of textures on the grid buttons.
            * @param $contents An array of text, image and tooltips for the grid button.
            * @param $xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($position: UnityEngine.Rect, $selected: number, $texts: System.Array$1<string>, $xCount: number) : number
            /** Make a grid of buttons.
            * @param $position Rectangle on the screen to use for the grid.
            * @param $selected The index of the selected grid button.
            * @param $texts An array of strings to show on the grid buttons.
            * @param $images An array of textures on the grid buttons.
            * @param $contents An array of text, image and tooltips for the grid button.
            * @param $xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($position: UnityEngine.Rect, $selected: number, $images: System.Array$1<UnityEngine.Texture>, $xCount: number) : number
            /** Make a grid of buttons.
            * @param $position Rectangle on the screen to use for the grid.
            * @param $selected The index of the selected grid button.
            * @param $texts An array of strings to show on the grid buttons.
            * @param $images An array of textures on the grid buttons.
            * @param $contents An array of text, image and tooltips for the grid button.
            * @param $xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($position: UnityEngine.Rect, $selected: number, $content: System.Array$1<UnityEngine.GUIContent>, $xCount: number) : number
            /** Make a grid of buttons.
            * @param $position Rectangle on the screen to use for the grid.
            * @param $selected The index of the selected grid button.
            * @param $texts An array of strings to show on the grid buttons.
            * @param $images An array of textures on the grid buttons.
            * @param $contents An array of text, image and tooltips for the grid button.
            * @param $xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($position: UnityEngine.Rect, $selected: number, $texts: System.Array$1<string>, $xCount: number, $style: UnityEngine.GUIStyle) : number
            /** Make a grid of buttons.
            * @param $position Rectangle on the screen to use for the grid.
            * @param $selected The index of the selected grid button.
            * @param $texts An array of strings to show on the grid buttons.
            * @param $images An array of textures on the grid buttons.
            * @param $contents An array of text, image and tooltips for the grid button.
            * @param $xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($position: UnityEngine.Rect, $selected: number, $images: System.Array$1<UnityEngine.Texture>, $xCount: number, $style: UnityEngine.GUIStyle) : number
            /** Make a grid of buttons.
            * @param $position Rectangle on the screen to use for the grid.
            * @param $selected The index of the selected grid button.
            * @param $texts An array of strings to show on the grid buttons.
            * @param $images An array of textures on the grid buttons.
            * @param $contents An array of text, image and tooltips for the grid button.
            * @param $xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($position: UnityEngine.Rect, $selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $xCount: number, $style: UnityEngine.GUIStyle) : number
            /** A horizontal slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @returns The value that has been set by the user. 
            */
            public static HorizontalSlider ($position: UnityEngine.Rect, $value: number, $leftValue: number, $rightValue: number) : number
            /** A horizontal slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @returns The value that has been set by the user. 
            */
            public static HorizontalSlider ($position: UnityEngine.Rect, $value: number, $leftValue: number, $rightValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle) : number
            public static HorizontalSlider ($position: UnityEngine.Rect, $value: number, $leftValue: number, $rightValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, $thumbExtent: UnityEngine.GUIStyle) : number
            /** A vertical slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $topValue The value at the top end of the slider.
            * @param $bottomValue The value at the bottom end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @returns The value that has been set by the user. 
            */
            public static VerticalSlider ($position: UnityEngine.Rect, $value: number, $topValue: number, $bottomValue: number) : number
            /** A vertical slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $topValue The value at the top end of the slider.
            * @param $bottomValue The value at the bottom end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @returns The value that has been set by the user. 
            */
            public static VerticalSlider ($position: UnityEngine.Rect, $value: number, $topValue: number, $bottomValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle) : number
            public static VerticalSlider ($position: UnityEngine.Rect, $value: number, $topValue: number, $bottomValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, $thumbExtent: UnityEngine.GUIStyle) : number
            public static Slider ($position: UnityEngine.Rect, $value: number, $size: number, $start: number, $end: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, $horiz: boolean, $id: number, $thumbExtent?: UnityEngine.GUIStyle) : number
            /** Make a horizontal scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.
            * @param $position Rectangle on the screen to use for the scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $leftValue The value at the left end of the scrollbar.
            * @param $rightValue The value at the right end of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static HorizontalScrollbar ($position: UnityEngine.Rect, $value: number, $size: number, $leftValue: number, $rightValue: number) : number
            /** Make a horizontal scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.
            * @param $position Rectangle on the screen to use for the scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $leftValue The value at the left end of the scrollbar.
            * @param $rightValue The value at the right end of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static HorizontalScrollbar ($position: UnityEngine.Rect, $value: number, $size: number, $leftValue: number, $rightValue: number, $style: UnityEngine.GUIStyle) : number
            /** Make a vertical scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.
            * @param $position Rectangle on the screen to use for the scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $topValue The value at the top of the scrollbar.
            * @param $bottomValue The value at the bottom of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static VerticalScrollbar ($position: UnityEngine.Rect, $value: number, $size: number, $topValue: number, $bottomValue: number) : number
            /** Make a vertical scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.
            * @param $position Rectangle on the screen to use for the scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $topValue The value at the top of the scrollbar.
            * @param $bottomValue The value at the bottom of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static VerticalScrollbar ($position: UnityEngine.Rect, $value: number, $size: number, $topValue: number, $bottomValue: number, $style: UnityEngine.GUIStyle) : number
            public static BeginClip ($position: UnityEngine.Rect, $scrollOffset: UnityEngine.Vector2, $renderOffset: UnityEngine.Vector2, $resetOffset: boolean) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $text: string) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $style: UnityEngine.GUIStyle) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            /** End a group.
            */
            public static EndGroup () : void
            public static BeginClip ($position: UnityEngine.Rect) : void
            public static EndClip () : void
            /** Begin a scrolling view inside your GUI.
            * @param $position Rectangle on the screen to use for the ScrollView.
            * @param $scrollPosition The pixel distance that the view is scrolled in the X and Y directions.
            * @param $viewRect The rectangle used inside the scrollview.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when viewRect is wider than position.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when viewRect is taller than position.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect) : UnityEngine.Vector2
            /** Begin a scrolling view inside your GUI.
            * @param $position Rectangle on the screen to use for the ScrollView.
            * @param $scrollPosition The pixel distance that the view is scrolled in the X and Y directions.
            * @param $viewRect The rectangle used inside the scrollview.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when viewRect is wider than position.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when viewRect is taller than position.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean) : UnityEngine.Vector2
            /** Begin a scrolling view inside your GUI.
            * @param $position Rectangle on the screen to use for the ScrollView.
            * @param $scrollPosition The pixel distance that the view is scrolled in the X and Y directions.
            * @param $viewRect The rectangle used inside the scrollview.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when viewRect is wider than position.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when viewRect is taller than position.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle) : UnityEngine.Vector2
            /** Begin a scrolling view inside your GUI.
            * @param $position Rectangle on the screen to use for the ScrollView.
            * @param $scrollPosition The pixel distance that the view is scrolled in the X and Y directions.
            * @param $viewRect The rectangle used inside the scrollview.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when viewRect is wider than position.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when viewRect is taller than position.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle) : UnityEngine.Vector2
            /** Ends a scrollview started with a call to BeginScrollView.
            */
            public static EndScrollView () : void
            /** Ends a scrollview started with a call to BeginScrollView.
            */
            public static EndScrollView ($handleScrollWheel: boolean) : void
            /** Scrolls all enclosing scrollviews so they try to make position visible.
            */
            public static ScrollTo ($position: UnityEngine.Rect) : void
            public static ScrollTowards ($position: UnityEngine.Rect, $maxDelta: number) : boolean
            public static Window ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string) : UnityEngine.Rect
            public static Window ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture) : UnityEngine.Rect
            public static Window ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent) : UnityEngine.Rect
            public static Window ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            public static Window ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            public static Window ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $title: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            public static ModalWindow ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string) : UnityEngine.Rect
            public static ModalWindow ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture) : UnityEngine.Rect
            public static ModalWindow ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent) : UnityEngine.Rect
            public static ModalWindow ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            public static ModalWindow ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            public static ModalWindow ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** If you want to have the entire window background to act as a drag area, use the version of DragWindow that takes no parameters and put it at the end of the window function.
            */
            public static DragWindow () : void
            public constructor ()
        }
        /** Defines how GUI looks and behaves.
        */
        class GUISkin extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** The default font to use for all styles.
            */
            public get font(): UnityEngine.Font;
            public set font(value: UnityEngine.Font);
            /** Style used by default for GUI.Box controls.
            */
            public get box(): UnityEngine.GUIStyle;
            public set box(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.Label controls.
            */
            public get label(): UnityEngine.GUIStyle;
            public set label(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.TextField controls.
            */
            public get textField(): UnityEngine.GUIStyle;
            public set textField(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.TextArea controls.
            */
            public get textArea(): UnityEngine.GUIStyle;
            public set textArea(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.Button controls.
            */
            public get button(): UnityEngine.GUIStyle;
            public set button(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.Toggle controls.
            */
            public get toggle(): UnityEngine.GUIStyle;
            public set toggle(value: UnityEngine.GUIStyle);
            /** Style used by default for Window controls (Additional resources: GUI.Window).
            */
            public get window(): UnityEngine.GUIStyle;
            public set window(value: UnityEngine.GUIStyle);
            /** Style used by default for the background part of GUI.HorizontalSlider controls.
            */
            public get horizontalSlider(): UnityEngine.GUIStyle;
            public set horizontalSlider(value: UnityEngine.GUIStyle);
            /** Style used by default for the thumb that is dragged in GUI.HorizontalSlider controls.
            */
            public get horizontalSliderThumb(): UnityEngine.GUIStyle;
            public set horizontalSliderThumb(value: UnityEngine.GUIStyle);
            /** Style used by default for the background part of GUI.VerticalSlider controls.
            */
            public get verticalSlider(): UnityEngine.GUIStyle;
            public set verticalSlider(value: UnityEngine.GUIStyle);
            /** Style used by default for the thumb that is dragged in GUI.VerticalSlider controls.
            */
            public get verticalSliderThumb(): UnityEngine.GUIStyle;
            public set verticalSliderThumb(value: UnityEngine.GUIStyle);
            /** Style used by default for the background part of GUI.HorizontalScrollbar controls.
            */
            public get horizontalScrollbar(): UnityEngine.GUIStyle;
            public set horizontalScrollbar(value: UnityEngine.GUIStyle);
            /** Style used by default for the thumb that is dragged in GUI.HorizontalScrollbar controls.
            */
            public get horizontalScrollbarThumb(): UnityEngine.GUIStyle;
            public set horizontalScrollbarThumb(value: UnityEngine.GUIStyle);
            /** Style used by default for the left button on GUI.HorizontalScrollbar controls.
            */
            public get horizontalScrollbarLeftButton(): UnityEngine.GUIStyle;
            public set horizontalScrollbarLeftButton(value: UnityEngine.GUIStyle);
            /** Style used by default for the right button on GUI.HorizontalScrollbar controls.
            */
            public get horizontalScrollbarRightButton(): UnityEngine.GUIStyle;
            public set horizontalScrollbarRightButton(value: UnityEngine.GUIStyle);
            /** Style used by default for the background part of GUI.VerticalScrollbar controls.
            */
            public get verticalScrollbar(): UnityEngine.GUIStyle;
            public set verticalScrollbar(value: UnityEngine.GUIStyle);
            /** Style used by default for the thumb that is dragged in GUI.VerticalScrollbar controls.
            */
            public get verticalScrollbarThumb(): UnityEngine.GUIStyle;
            public set verticalScrollbarThumb(value: UnityEngine.GUIStyle);
            /** Style used by default for the up button on GUI.VerticalScrollbar controls.
            */
            public get verticalScrollbarUpButton(): UnityEngine.GUIStyle;
            public set verticalScrollbarUpButton(value: UnityEngine.GUIStyle);
            /** Style used by default for the down button on GUI.VerticalScrollbar controls.
            */
            public get verticalScrollbarDownButton(): UnityEngine.GUIStyle;
            public set verticalScrollbarDownButton(value: UnityEngine.GUIStyle);
            /** Style used by default for the background of ScrollView controls (see GUI.BeginScrollView).
            */
            public get scrollView(): UnityEngine.GUIStyle;
            public set scrollView(value: UnityEngine.GUIStyle);
            /** Array of GUI styles for specific needs.
            */
            public get customStyles(): System.Array$1<UnityEngine.GUIStyle>;
            public set customStyles(value: System.Array$1<UnityEngine.GUIStyle>);
            /** Generic settings for how controls should behave with this skin.
            */
            public get settings(): UnityEngine.GUISettings;
            /** Get a named GUIStyle.
            */
            public GetStyle ($styleName: string) : UnityEngine.GUIStyle
            /** Try to search for a GUIStyle. This functions returns NULL and does not give an error.
            */
            public FindStyle ($styleName: string) : UnityEngine.GUIStyle
            public GetEnumerator () : System.Collections.IEnumerator
            public constructor ()
        }
        /** The contents of a GUI element.
        */
        class GUIContent extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Shorthand for empty content.
            */
            public static none : UnityEngine.GUIContent
            /** The text contained.
            */
            public get text(): string;
            public set text(value: string);
            /** The icon image contained.
            */
            public get image(): UnityEngine.Texture;
            public set image(value: UnityEngine.Texture);
            /** The tooltip of this element.
            */
            public get tooltip(): string;
            public set tooltip(value: string);
            public constructor ()
            public constructor ($text: string)
            public constructor ($image: UnityEngine.Texture)
            public constructor ($text: string, $image: UnityEngine.Texture)
            public constructor ($text: string, $tooltip: string)
            public constructor ($image: UnityEngine.Texture, $tooltip: string)
            public constructor ($text: string, $image: UnityEngine.Texture, $tooltip: string)
            public constructor ($src: UnityEngine.GUIContent)
        }
        /** Styling information for GUI elements.
        */
        class GUIStyle extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The font to use for rendering. If null, the default font for the current GUISkin is used instead.
            */
            public get font(): UnityEngine.Font;
            public set font(value: UnityEngine.Font);
            /** How image and text of the GUIContent is combined.
            */
            public get imagePosition(): UnityEngine.ImagePosition;
            public set imagePosition(value: UnityEngine.ImagePosition);
            /** Text alignment.
            */
            public get alignment(): UnityEngine.TextAnchor;
            public set alignment(value: UnityEngine.TextAnchor);
            /** Should the text be wordwrapped?
            */
            public get wordWrap(): boolean;
            public set wordWrap(value: boolean);
            /** What to do when the contents to be rendered is too large to fit within the area given.
            */
            public get clipping(): UnityEngine.TextClipping;
            public set clipping(value: UnityEngine.TextClipping);
            /** Pixel offset to apply to the content of this GUIstyle.
            */
            public get contentOffset(): UnityEngine.Vector2;
            public set contentOffset(value: UnityEngine.Vector2);
            /** If non-0, any GUI elements rendered with this style will have the width specified here.
            */
            public get fixedWidth(): number;
            public set fixedWidth(value: number);
            /** If non-0, any GUI elements rendered with this style will have the height specified here.
            */
            public get fixedHeight(): number;
            public set fixedHeight(value: number);
            /** Can GUI elements of this style be stretched horizontally for better layouting?
            */
            public get stretchWidth(): boolean;
            public set stretchWidth(value: boolean);
            /** Can GUI elements of this style be stretched vertically for better layout?
            */
            public get stretchHeight(): boolean;
            public set stretchHeight(value: boolean);
            /** The font size to use (for dynamic fonts).
            */
            public get fontSize(): number;
            public set fontSize(value: number);
            /** The font style to use (for dynamic fonts).
            */
            public get fontStyle(): UnityEngine.FontStyle;
            public set fontStyle(value: UnityEngine.FontStyle);
            /** Enable HTML-style tags for Text Formatting Markup.
            */
            public get richText(): boolean;
            public set richText(value: boolean);
            /** The name of this GUIStyle. Used for getting them based on name.
            */
            public get name(): string;
            public set name(value: string);
            /** Rendering settings for when the component is displayed normally.
            */
            public get normal(): UnityEngine.GUIStyleState;
            public set normal(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the mouse is hovering over the control.
            */
            public get hover(): UnityEngine.GUIStyleState;
            public set hover(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the control is pressed down.
            */
            public get active(): UnityEngine.GUIStyleState;
            public set active(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the control is turned on.
            */
            public get onNormal(): UnityEngine.GUIStyleState;
            public set onNormal(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the control is turned on and the mouse is hovering it.
            */
            public get onHover(): UnityEngine.GUIStyleState;
            public set onHover(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the element is turned on and pressed down.
            */
            public get onActive(): UnityEngine.GUIStyleState;
            public set onActive(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the element has keyboard focus.
            */
            public get focused(): UnityEngine.GUIStyleState;
            public set focused(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the element has keyboard and is turned on.
            */
            public get onFocused(): UnityEngine.GUIStyleState;
            public set onFocused(value: UnityEngine.GUIStyleState);
            /** The borders of all background images.
            */
            public get border(): UnityEngine.RectOffset;
            public set border(value: UnityEngine.RectOffset);
            /** The margins between elements rendered in this style and any other GUI elements.
            */
            public get margin(): UnityEngine.RectOffset;
            public set margin(value: UnityEngine.RectOffset);
            /** Space from the edge of GUIStyle to the start of the contents.
            */
            public get padding(): UnityEngine.RectOffset;
            public set padding(value: UnityEngine.RectOffset);
            /** Extra space to be added to the background image.
            */
            public get overflow(): UnityEngine.RectOffset;
            public set overflow(value: UnityEngine.RectOffset);
            /** The height of one line of text with this style, measured in pixels. (Read Only)
            */
            public get lineHeight(): number;
            /** Shortcut for an empty GUIStyle.
            */
            public static get none(): UnityEngine.GUIStyle;
            public get isHeightDependantOnWidth(): boolean;
            /** Draw this GUIStyle on to the screen, internal version.
            */
            public Draw ($position: UnityEngine.Rect, $isHover: boolean, $isActive: boolean, $on: boolean, $hasKeyboardFocus: boolean) : void
            /** Draw the GUIStyle with a text string inside.
            */
            public Draw ($position: UnityEngine.Rect, $text: string, $isHover: boolean, $isActive: boolean, $on: boolean, $hasKeyboardFocus: boolean) : void
            /** Draw the GUIStyle with an image inside. If the image is too large to fit within the content area of the style it is scaled down.
            */
            public Draw ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $isHover: boolean, $isActive: boolean, $on: boolean, $hasKeyboardFocus: boolean) : void
            /** Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.
            */
            public Draw ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $isHover: boolean, $isActive: boolean, $on: boolean, $hasKeyboardFocus: boolean) : void
            /** Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.
            */
            public Draw ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number) : void
            /** Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.
            */
            public Draw ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number, $on: boolean) : void
            public Draw ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number, $on: boolean, $hover: boolean) : void
            /** Draw this GUIStyle with selected content.
            */
            public DrawCursor ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number, $character: number) : void
            /** Draw this GUIStyle with selected content.
            */
            public DrawWithTextSelection ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number, $firstSelectedCharacter: number, $lastSelectedCharacter: number) : void
            public static op_Implicit ($str: string) : UnityEngine.GUIStyle
            /** Get the pixel position of a given string index.
            */
            public GetCursorPixelPosition ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $cursorStringIndex: number) : UnityEngine.Vector2
            /** Get the cursor position (indexing into contents.text) when the user clicked at cursorPixelPosition.
            */
            public GetCursorStringIndex ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $cursorPixelPosition: UnityEngine.Vector2) : number
            /** Calculate the size of some content if it is rendered with this style.
            */
            public CalcSize ($content: UnityEngine.GUIContent) : UnityEngine.Vector2
            /** Calculate the size of an element formatted with this style, and a given space to content.
            */
            public CalcScreenSize ($contentSize: UnityEngine.Vector2) : UnityEngine.Vector2
            /** How tall this element will be when rendered with content and a specific width.
            */
            public CalcHeight ($content: UnityEngine.GUIContent, $width: number) : number
            /** Calculate the minimum and maximum widths for this style rendered with content.
            */
            public CalcMinMaxWidth ($content: UnityEngine.GUIContent, $minWidth: $Ref<number>, $maxWidth: $Ref<number>) : void
            public constructor ()
            public constructor ($other: UnityEngine.GUIStyle)
        }
        /** Base class for images & text strings displayed in a GUI.
        */
        class GUIElement extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Used by GUIUtility.GetControlID to inform the IMGUI system if a given control can get keyboard focus. This allows the IMGUI system to give focus appropriately when a user presses tab for cycling between controls.
        */
        enum FocusType
        { Native = 0, Keyboard = 1, Passive = 2 }
        class GUILayer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** The GUILayout class is the interface for Unity gui with automatic layout.
        */
        class GUILayout extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Make an auto-layout label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label ($image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label ($text: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label ($content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box ($image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box ($text: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box ($content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a single press button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button ($image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a single press button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button ($text: string, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a single press button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button ($content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a single press button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a single press button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a single press button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton ($image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton ($text: string, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton ($content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a single-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextField ($text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a single-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextField ($text: string, $maxLength: number, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a single-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextField ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a single-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextField ($text: string, $maxLength: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($password: string, $maskChar: number, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($password: string, $maskChar: number, $maxLength: number, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($password: string, $maskChar: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($password: string, $maskChar: number, $maxLength: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a multi-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&amp;lt;br&amp;gt;
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextArea ($text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a multi-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&amp;lt;br&amp;gt;
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextArea ($text: string, $maxLength: number, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a multi-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&amp;lt;br&amp;gt;
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextArea ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a multi-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&amp;lt;br&amp;gt;
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextArea ($text: string, $maxLength: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make an on/off toggle button.
            * @param $value Is the button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle ($value: boolean, $image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make an on/off toggle button.
            * @param $value Is the button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle ($value: boolean, $text: string, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make an on/off toggle button.
            * @param $value Is the button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle ($value: boolean, $content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make an on/off toggle button.
            * @param $value Is the button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle ($value: boolean, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make an on/off toggle button.
            * @param $value Is the button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle ($value: boolean, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make an on/off toggle button.
            * @param $value Is the button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle ($value: boolean, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($selected: number, $texts: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($selected: number, $images: System.Array$1<UnityEngine.Texture>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($selected: number, $texts: System.Array$1<string>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($selected: number, $images: System.Array$1<UnityEngine.Texture>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            public static Toolbar ($selected: number, $texts: System.Array$1<string>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]) : number
            public static Toolbar ($selected: number, $images: System.Array$1<UnityEngine.Texture>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            public static Toolbar ($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]) : number
            public static Toolbar ($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $enabled: System.Array$1<boolean>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            public static Toolbar ($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $enabled: System.Array$1<boolean>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a Selection Grid.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($selected: number, $texts: System.Array$1<string>, $xCount: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a Selection Grid.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($selected: number, $images: System.Array$1<UnityEngine.Texture>, $xCount: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a Selection Grid.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($selected: number, $content: System.Array$1<UnityEngine.GUIContent>, $xCount: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a Selection Grid.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($selected: number, $texts: System.Array$1<string>, $xCount: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a Selection Grid.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($selected: number, $images: System.Array$1<UnityEngine.Texture>, $xCount: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a Selection Grid.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $xCount: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** A horizontal slider the user can drag to change a value between a min and a max.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The value that has been set by the user. 
            */
            public static HorizontalSlider ($value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** A horizontal slider the user can drag to change a value between a min and a max.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The value that has been set by the user. 
            */
            public static HorizontalSlider ($value: number, $leftValue: number, $rightValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** A vertical slider the user can drag to change a value between a min and a max.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $topValue The value at the top end of the slider.
            * @param $bottomValue The value at the bottom end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The value that has been set by the user. 
            */
            public static VerticalSlider ($value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** A vertical slider the user can drag to change a value between a min and a max.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $topValue The value at the top end of the slider.
            * @param $bottomValue The value at the bottom end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The value that has been set by the user. 
            */
            public static VerticalSlider ($value: number, $leftValue: number, $rightValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a horizontal scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $leftValue The value at the left end of the scrollbar.
            * @param $rightValue The value at the right end of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static HorizontalScrollbar ($value: number, $size: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a horizontal scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $leftValue The value at the left end of the scrollbar.
            * @param $rightValue The value at the right end of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static HorizontalScrollbar ($value: number, $size: number, $leftValue: number, $rightValue: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a vertical scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $topValue The value at the top end of the scrollbar.
            * @param $bottomValue The value at the bottom end of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static VerticalScrollbar ($value: number, $size: number, $topValue: number, $bottomValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a vertical scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $topValue The value at the top end of the scrollbar.
            * @param $bottomValue The value at the bottom end of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static VerticalScrollbar ($value: number, $size: number, $topValue: number, $bottomValue: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Insert a space in the current layout group.
            */
            public static Space ($pixels: number) : void
            /** Insert a flexible space element.
            */
            public static FlexibleSpace () : void
            /** Begin a Horizontal control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal (...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a Horizontal control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal ($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a Horizontal control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a Horizontal control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a Horizontal control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Close a group started with BeginHorizontal.
            */
            public static EndHorizontal () : void
            /** Begin a vertical control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical (...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a vertical control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical ($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a vertical control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a vertical control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a vertical control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Close a group started with BeginVertical.
            */
            public static EndVertical () : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $text: string) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $content: UnityEngine.GUIContent) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $style: UnityEngine.GUIStyle) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            /** Close a GUILayout block started with BeginArea.
            */
            public static EndArea () : void
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $style: UnityEngine.GUIStyle) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, $background: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** End a scroll view begun with a call to BeginScrollView.
            */
            public static EndScrollView () : void
            public static Window ($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public static Window ($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public static Window ($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public static Window ($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public static Window ($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public static Window ($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Option passed to a control to give it an absolute width.
            */
            public static Width ($width: number) : UnityEngine.GUILayoutOption
            /** Option passed to a control to specify a minimum width.
            */
            public static MinWidth ($minWidth: number) : UnityEngine.GUILayoutOption
            /** Option passed to a control to specify a maximum width.
            */
            public static MaxWidth ($maxWidth: number) : UnityEngine.GUILayoutOption
            /** Option passed to a control to give it an absolute height.
            */
            public static Height ($height: number) : UnityEngine.GUILayoutOption
            /** Option passed to a control to specify a minimum height.
            */
            public static MinHeight ($minHeight: number) : UnityEngine.GUILayoutOption
            /** Option passed to a control to specify a maximum height.
            */
            public static MaxHeight ($maxHeight: number) : UnityEngine.GUILayoutOption
            /** Option passed to a control to allow or disallow horizontal expansion.
            */
            public static ExpandWidth ($expand: boolean) : UnityEngine.GUILayoutOption
            /** Option passed to a control to allow or disallow vertical expansion.
            */
            public static ExpandHeight ($expand: boolean) : UnityEngine.GUILayoutOption
            public constructor ()
        }
        /** Class internally used to pass layout options into GUILayout functions. You don't use these directly, but construct them with the layouting functions in the GUILayout class.
        */
        class GUILayoutOption extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Utility functions for implementing and extending the GUILayout class.
        */
        class GUILayoutUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Reserve layout space for a rectangle for displaying some contents with a specific style.
            * @param $content The content to make room for displaying.
            * @param $style The GUIStyle to layout for.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle that is large enough to contain content when rendered in style. 
            */
            public static GetRect ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Reserve layout space for a rectangle for displaying some contents with a specific style.
            * @param $content The content to make room for displaying.
            * @param $style The GUIStyle to layout for.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle that is large enough to contain content when rendered in style. 
            */
            public static GetRect ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a fixed content area.
            * @param $width The width of the area you want.
            * @param $height The height of the area you want.
            * @param $style An optional GUIStyle to layout for. If specified, the style's padding value will be added to your sizes & its margin value will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rectangle to put your control in. 
            */
            public static GetRect ($width: number, $height: number) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a fixed content area.
            * @param $width The width of the area you want.
            * @param $height The height of the area you want.
            * @param $style An optional GUIStyle to layout for. If specified, the style's padding value will be added to your sizes & its margin value will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rectangle to put your control in. 
            */
            public static GetRect ($width: number, $height: number, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a fixed content area.
            * @param $width The width of the area you want.
            * @param $height The height of the area you want.
            * @param $style An optional GUIStyle to layout for. If specified, the style's padding value will be added to your sizes & its margin value will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rectangle to put your control in. 
            */
            public static GetRect ($width: number, $height: number, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a fixed content area.
            * @param $width The width of the area you want.
            * @param $height The height of the area you want.
            * @param $style An optional GUIStyle to layout for. If specified, the style's padding value will be added to your sizes & its margin value will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rectangle to put your control in. 
            */
            public static GetRect ($width: number, $height: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Reserve layout space for a flexible rect.
            * @param $minWidth The minimum width of the area passed back.
            * @param $maxWidth The maximum width of the area passed back.
            * @param $minHeight The minimum width of the area passed back.
            * @param $maxHeight The maximum width of the area passed back.
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes requested & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle with size between minWidth & maxWidth on both axes. 
            */
            public static GetRect ($minWidth: number, $maxWidth: number, $minHeight: number, $maxHeight: number) : UnityEngine.Rect
            /** Reserve layout space for a flexible rect.
            * @param $minWidth The minimum width of the area passed back.
            * @param $maxWidth The maximum width of the area passed back.
            * @param $minHeight The minimum width of the area passed back.
            * @param $maxHeight The maximum width of the area passed back.
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes requested & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle with size between minWidth & maxWidth on both axes. 
            */
            public static GetRect ($minWidth: number, $maxWidth: number, $minHeight: number, $maxHeight: number, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Reserve layout space for a flexible rect.
            * @param $minWidth The minimum width of the area passed back.
            * @param $maxWidth The maximum width of the area passed back.
            * @param $minHeight The minimum width of the area passed back.
            * @param $maxHeight The maximum width of the area passed back.
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes requested & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle with size between minWidth & maxWidth on both axes. 
            */
            public static GetRect ($minWidth: number, $maxWidth: number, $minHeight: number, $maxHeight: number, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Reserve layout space for a flexible rect.
            * @param $minWidth The minimum width of the area passed back.
            * @param $maxWidth The maximum width of the area passed back.
            * @param $minHeight The minimum width of the area passed back.
            * @param $maxHeight The maximum width of the area passed back.
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes requested & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle with size between minWidth & maxWidth on both axes. 
            */
            public static GetRect ($minWidth: number, $maxWidth: number, $minHeight: number, $maxHeight: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Get the rectangle last used by GUILayout for a control.
            * @returns The last used rectangle. 
            */
            public static GetLastRect () : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a specific aspect ratio.
            * @param $aspect The aspect ratio of the element (width / height).
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes of the returned rectangle & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rect for the control. 
            */
            public static GetAspectRect ($aspect: number) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a specific aspect ratio.
            * @param $aspect The aspect ratio of the element (width / height).
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes of the returned rectangle & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rect for the control. 
            */
            public static GetAspectRect ($aspect: number, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a specific aspect ratio.
            * @param $aspect The aspect ratio of the element (width / height).
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes of the returned rectangle & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rect for the control. 
            */
            public static GetAspectRect ($aspect: number, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a specific aspect ratio.
            * @param $aspect The aspect ratio of the element (width / height).
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes of the returned rectangle & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rect for the control. 
            */
            public static GetAspectRect ($aspect: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public constructor ()
        }
        /** General settings for how the GUI behaves.
        */
        class GUISettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Should double-clicking select words in text fields.
            */
            public get doubleClickSelectsWord(): boolean;
            public set doubleClickSelectsWord(value: boolean);
            /** Should triple-clicking select whole text in text fields.
            */
            public get tripleClickSelectsLine(): boolean;
            public set tripleClickSelectsLine(value: boolean);
            /** The color of the cursor in text fields.
            */
            public get cursorColor(): UnityEngine.Color;
            public set cursorColor(value: UnityEngine.Color);
            /** The speed of text field cursor flashes.
            */
            public get cursorFlashSpeed(): number;
            public set cursorFlashSpeed(value: number);
            /** The color of the selection rect in text fields.
            */
            public get selectionColor(): UnityEngine.Color;
            public set selectionColor(value: UnityEngine.Color);
            public constructor ()
        }
        /** Specialized values for the given states used by GUIStyle objects.
        */
        class GUIStyleState extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The background image used by GUI elements in this given state.
            */
            public get background(): UnityEngine.Texture2D;
            public set background(value: UnityEngine.Texture2D);
            /** The text color used by GUI elements in this state.
            */
            public get textColor(): UnityEngine.Color;
            public set textColor(value: UnityEngine.Color);
            /** Background images used by this state when on a high-resolution screen. It should either be left empty, or contain a single image that is exactly twice the resolution of background. This is only used by the editor. The field is not copied to player data, and is not accessible from player code.
            */
            public get scaledBackgrounds(): System.Array$1<UnityEngine.Texture2D>;
            public set scaledBackgrounds(value: System.Array$1<UnityEngine.Texture2D>);
            public constructor ()
        }
        /** How image and text is placed inside GUIStyle.
        */
        enum ImagePosition
        { ImageLeft = 0, ImageAbove = 1, ImageOnly = 2, TextOnly = 3 }
        /** Different methods for how the GUI system handles text being too large to fit the rectangle allocated.
        */
        enum TextClipping
        { Overflow = 0, Clip = 1, Ellipsis = 2 }
        /** Allows to control for which display the OnGUI is called.
        */
        class GUITargetAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($displayIndex: number)
            public constructor ($displayIndex: number, $displayIndex1: number)
            public constructor ($displayIndex: number, $displayIndex1: number, ...displayIndexList: number[])
        }
        class GUITexture extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Utility class for making new GUI controls.
        */
        class GUIUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** A global property, which is true if a ModalWindow is being displayed, false otherwise.
            */
            public static get hasModalWindow(): boolean;
            /** Get access to the system-wide clipboard.
            */
            public static get systemCopyBuffer(): string;
            public static set systemCopyBuffer(value: string);
            /** The controlID of the current hot control.
            */
            public static get hotControl(): number;
            public static set hotControl(value: number);
            /** The controlID of the control that has keyboard focus.
            */
            public static get keyboardControl(): number;
            public static set keyboardControl(value: number);
            /** Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.
            */
            public static GetControlID ($hint: number, $focusType: UnityEngine.FocusType, $rect: UnityEngine.Rect) : number
            /** Align a local space rectangle to the pixel grid.
            * @param $local The local space rectangle that needs to be processed.
            * @param $widthInPixels Width, in pixel units, of the axis-aligned bounding box that encompasses the aligned points.
            * @param $heightInPixels Height, in pixel units, of the axis-aligned bounding box that encompasses the aligned points.
            * @returns The aligned rectangle in local space. 
            */
            public static AlignRectToDevice ($rect: UnityEngine.Rect, $widthInPixels: $Ref<number>, $heightInPixels: $Ref<number>) : UnityEngine.Rect
            /** Get a unique ID for a control.
            */
            public static GetControlID ($focus: UnityEngine.FocusType) : number
            /** Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.
            */
            public static GetControlID ($contents: UnityEngine.GUIContent, $focus: UnityEngine.FocusType) : number
            /** Get a unique ID for a control.
            */
            public static GetControlID ($focus: UnityEngine.FocusType, $position: UnityEngine.Rect) : number
            /** Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.
            */
            public static GetControlID ($contents: UnityEngine.GUIContent, $focus: UnityEngine.FocusType, $position: UnityEngine.Rect) : number
            /** Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.
            */
            public static GetControlID ($hint: number, $focus: UnityEngine.FocusType) : number
            /** Get a state object from a controlID.
            */
            public static GetStateObject ($t: System.Type, $controlID: number) : any
            /** Get an existing state object from a controlID.
            */
            public static QueryStateObject ($t: System.Type, $controlID: number) : any
            /** Puts the GUI in a state that will prevent all subsequent immediate mode GUI functions from evaluating for the remainder of the GUI loop by throwing an ExitGUIException.
            */
            public static ExitGUI () : void
            /** Convert a point from GUI position to screen space.
            */
            public static GUIToScreenPoint ($guiPoint: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Convert a rect from GUI position to screen space.
            */
            public static GUIToScreenRect ($guiRect: UnityEngine.Rect) : UnityEngine.Rect
            /** Convert a point from screen space to GUI position.
            */
            public static ScreenToGUIPoint ($screenPoint: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Convert a rect from screen space to GUI position.
            */
            public static ScreenToGUIRect ($screenRect: UnityEngine.Rect) : UnityEngine.Rect
            /** Helper function to rotate the GUI around a point.
            */
            public static RotateAroundPivot ($angle: number, $pivotPoint: UnityEngine.Vector2) : void
            /** Helper function to scale the GUI around a point.
            */
            public static ScaleAroundPivot ($scale: UnityEngine.Vector2, $pivotPoint: UnityEngine.Vector2) : void
            /** Align a local space rectangle to the pixel grid.
            * @param $local The local space rectangle that needs to be processed.
            * @param $widthInPixels Width, in pixel units, of the axis-aligned bounding box that encompasses the aligned points.
            * @param $heightInPixels Height, in pixel units, of the axis-aligned bounding box that encompasses the aligned points.
            * @returns The aligned rectangle in local space. 
            */
            public static AlignRectToDevice ($rect: UnityEngine.Rect) : UnityEngine.Rect
            public constructor ()
        }
        /** An exception that will prevent all subsequent immediate mode GUI functions from evaluating for the remainder of the GUI loop.
        */
        class ExitGUIException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class TextEditor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public keyboardOnScreen : UnityEngine.TouchScreenKeyboard
            public controlID : number
            public style : UnityEngine.GUIStyle
            public isPasswordField : boolean
            public scrollOffset : UnityEngine.Vector2
            public graphicalCursorPos : UnityEngine.Vector2
            public graphicalSelectCursorPos : UnityEngine.Vector2
            public get isMultiline(): boolean;
            public set isMultiline(value: boolean);
            public get hasHorizontalCursor(): boolean;
            public set hasHorizontalCursor(value: boolean);
            public get showCursor(): boolean;
            public set showCursor(value: boolean);
            public get text(): string;
            public set text(value: string);
            public get position(): UnityEngine.Rect;
            public set position(value: UnityEngine.Rect);
            public get cursorIndex(): number;
            public set cursorIndex(value: number);
            public get selectIndex(): number;
            public set selectIndex(value: number);
            public get doubleClickSnapping(): UnityEngine.TextEditor.DblClickSnapping;
            public set doubleClickSnapping(value: UnityEngine.TextEditor.DblClickSnapping);
            public get altCursorPosition(): number;
            public set altCursorPosition(value: number);
            public get hasSelection(): boolean;
            public get SelectedText(): string;
            public OnFocus () : void
            public OnLostFocus () : void
            public HasClickedOnLink ($mousePosition: UnityEngine.Vector2, $linkData: $Ref<string>) : boolean
            public HasClickedOnHREF ($mousePosition: UnityEngine.Vector2, $href: $Ref<string>) : boolean
            public HandleKeyEvent ($e: UnityEngine.Event) : boolean
            public DeleteLineBack () : boolean
            public DeleteWordBack () : boolean
            public DeleteWordForward () : boolean
            public Delete () : boolean
            public CanPaste () : boolean
            public Backspace () : boolean
            public SelectAll () : void
            public SelectNone () : void
            public DeleteSelection () : boolean
            public ReplaceSelection ($replace: string) : void
            public Insert ($c: number) : void
            public MoveSelectionToAltCursor () : void
            public MoveRight () : void
            public MoveLeft () : void
            public MoveUp () : void
            public MoveDown () : void
            public MoveLineStart () : void
            public MoveLineEnd () : void
            public MoveGraphicalLineStart () : void
            public MoveGraphicalLineEnd () : void
            public MoveTextStart () : void
            public MoveTextEnd () : void
            public MoveParagraphForward () : void
            public MoveParagraphBackward () : void
            public MoveCursorToPosition ($cursorPosition: UnityEngine.Vector2) : void
            public MoveAltCursorToPosition ($cursorPosition: UnityEngine.Vector2) : void
            public IsOverSelection ($cursorPosition: UnityEngine.Vector2) : boolean
            public SelectToPosition ($cursorPosition: UnityEngine.Vector2) : void
            public SelectLeft () : void
            public SelectRight () : void
            public SelectUp () : void
            public SelectDown () : void
            public SelectTextEnd () : void
            public SelectTextStart () : void
            public MouseDragSelectsWholeWords ($on: boolean) : void
            public DblClickSnap ($snapping: UnityEngine.TextEditor.DblClickSnapping) : void
            public MoveWordRight () : void
            public MoveToStartOfNextWord () : void
            public MoveToEndOfPreviousWord () : void
            public SelectToStartOfNextWord () : void
            public SelectToEndOfPreviousWord () : void
            public FindStartOfNextWord ($p: number) : number
            public MoveWordLeft () : void
            public SelectWordRight () : void
            public SelectWordLeft () : void
            public ExpandSelectGraphicalLineStart () : void
            public ExpandSelectGraphicalLineEnd () : void
            public SelectGraphicalLineStart () : void
            public SelectGraphicalLineEnd () : void
            public SelectParagraphForward () : void
            public SelectParagraphBackward () : void
            public SelectCurrentWord () : void
            public SelectCurrentParagraph () : void
            public UpdateScrollOffsetIfNeeded ($evt: UnityEngine.Event) : void
            public DrawCursor ($newText: string) : void
            public SaveBackup () : void
            public Undo () : void
            public Cut () : boolean
            public Copy () : void
            public Paste () : boolean
            public DetectFocusChange () : void
            public constructor ()
        }
        /** AndroidInput provides support for off-screen touch input, such as a touchpad.
        */
        class AndroidInput extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Number of secondary touches. Guaranteed not to change throughout the frame. (Read Only).
            */
            public static get touchCountSecondary(): number;
            /** Property indicating whether the system provides secondary touch input.
            */
            public static get secondaryTouchEnabled(): boolean;
            /** Property indicating the width of the secondary touchpad.
            */
            public static get secondaryTouchWidth(): number;
            /** Property indicating the height of the secondary touchpad.
            */
            public static get secondaryTouchHeight(): number;
            /** Returns object representing status of a specific touch on a secondary touchpad (Does not allocate temporary variables).
            */
            public static GetSecondaryTouch ($index: number) : UnityEngine.Touch
        }
        /** Describes phase of a finger touch.
        */
        enum TouchPhase
        { Began = 0, Moved = 1, Stationary = 2, Ended = 3, Canceled = 4 }
        /** Describes whether a touch is direct, indirect (or remote), or from a stylus.
        */
        enum TouchType
        { Direct = 0, Indirect = 1, Stylus = 2 }
        /** Indicates the type of action of a pen event.
        */
        enum PenEventType
        { NoContact = 0, PenDown = 1, PenUp = 2 }
        /** Describes physical orientation of the device as determined by the OS.
        */
        enum DeviceOrientation
        { Unknown = 0, Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, FaceUp = 5, FaceDown = 6 }
        /** Structure describing acceleration status of the device.
        */
        class AccelerationEvent extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Value of acceleration.
            */
            public get acceleration(): UnityEngine.Vector3;
            /** Amount of time passed since last accelerometer measurement.
            */
            public get deltaTime(): number;
        }
        /** Interface into the Gyroscope.
        */
        class Gyroscope extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns rotation rate as measured by the device's gyroscope.
            */
            public get rotationRate(): UnityEngine.Vector3;
            /** Returns unbiased rotation rate as measured by the device's gyroscope.
            */
            public get rotationRateUnbiased(): UnityEngine.Vector3;
            /** Returns the gravity acceleration vector expressed in the device's reference frame.
            */
            public get gravity(): UnityEngine.Vector3;
            /** Returns the acceleration that the user is giving to the device.
            */
            public get userAcceleration(): UnityEngine.Vector3;
            /** Returns the attitude (ie, orientation in space) of the device.
            */
            public get attitude(): UnityEngine.Quaternion;
            /** Sets or retrieves the enabled status of this gyroscope.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** Sets or retrieves gyroscope interval in seconds.
            */
            public get updateInterval(): number;
            public set updateInterval(value: number);
        }
        /** Structure describing device location.
        */
        class LocationInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Geographical device location latitude.
            */
            public get latitude(): number;
            /** Geographical device location longitude.
            */
            public get longitude(): number;
            /** Geographical device location altitude in meters.
            */
            public get altitude(): number;
            /** Horizontal accuracy radius of the location in meters.
            */
            public get horizontalAccuracy(): number;
            /** Vertical accuracy radius of the location in meters.
            */
            public get verticalAccuracy(): number;
            /** Timestamp (in milliseconds from 1970) of when location data was last updated.
            */
            public get timestamp(): number;
        }
        /** Describes the location service status for a device.
        */
        enum LocationServiceStatus
        { Stopped = 0, Initializing = 1, Running = 2, Failed = 3 }
        /** Provides methods that allow an application to access the device's location.
        */
        class LocationService extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Indicates whether the device allows the application to access the location service.
            */
            public get isEnabledByUser(): boolean;
            /** Returns the location service status.
            */
            public get status(): UnityEngine.LocationServiceStatus;
            /** The last geographical location that the device registered.
            */
            public get lastData(): UnityEngine.LocationInfo;
            /** Starts location service updates.
            * @param $desiredAccuracyInMeters The service accuracy you want to use, in meters. This determines the accuracy of the device's last location coordinates. Higher values like 500 don't require the device to use its GPS chip and
            thus save battery power. Lower values like 5-10 provide the best accuracy but require the GPS chip and thus use more battery power. The default value is 10 meters.
            * @param $updateDistanceInMeters The minimum distance, in meters, that the device must move laterally before Unity updates Input.location. Higher values like 500 produce fewer updates and are less resource intensive to process. The default is 10 meters.
            */
            public Start ($desiredAccuracyInMeters: number, $updateDistanceInMeters: number) : void
            /** Starts location service updates.
            * @param $desiredAccuracyInMeters The service accuracy you want to use, in meters. This determines the accuracy of the device's last location coordinates. Higher values like 500 don't require the device to use its GPS chip and
            thus save battery power. Lower values like 5-10 provide the best accuracy but require the GPS chip and thus use more battery power. The default value is 10 meters.
            * @param $updateDistanceInMeters The minimum distance, in meters, that the device must move laterally before Unity updates Input.location. Higher values like 500 produce fewer updates and are less resource intensive to process. The default is 10 meters.
            */
            public Start ($desiredAccuracyInMeters: number) : void
            /** Starts location service updates.
            * @param $desiredAccuracyInMeters The service accuracy you want to use, in meters. This determines the accuracy of the device's last location coordinates. Higher values like 500 don't require the device to use its GPS chip and
            thus save battery power. Lower values like 5-10 provide the best accuracy but require the GPS chip and thus use more battery power. The default value is 10 meters.
            * @param $updateDistanceInMeters The minimum distance, in meters, that the device must move laterally before Unity updates Input.location. Higher values like 500 produce fewer updates and are less resource intensive to process. The default is 10 meters.
            */
            public Start () : void
            /** Stops location service updates. This is useful to save battery power when the application doesn't require the location service.
            */
            public Stop () : void
            public constructor ()
        }
        /** Interface into compass functionality.
        */
        class Compass extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The heading in degrees relative to the magnetic North Pole. (Read Only)
            */
            public get magneticHeading(): number;
            /** The heading in degrees relative to the geographic North Pole. (Read Only)
            */
            public get trueHeading(): number;
            /** Accuracy of heading reading in degrees.
            */
            public get headingAccuracy(): number;
            /** The raw geomagnetic data measured in microteslas. (Read Only)
            */
            public get rawVector(): UnityEngine.Vector3;
            /** Timestamp (in seconds since 1970) when the heading was last time updated. (Read Only)
            */
            public get timestamp(): number;
            /** Used to enable or disable compass. Note, that if you want Input.compass.trueHeading property to contain a valid value, you must also enable location updates by calling Input.location.Start().
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            public constructor ()
        }
        /** Interface into the Input system.
        */
        class Input extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Enables/Disables mouse simulation with touches. By default this option is enabled.
            */
            public static get simulateMouseWithTouches(): boolean;
            public static set simulateMouseWithTouches(value: boolean);
            /** Is any key or mouse button currently held down? (Read Only)
            */
            public static get anyKey(): boolean;
            /** Returns true the first frame the user hits any key or mouse button. (Read Only)
            */
            public static get anyKeyDown(): boolean;
            /** Returns the keyboard input entered this frame. (Read Only)
            */
            public static get inputString(): string;
            /** The current mouse position in pixel coordinates. (Read Only).
            */
            public static get mousePosition(): UnityEngine.Vector3;
            /** The current mouse position delta in pixel coordinates. (Read Only).
            */
            public static get mousePositionDelta(): UnityEngine.Vector3;
            /** The current mouse scroll delta. (Read Only)
            */
            public static get mouseScrollDelta(): UnityEngine.Vector2;
            /** Controls enabling and disabling of IME input composition.
            */
            public static get imeCompositionMode(): UnityEngine.IMECompositionMode;
            public static set imeCompositionMode(value: UnityEngine.IMECompositionMode);
            /** The current IME composition string being typed by the user.
            */
            public static get compositionString(): string;
            /** Does the user have an IME keyboard input source selected?
            */
            public static get imeIsSelected(): boolean;
            /** The current text input position used by IMEs to open windows.
            */
            public static get compositionCursorPos(): UnityEngine.Vector2;
            public static set compositionCursorPos(value: UnityEngine.Vector2);
            /** Indicates if a mouse device is detected.
            */
            public static get mousePresent(): boolean;
            /** Returns the number of queued pen events that can be accessed by calling GetPenEvent().
            */
            public static get penEventCount(): number;
            /** Number of touches. Guaranteed not to change throughout the frame. (Read Only)
            */
            public static get touchCount(): number;
            /** Bool value which let's users check if touch pressure is supported.
            */
            public static get touchPressureSupported(): boolean;
            /** Returns true when Stylus Touch is supported by a device or platform.
            */
            public static get stylusTouchSupported(): boolean;
            /** Returns whether the device on which application is currently running supports touch input.
            */
            public static get touchSupported(): boolean;
            /** Property indicating whether the system handles multiple touches.
            */
            public static get multiTouchEnabled(): boolean;
            public static set multiTouchEnabled(value: boolean);
            /** Device physical orientation as reported by OS. (Read Only)
            */
            public static get deviceOrientation(): UnityEngine.DeviceOrientation;
            /** Last measured linear acceleration of a device in three-dimensional space. (Read Only)
            */
            public static get acceleration(): UnityEngine.Vector3;
            /** This property controls if input sensors should be compensated for screen orientation.
            */
            public static get compensateSensors(): boolean;
            public static set compensateSensors(value: boolean);
            /** Number of acceleration measurements which occurred during last frame.
            */
            public static get accelerationEventCount(): number;
            /** Should  Back button quit the application?
            Only usable on Android, Windows Phone or Windows Tablets.
            */
            public static get backButtonLeavesApp(): boolean;
            public static set backButtonLeavesApp(value: boolean);
            /** Property for accessing device location (handheld devices only). (Read Only)
            */
            public static get location(): UnityEngine.LocationService;
            /** Property for accessing compass (handheld devices only). (Read Only)
            */
            public static get compass(): UnityEngine.Compass;
            /** Returns default gyroscope.
            */
            public static get gyro(): UnityEngine.Gyroscope;
            /** Returns list of objects representing status of all touches during last frame. (Read Only) (Allocates temporary variables).
            */
            public static get touches(): System.Array$1<UnityEngine.Touch>;
            /** Returns list of acceleration measurements which occurred during the last frame. (Read Only) (Allocates temporary variables).
            */
            public static get accelerationEvents(): System.Array$1<UnityEngine.AccelerationEvent>;
            /** Returns the value of the virtual axis identified by axisName.
            */
            public static GetAxis ($axisName: string) : number
            /** Returns the value of the virtual axis identified by axisName with no smoothing filtering applied.
            */
            public static GetAxisRaw ($axisName: string) : number
            /** Returns true while the virtual button identified by buttonName is held down.
            * @param $buttonName The name of the button such as Jump.
            * @returns True when an axis has been pressed and not released. 
            */
            public static GetButton ($buttonName: string) : boolean
            /** Returns true during the frame the user pressed down the virtual button identified by buttonName.
            */
            public static GetButtonDown ($buttonName: string) : boolean
            /** Returns true the first frame the user releases the virtual button identified by buttonName.
            */
            public static GetButtonUp ($buttonName: string) : boolean
            /** Returns whether the given mouse button is held down.
            */
            public static GetMouseButton ($button: number) : boolean
            /** Returns true during the frame the user pressed the given mouse button.
            */
            public static GetMouseButtonDown ($button: number) : boolean
            /** Returns true during the frame the user releases the given mouse button.
            */
            public static GetMouseButtonUp ($button: number) : boolean
            /** Resets all input. After ResetInputAxes all axes return to 0 and all buttons return to 0 for one frame.
            */
            public static ResetInputAxes () : void
            /** Determine whether a particular joystick model has been preconfigured by Unity. (Linux-only).
            * @param $joystickName The name of the joystick to check (returned by Input.GetJoystickNames).
            * @returns True if the joystick layout has been preconfigured; false otherwise. 
            */
            public static IsJoystickPreconfigured ($joystickName: string) : boolean
            /** Retrieves a list of input device names corresponding to the index of an Axis configured within Input Manager.
            * @returns Returns an array of joystick and gamepad device names. 
            */
            public static GetJoystickNames () : System.Array$1<string>
            /** Call Input.GetTouch to obtain a Touch struct.
            * @param $index The touch input on the device screen.
            * @returns Touch details in the struct. 
            */
            public static GetTouch ($index: number) : UnityEngine.Touch
            /** Returns the PenData for the pen event at the given index in the pen event queue.
            * @returns Pen event details in the struct. 
            */
            public static GetPenEvent ($index: number) : UnityEngine.PenData
            /** Returns the PenData for the last stored pen up or down event.
            * @returns Pen event details in the struct. 
            */
            public static GetLastPenContactEvent () : UnityEngine.PenData
            /** Clears the pen event queue.
            */
            public static ResetPenEvents () : void
            /** Clears the last stored pen event.
            Calling this function may impact event handling for UIToolKit elements.
            */
            public static ClearLastPenContactEvent () : void
            /** Returns specific acceleration measurement which occurred during last frame. (Does not allocate temporary variables).
            */
            public static GetAccelerationEvent ($index: number) : UnityEngine.AccelerationEvent
            /** Returns true while the user holds down the key identified by the key KeyCode enum parameter.
            */
            public static GetKey ($key: UnityEngine.KeyCode) : boolean
            /** Returns true while the user holds down the key identified by name.
            */
            public static GetKey ($name: string) : boolean
            /** Returns true during the frame the user releases the key identified by the key KeyCode enum parameter.
            */
            public static GetKeyUp ($key: UnityEngine.KeyCode) : boolean
            /** Returns true during the frame the user releases the key identified by name.
            */
            public static GetKeyUp ($name: string) : boolean
            /** Returns true during the frame the user starts pressing down the key identified by the key KeyCode enum parameter.
            */
            public static GetKeyDown ($key: UnityEngine.KeyCode) : boolean
            /** Returns true during the frame the user starts pressing down the key identified by name.
            */
            public static GetKeyDown ($name: string) : boolean
            public constructor ()
        }
        class GUIText extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** How multiline text should be aligned.
        */
        enum TextAlignment
        { Left = 0, Center = 1, Right = 2 }
        /** A struct that stores the settings for TextGeneration.
        */
        class TextGenerationSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Font to use for generation.
            */
            public font : UnityEngine.Font
            /** The base color for the text generation.
            */
            public color : UnityEngine.Color
            /** Font size.
            */
            public fontSize : number
            /** The line spacing multiplier.
            */
            public lineSpacing : number
            /** Allow rich text markup in generation.
            */
            public richText : boolean
            /** A scale factor for the text. This is useful if the Text is on a Canvas and the canvas is scaled.
            */
            public scaleFactor : number
            /** Font style.
            */
            public fontStyle : UnityEngine.FontStyle
            /** How is the generated text anchored.
            */
            public textAnchor : UnityEngine.TextAnchor
            /** Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics.
            */
            public alignByGeometry : boolean
            /** Should the text be resized to fit the configured bounds?
            */
            public resizeTextForBestFit : boolean
            /** Minimum size for resized text.
            */
            public resizeTextMinSize : number
            /** Maximum size for resized text.
            */
            public resizeTextMaxSize : number
            /** Should the text generator update the bounds from the generated text.
            */
            public updateBounds : boolean
            /** What happens to text when it reaches the bottom generation bounds.
            */
            public verticalOverflow : UnityEngine.VerticalWrapMode
            /** What happens to text when it reaches the horizontal generation bounds.
            */
            public horizontalOverflow : UnityEngine.HorizontalWrapMode
            /** Extents that the generator will attempt to fit the text in.
            */
            public generationExtents : UnityEngine.Vector2
            /** Generated vertices are offset by the pivot.
            */
            public pivot : UnityEngine.Vector2
            /** Continue to generate characters even if the text runs out of bounds.
            */
            public generateOutOfBounds : boolean
            public Equals ($other: UnityEngine.TextGenerationSettings) : boolean
        }
        /** Wrapping modes for text that reaches the vertical boundary.
        */
        enum VerticalWrapMode
        { Truncate = 0, Overflow = 1 }
        /** Wrapping modes for text that reaches the horizontal boundary.
        */
        enum HorizontalWrapMode
        { Wrap = 0, Overflow = 1 }
        /** Class that can be used to generate text for rendering.
        */
        class TextGenerator extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** The number of characters that have been generated and are included in the visible lines.
            */
            public get characterCountVisible(): number;
            /** Array of generated vertices.
            */
            public get verts(): System.Collections.Generic.IList$1<UnityEngine.UIVertex>;
            /** Array of generated characters.
            */
            public get characters(): System.Collections.Generic.IList$1<UnityEngine.UICharInfo>;
            /** Information about each generated text line.
            */
            public get lines(): System.Collections.Generic.IList$1<UnityEngine.UILineInfo>;
            /** Extents of the generated text in rect format.
            */
            public get rectExtents(): UnityEngine.Rect;
            /** Number of vertices generated.
            */
            public get vertexCount(): number;
            /** The number of characters that have been generated.
            */
            public get characterCount(): number;
            /** Number of text lines generated.
            */
            public get lineCount(): number;
            /** The size of the font that was found if using best fit mode.
            */
            public get fontSizeUsedForBestFit(): number;
            /** Mark the text generator as invalid. This will force a full text generation the next time Populate is called.
            */
            public Invalidate () : void
            public GetCharacters ($characters: System.Collections.Generic.List$1<UnityEngine.UICharInfo>) : void
            public GetLines ($lines: System.Collections.Generic.List$1<UnityEngine.UILineInfo>) : void
            public GetVertices ($vertices: System.Collections.Generic.List$1<UnityEngine.UIVertex>) : void
            /** Given a string and settings, returns the preferred width for a container that would hold this text.
            * @param $str Generation text.
            * @param $settings Settings for generation.
            * @returns Preferred width. 
            */
            public GetPreferredWidth ($str: string, $settings: UnityEngine.TextGenerationSettings) : number
            /** Given a string and settings, returns the preferred height for a container that would hold this text.
            * @param $str Generation text.
            * @param $settings Settings for generation.
            * @returns Preferred height. 
            */
            public GetPreferredHeight ($str: string, $settings: UnityEngine.TextGenerationSettings) : number
            /** Will generate the vertices and other data for the given string with the given settings.
            * @param $str String to generate.
            * @param $settings Generation settings.
            * @param $context The object used as context of the error log message, if necessary.
            * @returns True if the generation is a success, false otherwise. 
            */
            public PopulateWithErrors ($str: string, $settings: UnityEngine.TextGenerationSettings, $context: UnityEngine.GameObject) : boolean
            /** Will generate the vertices and other data for the given string with the given settings.
            * @param $str String to generate.
            * @param $settings Settings.
            */
            public Populate ($str: string, $settings: UnityEngine.TextGenerationSettings) : boolean
            /** Returns the current UIVertex array.
            * @returns Vertices. 
            */
            public GetVerticesArray () : System.Array$1<UnityEngine.UIVertex>
            /** Returns the current UICharInfo.
            * @returns Character information. 
            */
            public GetCharactersArray () : System.Array$1<UnityEngine.UICharInfo>
            /** Returns the current UILineInfo.
            * @returns Line information. 
            */
            public GetLinesArray () : System.Array$1<UnityEngine.UILineInfo>
            public constructor ()
            public constructor ($initialCapacity: number)
        }
        /** Class that specifies some information about a renderable character.
        */
        class UICharInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Position of the character cursor in local (text generated) space.
            */
            public cursorPos : UnityEngine.Vector2
            /** Character width.
            */
            public charWidth : number
        }
        /** Information about a generated line of text.
        */
        class UILineInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Index of the first character in the line.
            */
            public startCharIdx : number
            /** Height of the line.
            */
            public height : number
            /** The upper Y position of the line in pixels. This is used for text annotation such as the caret and selection box in the InputField.
            */
            public topY : number
            /** Space in pixels between this line and the next line.
            */
            public leading : number
        }
        /** Vertex class used by a Canvas for managing vertices.
        */
        class UIVertex extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Vertex position.
            */
            public position : UnityEngine.Vector3
            /** Normal.
            */
            public normal : UnityEngine.Vector3
            /** Tangent.
            */
            public tangent : UnityEngine.Vector4
            /** Vertex color.
            */
            public color : UnityEngine.Color32
            /** The first texture coordinate set of the mesh. Used by UI elements by default.
            */
            public uv0 : UnityEngine.Vector4
            /** The second texture coordinate set of the mesh, if present.
            */
            public uv1 : UnityEngine.Vector4
            /** The Third texture coordinate set of the mesh, if present.
            */
            public uv2 : UnityEngine.Vector4
            /** The forth texture coordinate set of the mesh, if present.
            */
            public uv3 : UnityEngine.Vector4
            /** Simple UIVertex with sensible settings for use in the UI system.
            */
            public static simpleVert : UnityEngine.UIVertex
        }
        /** A script interface for the.
        */
        class TextMesh extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** The text that is displayed.
            */
            public get text(): string;
            public set text(value: string);
            /** The Font used.
            */
            public get font(): UnityEngine.Font;
            public set font(value: UnityEngine.Font);
            /** The font size to use (for dynamic fonts).
            */
            public get fontSize(): number;
            public set fontSize(value: number);
            /** The font style to use (for dynamic fonts).
            */
            public get fontStyle(): UnityEngine.FontStyle;
            public set fontStyle(value: UnityEngine.FontStyle);
            /** How far should the text be offset from the transform.position.z when drawing.
            */
            public get offsetZ(): number;
            public set offsetZ(value: number);
            /** How lines of text are aligned (Left, Right, Center).
            */
            public get alignment(): UnityEngine.TextAlignment;
            public set alignment(value: UnityEngine.TextAlignment);
            /** Which point of the text shares the position of the Transform.
            */
            public get anchor(): UnityEngine.TextAnchor;
            public set anchor(value: UnityEngine.TextAnchor);
            /** The size of each character (This scales the whole text).
            */
            public get characterSize(): number;
            public set characterSize(value: number);
            /** How much space will be in-between lines of text.
            */
            public get lineSpacing(): number;
            public set lineSpacing(value: number);
            /** How much space will be inserted for a tab '\t' character. This is a multiplum of the 'spacebar' character offset.
            */
            public get tabSize(): number;
            public set tabSize(value: number);
            /** Enable HTML-style tags for Text Formatting Markup.
            */
            public get richText(): boolean;
            public set richText(value: boolean);
            /** The color used to render the text.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            public constructor ()
        }
        /** Specification for how to render a character from the font texture. See Font.characterInfo.
        */
        class CharacterInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Unicode value of the character.
            */
            public index : number
            /** The size of the character or 0 if it is the default font size.
            */
            public size : number
            /** The style of the character.
            */
            public style : UnityEngine.FontStyle
            /** The horizontal distance, rounded to the nearest integer, from the origin of this character to the origin of the next character.
            */
            public get advance(): number;
            public set advance(value: number);
            /** The width of the glyph image.
            */
            public get glyphWidth(): number;
            public set glyphWidth(value: number);
            /** The height of the glyph image.
            */
            public get glyphHeight(): number;
            public set glyphHeight(value: number);
            /** The horizontal distance from the origin of this glyph to the begining of the glyph image.
            */
            public get bearing(): number;
            public set bearing(value: number);
            /** The minimum extend of the glyph image in the y-axis.
            */
            public get minY(): number;
            public set minY(value: number);
            /** The maximum extend of the glyph image in the y-axis.
            */
            public get maxY(): number;
            public set maxY(value: number);
            /** The minium extend of the glyph image in the x-axis.
            */
            public get minX(): number;
            public set minX(value: number);
            /** The maximum extend of the glyph image in the x-axis.
            */
            public get maxX(): number;
            public set maxX(value: number);
            /** The uv coordinate matching the bottom left of the glyph image in the font texture.
            */
            public get uvBottomLeft(): UnityEngine.Vector2;
            public set uvBottomLeft(value: UnityEngine.Vector2);
            /** The uv coordinate matching the bottom right of the glyph image in the font texture.
            */
            public get uvBottomRight(): UnityEngine.Vector2;
            public set uvBottomRight(value: UnityEngine.Vector2);
            /** The uv coordinate matching the top right of the glyph image in the font texture.
            */
            public get uvTopRight(): UnityEngine.Vector2;
            public set uvTopRight(value: UnityEngine.Vector2);
            /** The uv coordinate matching the top left of the glyph image in the font texture.
            */
            public get uvTopLeft(): UnityEngine.Vector2;
            public set uvTopLeft(value: UnityEngine.Vector2);
        }
        interface ICanvasRaycastFilter
        {
            /** Given a point and a camera is the raycast valid.
            * @param $sp Screen position.
            * @param $eventCamera Raycast camera.
            * @returns Valid. 
            */
            IsRaycastLocationValid ($sp: UnityEngine.Vector2, $eventCamera: UnityEngine.Camera) : boolean
        }
        /** A Canvas placable element that can be used to modify children Alpha, Raycasting, Enabled state.
        */
        class CanvasGroup extends UnityEngine.Behaviour implements UnityEngine.ICanvasRaycastFilter
        {
            protected [__keep_incompatibility]: never;
            /** Set the alpha of the group.
            */
            public get alpha(): number;
            public set alpha(value: number);
            /** Is the group interactable (are the elements beneath the group enabled).
            */
            public get interactable(): boolean;
            public set interactable(value: boolean);
            /** Does this group block raycasting (allow collision).
            */
            public get blocksRaycasts(): boolean;
            public set blocksRaycasts(value: boolean);
            /** Should the group ignore parent groups?
            */
            public get ignoreParentGroups(): boolean;
            public set ignoreParentGroups(value: boolean);
            /** Returns true if the Group allows raycasts.
            */
            public IsRaycastLocationValid ($sp: UnityEngine.Vector2, $eventCamera: UnityEngine.Camera) : boolean
            public constructor ()
        }
        /** A component that will render to the screen after all normal rendering has completed when attached to a Canvas. Designed for GUI application.
        */
        class CanvasRenderer extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Enable 'render stack' pop draw call.
            */
            public get hasPopInstruction(): boolean;
            public set hasPopInstruction(value: boolean);
            /** The number of materials usable by this renderer.
            */
            public get materialCount(): number;
            public set materialCount(value: number);
            /** The number of materials usable by this renderer. Used internally for masking.
            */
            public get popMaterialCount(): number;
            public set popMaterialCount(value: number);
            /** Depth of the renderer relative to the root canvas.
            */
            public get absoluteDepth(): number;
            /** True if any change has occured that would invalidate the positions of generated geometry.
            */
            public get hasMoved(): boolean;
            /** Indicates whether geometry emitted by this renderer can be ignored when the vertex color alpha is close to zero for every vertex of the mesh.
            */
            public get cullTransparentMesh(): boolean;
            public set cullTransparentMesh(value: boolean);
            /** True if rect clipping has been enabled on this renderer.
            Additional resources: CanvasRenderer.EnableRectClipping, CanvasRenderer.DisableRectClipping.
            */
            public get hasRectClipping(): boolean;
            /** Depth of the renderer realative to the parent canvas.
            */
            public get relativeDepth(): number;
            /** Indicates whether geometry emitted by this renderer is ignored.
            */
            public get cull(): boolean;
            public set cull(value: boolean);
            /** The clipping softness to apply to the renderer.
            */
            public get clippingSoftness(): UnityEngine.Vector2;
            public set clippingSoftness(value: UnityEngine.Vector2);
            /** Set the color of the renderer. Will be multiplied with the UIVertex color and the Canvas color.
            * @param $color Renderer multiply color.
            */
            public SetColor ($color: UnityEngine.Color) : void
            /** Get the current color of the renderer.
            */
            public GetColor () : UnityEngine.Color
            /** Enables rect clipping on the CanvasRendered. Geometry outside of the specified rect will be clipped (not rendered).
            */
            public EnableRectClipping ($rect: UnityEngine.Rect) : void
            /** Disables rectangle clipping for this CanvasRenderer.
            */
            public DisableRectClipping () : void
            /** Set the material for the canvas renderer. If a texture is specified then it will be used as the 'MainTex' instead of the material's 'MainTex'.
            Additional resources: CanvasRenderer.materialCount, CanvasRenderer.SetTexture.
            * @param $material Material for rendering.
            * @param $texture Material texture overide.
            * @param $index Material index.
            */
            public SetMaterial ($material: UnityEngine.Material, $index: number) : void
            /** Gets the current Material assigned to the CanvasRenderer.
            * @param $index The material index to retrieve (0 if this parameter is omitted).
            * @returns Result. 
            */
            public GetMaterial ($index: number) : UnityEngine.Material
            /** Set the material for the canvas renderer. Used internally for masking.
            */
            public SetPopMaterial ($material: UnityEngine.Material, $index: number) : void
            /** Gets the current Material assigned to the CanvasRenderer. Used internally for masking.
            */
            public GetPopMaterial ($index: number) : UnityEngine.Material
            /** Sets the texture used by this renderer's material.
            */
            public SetTexture ($texture: UnityEngine.Texture) : void
            /** The Alpha Texture that will be passed to the Shader under the _AlphaTex property.
            * @param $texture The Texture to be passed.
            */
            public SetAlphaTexture ($texture: UnityEngine.Texture) : void
            /** Sets the Mesh used by this renderer. Note the Mesh must be read/write enabled.
            */
            public SetMesh ($mesh: UnityEngine.Mesh) : void
            /** Returns the current mesh used to render the canvas content into.
            * @returns The current mesh for the canvas. 
            */
            public GetMesh () : UnityEngine.Mesh
            /** Remove all cached vertices.
            */
            public Clear () : void
            /** Get the current alpha of the renderer.
            */
            public GetAlpha () : number
            /** Set the alpha of the renderer. Will be multiplied with the UIVertex alpha and the Canvas alpha.
            * @param $alpha Alpha.
            */
            public SetAlpha ($alpha: number) : void
            /** Get the final inherited alpha calculated by including all the parent alphas from included parent CanvasGroups.
            * @returns The calculated inherited alpha. 
            */
            public GetInheritedAlpha () : number
            /** Set the material for the canvas renderer. If a texture is specified then it will be used as the 'MainTex' instead of the material's 'MainTex'.
            Additional resources: CanvasRenderer.materialCount, CanvasRenderer.SetTexture.
            * @param $material Material for rendering.
            * @param $texture Material texture overide.
            * @param $index Material index.
            */
            public SetMaterial ($material: UnityEngine.Material, $texture: UnityEngine.Texture) : void
            /** Gets the current Material assigned to the CanvasRenderer.
            * @param $index The material index to retrieve (0 if this parameter is omitted).
            * @returns Result. 
            */
            public GetMaterial () : UnityEngine.Material
            public static SplitUIVertexStreams ($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $indices: System.Collections.Generic.List$1<number>) : void
            public static SplitUIVertexStreams ($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv2S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv3S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $indices: System.Collections.Generic.List$1<number>) : void
            public static CreateUIVertexStream ($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $indices: System.Collections.Generic.List$1<number>) : void
            public static CreateUIVertexStream ($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv2S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv3S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $indices: System.Collections.Generic.List$1<number>) : void
            public static AddUIVertexStream ($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public static AddUIVertexStream ($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv2S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv3S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public static add_onRequestRebuild ($value: UnityEngine.CanvasRenderer.OnRequestRebuild) : void
            public static remove_onRequestRebuild ($value: UnityEngine.CanvasRenderer.OnRequestRebuild) : void
            public constructor ()
        }
        /** Utility class containing helper methods for working with  RectTransform.
        */
        class RectTransformUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Convert a given point in screen space into a pixel correct point.
            * @returns Pixel adjusted point. 
            */
            public static PixelAdjustPoint ($point: UnityEngine.Vector2, $elementTransform: UnityEngine.Transform, $canvas: UnityEngine.Canvas) : UnityEngine.Vector2
            /** Given a rect transform, return the corner points in pixel accurate coordinates.
            * @returns Pixel adjusted rect. 
            */
            public static PixelAdjustRect ($rectTransform: UnityEngine.RectTransform, $canvas: UnityEngine.Canvas) : UnityEngine.Rect
            public static RectangleContainsScreenPoint ($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2) : boolean
            /** Does the RectTransform contain the screen point as seen from the given camera?
            * @param $rect The RectTransform to test with.
            * @param $screenPoint The screen point to test.
            * @param $cam The camera from which the test is performed from. (Optional)
            * @returns True if the point is inside the rectangle. 
            */
            public static RectangleContainsScreenPoint ($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2, $cam: UnityEngine.Camera) : boolean
            public static RectangleContainsScreenPoint ($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2, $cam: UnityEngine.Camera, $offset: UnityEngine.Vector4) : boolean
            /** Transform a screen space point to a position in world space that is on the plane of the given RectTransform.
            * @param $rect The RectTransform to find a point inside.
            * @param $cam The camera associated with the screen space position.
            * @param $screenPoint Screen space position.
            * @param $worldPoint Point in world space.
            * @returns Returns true if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle. 
            */
            public static ScreenPointToWorldPointInRectangle ($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2, $cam: UnityEngine.Camera, $worldPoint: $Ref<UnityEngine.Vector3>) : boolean
            /** Transform a screen space point to a position in the local space of a RectTransform that is on the plane of its rectangle.
            * @param $rect The RectTransform to find a point inside.
            * @param $cam The camera associated with the screen space position.
            * @param $screenPoint Screen space position.
            * @param $localPoint Point in local space of the rect transform.
            * @returns Returns true if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle. 
            */
            public static ScreenPointToLocalPointInRectangle ($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2, $cam: UnityEngine.Camera, $localPoint: $Ref<UnityEngine.Vector2>) : boolean
            public static ScreenPointToRay ($cam: UnityEngine.Camera, $screenPos: UnityEngine.Vector2) : UnityEngine.Ray
            public static WorldToScreenPoint ($cam: UnityEngine.Camera, $worldPoint: UnityEngine.Vector3) : UnityEngine.Vector2
            /** Creates a Bounds object that encapsulates all the child RectTransform objects found in the child parameter, and converts the resulting bounds into local space relative to the root transform.
            * @param $root The Transform to use when converting from world to local space.
            * @param $child The parent Transform object whose RectTransform children will be encapsulated.
            * @param $trans The Transfdorm to both search for RectTransform children and convert into world to local space.
            * @returns A Bounds object representing the encapsulated bounds in local space relative to the root Transform. 
            */
            public static CalculateRelativeRectTransformBounds ($root: UnityEngine.Transform, $child: UnityEngine.Transform) : UnityEngine.Bounds
            /** Creates a Bounds object that encapsulates all the child RectTransform objects found in the child parameter, and converts the resulting bounds into local space relative to the root transform.
            * @param $root The Transform to use when converting from world to local space.
            * @param $child The parent Transform object whose RectTransform children will be encapsulated.
            * @param $trans The Transfdorm to both search for RectTransform children and convert into world to local space.
            * @returns A Bounds object representing the encapsulated bounds in local space relative to the root Transform. 
            */
            public static CalculateRelativeRectTransformBounds ($trans: UnityEngine.Transform) : UnityEngine.Bounds
            /** Flips the alignment of the RectTransform along the horizontal or vertical axis, and optionally its children as well.
            * @param $rect The RectTransform to flip.
            * @param $keepPositioning Flips around the pivot if true. Flips within the parent rect if false.
            * @param $recursive Flip the children as well?
            * @param $axis The axis to flip along. 0 is horizontal and 1 is vertical.
            */
            public static FlipLayoutOnAxis ($rect: UnityEngine.RectTransform, $axis: number, $keepPositioning: boolean, $recursive: boolean) : void
            /** Flips the horizontal and vertical axes of the RectTransform size and alignment, and optionally its children as well.
            * @param $rect The RectTransform to flip.
            * @param $keepPositioning Flips around the pivot if true. Flips within the parent rect if false.
            * @param $recursive Flip the children as well?
            */
            public static FlipLayoutAxes ($rect: UnityEngine.RectTransform, $keepPositioning: boolean, $recursive: boolean) : void
        }
        /** Element that can be used for screen rendering.
        */
        class Canvas extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Is the Canvas in World or Overlay mode?
            */
            public get renderMode(): UnityEngine.RenderMode;
            public set renderMode(value: UnityEngine.RenderMode);
            /** Is this the root Canvas?
            */
            public get isRootCanvas(): boolean;
            /** Get the render rect for the Canvas.
            */
            public get pixelRect(): UnityEngine.Rect;
            /** Used to scale the entire canvas, while still making it fit the screen. Only applies with renderMode is Screen Space.
            */
            public get scaleFactor(): number;
            public set scaleFactor(value: number);
            /** The number of pixels per unit that is considered the default.
            */
            public get referencePixelsPerUnit(): number;
            public set referencePixelsPerUnit(value: number);
            /** Allows for nested canvases to override pixelPerfect settings inherited from parent canvases.
            */
            public get overridePixelPerfect(): boolean;
            public set overridePixelPerfect(value: boolean);
            /** Should the Canvas vertex color always be in gamma space before passing to the UI shaders in linear color space work flow.
            */
            public get vertexColorAlwaysGammaSpace(): boolean;
            public set vertexColorAlwaysGammaSpace(value: boolean);
            /** Force elements in the canvas to be aligned with pixels. Only applies with renderMode is Screen Space.
            */
            public get pixelPerfect(): boolean;
            public set pixelPerfect(value: boolean);
            /** How far away from the camera is the Canvas generated.
            */
            public get planeDistance(): number;
            public set planeDistance(value: number);
            /** The render order in which the canvas is being emitted to the Scene. (Read Only)
            */
            public get renderOrder(): number;
            /** Override the sorting of canvas.
            */
            public get overrideSorting(): boolean;
            public set overrideSorting(value: boolean);
            /** Canvas' order within a sorting layer.
            */
            public get sortingOrder(): number;
            public set sortingOrder(value: number);
            /** For Overlay mode, display index on which the UI canvas will appear.
            */
            public get targetDisplay(): number;
            public set targetDisplay(value: number);
            /** Unique ID of the Canvas' sorting layer.
            */
            public get sortingLayerID(): number;
            public set sortingLayerID(value: number);
            /** Cached calculated value based upon SortingLayerID.
            */
            public get cachedSortingLayerValue(): number;
            /** Get or set the mask of additional shader channels to be used when creating the Canvas mesh.
            */
            public get additionalShaderChannels(): UnityEngine.AdditionalCanvasShaderChannels;
            public set additionalShaderChannels(value: UnityEngine.AdditionalCanvasShaderChannels);
            /** Name of the Canvas' sorting layer.
            */
            public get sortingLayerName(): string;
            public set sortingLayerName(value: string);
            /** Returns the Canvas closest to root, by checking through each parent and returning the last canvas found. If no other canvas is found then the canvas will return itself.
            */
            public get rootCanvas(): UnityEngine.Canvas;
            /** Returns the canvas display size based on the selected render mode and target display.
            */
            public get renderingDisplaySize(): UnityEngine.Vector2;
            /** Should the Canvas size be updated based on the render target when a manual Camera.Render call is performed.
            */
            public get updateRectTransformForStandalone(): UnityEngine.StandaloneRenderResize;
            public set updateRectTransformForStandalone(value: UnityEngine.StandaloneRenderResize);
            /** Camera used for sizing the Canvas when in Screen Space - Camera. Also used as the Camera that events will be sent through for a World Space Canvas.
            */
            public get worldCamera(): UnityEngine.Camera;
            public set worldCamera(value: UnityEngine.Camera);
            /** The normalized grid size that the canvas will split the renderable area into.
            */
            public get normalizedSortingGridSize(): number;
            public set normalizedSortingGridSize(value: number);
            public static add_preWillRenderCanvases ($value: UnityEngine.Canvas.WillRenderCanvases) : void
            public static remove_preWillRenderCanvases ($value: UnityEngine.Canvas.WillRenderCanvases) : void
            public static add_willRenderCanvases ($value: UnityEngine.Canvas.WillRenderCanvases) : void
            public static remove_willRenderCanvases ($value: UnityEngine.Canvas.WillRenderCanvases) : void
            /** Returns the default material that can be used for rendering normal elements on the Canvas.
            */
            public static GetDefaultCanvasMaterial () : UnityEngine.Material
            /** Gets or generates the ETC1 Material.
            * @returns The generated ETC1 Material from the Canvas. 
            */
            public static GetETC1SupportedCanvasMaterial () : UnityEngine.Material
            /** Force all canvases to update their content.
            */
            public static ForceUpdateCanvases () : void
            public constructor ()
        }
        /** RenderMode for the Canvas.
        */
        enum RenderMode
        { ScreenSpaceOverlay = 0, ScreenSpaceCamera = 1, WorldSpace = 2 }
        /** Enum used to determine if a Canvas should be resized when a manual Camera.Render call is performed.
        */
        enum StandaloneRenderResize
        { Enabled = 0, Disabled = 1 }
        /** Enum mask of possible shader channel properties that can also be included when the Canvas mesh is created.
        */
        enum AdditionalCanvasShaderChannels
        { None = 0, TexCoord1 = 1, TexCoord2 = 2, TexCoord3 = 4, Normal = 8, Tangent = 16 }
        class UISystemProfilerApi extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static BeginSample ($type: UnityEngine.UISystemProfilerApi.SampleType) : void
            public static EndSample ($type: UnityEngine.UISystemProfilerApi.SampleType) : void
            public static AddMarker ($name: string, $obj: UnityEngine.Object) : void
        }
        /** Utility functions for working with JSON data.
        */
        class JsonUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Generate a JSON representation of the public fields of an object.
            * @param $obj The object to convert to JSON form.
            * @param $prettyPrint If true, format the output for readability. If false, format the output for minimum size. Default is false.
            * @returns The object's data in JSON format. 
            */
            public static ToJson ($obj: any) : string
            /** Generate a JSON representation of the public fields of an object.
            * @param $obj The object to convert to JSON form.
            * @param $prettyPrint If true, format the output for readability. If false, format the output for minimum size. Default is false.
            * @returns The object's data in JSON format. 
            */
            public static ToJson ($obj: any, $prettyPrint: boolean) : string
            /** Create an object from its JSON representation.
            * @param $json The JSON representation of the object.
            * @param $type The type of object represented by the Json.
            * @returns An instance of the object. 
            */
            public static FromJson ($json: string, $type: System.Type) : any
            /** Overwrite data in an object by reading from its JSON representation.
            * @param $json The JSON representation of the object.
            * @param $objectToOverwrite The object that should be overwritten.
            */
            public static FromJsonOverwrite ($json: string, $objectToOverwrite: any) : void
        }
    }
    namespace UnityEngine.UIElements.Experimental {
        interface ITransitionAnimations
        {
            Start ($from: number, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            Start ($from: UnityEngine.Rect, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            Start ($from: UnityEngine.Color, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            Start ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            Start ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            Start ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $from Start value.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            Start ($from: UnityEngine.UIElements.Experimental.StyleValues, $to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            /** 
            Starts a transition animation on this VisualElement.
            * @param $to End value.
            * @param $durationMs Duration of the transition in milliseconds.
            * @returns The created animation object. 
            */
            Start ($to: UnityEngine.UIElements.Experimental.StyleValues, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.UIElements.Experimental.StyleValues>
            Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, number>, $to: number, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>, $to: UnityEngine.Rect, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>, $to: UnityEngine.Color, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Color>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Color>
            Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>, $to: UnityEngine.Vector3, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>, $to: UnityEngine.Vector2, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            Start ($fromValueGetter: System.Func$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>, $to: UnityEngine.Quaternion, $durationMs: number, $onValueChanged: System.Action$2<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
            /** 
            Triggers an animation changing this element's layout style values.
            */
            Layout ($to: UnityEngine.Rect, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Rect>
            /** 
            Triggers an animation changing this element's positioning style values.
            */
            TopLeft ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's size style values.
            */
            Size ($to: UnityEngine.Vector2, $durationMs: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector2>
            /** 
            Triggers an animation changing this element's transform scale.
            */
            Scale ($to: number, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<number>
            /** 
            Triggers an animation changing this element's transform position.
            */
            Position ($to: UnityEngine.Vector3, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Vector3>
            /** 
            Triggers an animation changing this element's transform rotation.
            */
            Rotation ($to: UnityEngine.Quaternion, $duration: number) : UnityEngine.UIElements.Experimental.ValueAnimation$1<UnityEngine.Quaternion>
        }
        /** 
        A collection of easing curves to be used with ValueAnimations.
        */
        class Easing extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Step ($t: number) : number
            public static Linear ($t: number) : number
            public static InSine ($t: number) : number
            public static OutSine ($t: number) : number
            public static InOutSine ($t: number) : number
            public static InQuad ($t: number) : number
            public static OutQuad ($t: number) : number
            public static InOutQuad ($t: number) : number
            public static InCubic ($t: number) : number
            public static OutCubic ($t: number) : number
            public static InOutCubic ($t: number) : number
            public static InPower ($t: number, $power: number) : number
            public static OutPower ($t: number, $power: number) : number
            public static InOutPower ($t: number, $power: number) : number
            public static InBounce ($t: number) : number
            public static OutBounce ($t: number) : number
            public static InOutBounce ($t: number) : number
            public static InElastic ($t: number) : number
            public static OutElastic ($t: number) : number
            public static InOutElastic ($t: number) : number
            public static InBack ($t: number) : number
            public static OutBack ($t: number) : number
            public static InOutBack ($t: number) : number
            public static InBack ($t: number, $s: number) : number
            public static OutBack ($t: number, $s: number) : number
            public static InOutBack ($t: number, $s: number) : number
            public static InCirc ($t: number) : number
            public static OutCirc ($t: number) : number
            public static InOutCirc ($t: number) : number
        }
        /** 
        This event is sent when a pointer enters a link tag.
        */
        class PointerOverLinkTagEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.Experimental.PointerOverLinkTagEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            LinkTag corresponding linkID.
            */
            public get linkID(): string;
            /** 
            LinkTag corresponding text.
            */
            public get linkText(): string;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @returns An initialized event. 
            */
            public static GetPooled ($evt: UnityEngine.UIElements.IPointerEvent, $linkID: string, $linkText: string) : UnityEngine.UIElements.Experimental.PointerOverLinkTagEvent
            public constructor ()
        }
        /** 
        This event is sent when a pointer changes state on a link tag.
        */
        class PointerMoveLinkTagEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.Experimental.PointerMoveLinkTagEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            LinkTag corresponding linkID.
            */
            public get linkID(): string;
            /** 
            LinkTag corresponding text.
            */
            public get linkText(): string;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @returns An initialized event. 
            */
            public static GetPooled ($evt: UnityEngine.UIElements.IPointerEvent, $linkID: string, $linkText: string) : UnityEngine.UIElements.Experimental.PointerMoveLinkTagEvent
            public constructor ()
        }
        /** 
        This event is sent when a pointer exits a link tag.
        */
        class PointerOutLinkTagEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.Experimental.PointerOutLinkTagEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @returns An initialized event. 
            */
            public static GetPooled ($evt: UnityEngine.UIElements.IPointerEvent, $linkID: string) : UnityEngine.UIElements.Experimental.PointerOutLinkTagEvent
            public constructor ()
        }
        /** 
        This event is sent when a pointer is pressed on a Link tag.
        */
        class PointerDownLinkTagEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.Experimental.PointerDownLinkTagEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            LinkTag corresponding linkID.
            */
            public get linkID(): string;
            /** 
            LinkTag corresponding text.
            */
            public get linkText(): string;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @returns An initialized event. 
            */
            public static GetPooled ($evt: UnityEngine.UIElements.IPointerEvent, $linkID: string, $linkText: string) : UnityEngine.UIElements.Experimental.PointerDownLinkTagEvent
            public constructor ()
        }
        /** 
        This event is sent when a pointer's last pressed button is released on a link tag.
        */
        class PointerUpLinkTagEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.Experimental.PointerUpLinkTagEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            LinkTag corresponding linkID.
            */
            public get linkID(): string;
            /** 
            LinkTag corresponding text.
            */
            public get linkText(): string;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @returns An initialized event. 
            */
            public static GetPooled ($evt: UnityEngine.UIElements.IPointerEvent, $linkID: string, $linkText: string) : UnityEngine.UIElements.Experimental.PointerUpLinkTagEvent
            public constructor ()
        }
        /** 
        Container object used to animate multiple style values at once.
        */
        class StyleValues extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            public set top(value: number);
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            public set left(value: number);
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            public set width(value: number);
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            public set height(value: number);
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            public set right(value: number);
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            public set bottom(value: number);
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            public set backgroundColor(value: UnityEngine.Color);
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            public set unityBackgroundImageTintColor(value: UnityEngine.Color);
            /** 
            Color of the border to paint inside the element's box.
            */
            public get borderColor(): UnityEngine.Color;
            public set borderColor(value: UnityEngine.Color);
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            public set marginLeft(value: number);
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            public set marginTop(value: number);
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            public set marginRight(value: number);
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            public set marginBottom(value: number);
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            public set paddingLeft(value: number);
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            public set paddingTop(value: number);
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            public set paddingRight(value: number);
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            public set paddingBottom(value: number);
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            public set borderLeftWidth(value: number);
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            public set borderRightWidth(value: number);
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            public set borderTopWidth(value: number);
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            public set borderBottomWidth(value: number);
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            public set borderTopLeftRadius(value: number);
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            public set borderTopRightRadius(value: number);
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            public set borderBottomLeftRadius(value: number);
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            public set borderBottomRightRadius(value: number);
            /** 
            Specifies the transparency of an element.
            */
            public get opacity(): number;
            public set opacity(value: number);
            /** 
            Specifies how much the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            public set flexGrow(value: number);
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            public set flexShrink(value: number);
        }
        class ValueAnimation$1<T> extends System.Object implements UnityEngine.UIElements.Experimental.IValueAnimationUpdate, UnityEngine.UIElements.Experimental.IValueAnimation
        {
            protected [__keep_incompatibility]: never;
            public get durationMs(): number;
            public set durationMs(value: number);
            public get easingCurve(): System.Func$2<number, number>;
            public set easingCurve(value: System.Func$2<number, number>);
            public get isRunning(): boolean;
            public get onAnimationCompleted(): System.Action;
            public set onAnimationCompleted(value: System.Action);
            public get autoRecycle(): boolean;
            public set autoRecycle(value: boolean);
            public get valueUpdated(): System.Action$2<UnityEngine.UIElements.VisualElement, T>;
            public set valueUpdated(value: System.Action$2<UnityEngine.UIElements.VisualElement, T>);
            public get initialValue(): System.Func$2<UnityEngine.UIElements.VisualElement, T>;
            public set initialValue(value: System.Func$2<UnityEngine.UIElements.VisualElement, T>);
            public get interpolator(): System.Func$4<T, T, number, T>;
            public set interpolator(value: System.Func$4<T, T, number, T>);
            public get from(): T;
            public set from(value: T);
            public get to(): T;
            public set to(value: T);
            public Start () : void
            public Stop () : void
            public Recycle () : void
            public static Create ($e: any, $interpolator: any) : any
            public Ease ($easing: System.Func$2<number, number>) : UnityEngine.UIElements.Experimental.ValueAnimation$1<T>
            public OnCompleted ($callback: System.Action) : UnityEngine.UIElements.Experimental.ValueAnimation$1<T>
            public KeepAlive () : UnityEngine.UIElements.Experimental.ValueAnimation$1<T>
            public constructor ()
        }
        interface IValueAnimationUpdate
        {
        }
        interface IValueAnimation
        {
            /** 
            Tells if the animation is currently active.
            */
            isRunning : boolean
            /** 
            Duration of the transition in milliseconds.
            */
            durationMs : number
            /** 
            Starts the animation using this object's values.
            */
            Start () : void
            /** 
            Stops this animation.
            */
            Stop () : void
            /** 
            Returns this animation object into its object pool.
            */
            Recycle () : void
        }
    }
    namespace UnityEngine.UIElements.VisualElement {
        class UxmlSerializedData extends UnityEngine.UIElements.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
        }
        enum MeasureMode
        { Undefined = 0, Exactly = 1, AtMost = 2 }
        class Hierarchy extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get parent(): UnityEngine.UIElements.VisualElement;
            public get childCount(): number;
            public Add ($child: UnityEngine.UIElements.VisualElement) : void
            public Insert ($index: number, $child: UnityEngine.UIElements.VisualElement) : void
            public Remove ($child: UnityEngine.UIElements.VisualElement) : void
            public RemoveAt ($index: number) : void
            public Clear () : void
            public get_Item ($key: number) : UnityEngine.UIElements.VisualElement
            public IndexOf ($element: UnityEngine.UIElements.VisualElement) : number
            public ElementAt ($index: number) : UnityEngine.UIElements.VisualElement
            public Children () : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.VisualElement>
            public Sort ($comp: System.Comparison$1<UnityEngine.UIElements.VisualElement>) : void
            public Equals ($other: UnityEngine.UIElements.VisualElement.Hierarchy) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($x: UnityEngine.UIElements.VisualElement.Hierarchy, $y: UnityEngine.UIElements.VisualElement.Hierarchy) : boolean
            public static op_Inequality ($x: UnityEngine.UIElements.VisualElement.Hierarchy, $y: UnityEngine.UIElements.VisualElement.Hierarchy) : boolean
        }
    }
    namespace UnityEngine.UIElements.BindableElement {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.UIElements.Binding {
        class UxmlSerializedData extends UnityEngine.UIElements.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace Unity.Properties {
        /** 
        A PropertyPath is used to store a reference to a single property within a tree.
        */
        class PropertyPath extends System.ValueType implements System.IEquatable$1<Unity.Properties.PropertyPath>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the number of parts contained in the PropertyPath.
            */
            public get Length(): number;
            /** 
            Gets if there is any part contained in the PropertyPath.
            */
            public get IsEmpty(): boolean;
            public get_Item ($index: number) : Unity.Properties.PropertyPathPart
            /** 
            Returns a new PropertyPath from the provided PropertyPathPart.
            * @param $part The <see cref="PropertyPathPart" />
            * @returns A new PropertyPath 
            */
            public static FromPart ($part: $Ref<Unity.Properties.PropertyPathPart>) : Unity.Properties.PropertyPath
            /** 
            Returns a new PropertyPath from the provided name.
            * @param $name The name of the <see cref="PropertyPathPart" />.
            * @returns A new PropertyPath 
            */
            public static FromName ($name: string) : Unity.Properties.PropertyPath
            /** 
            Returns a new PropertyPath from the provided index.
            * @param $index The index of the <see cref="PropertyPathPart" />.
            * @returns A new PropertyPath 
            */
            public static FromIndex ($index: number) : Unity.Properties.PropertyPath
            /** 
            Returns a new PropertyPath from the provided key.
            * @param $key The key of the <see cref="PropertyPathPart" />.
            * @returns A new PropertyPath 
            */
            public static FromKey ($key: any) : Unity.Properties.PropertyPath
            /** 
            Returns a new PropertyPath combining the parts of the two given PropertyPath.
            * @param $path The <see cref="PropertyPath" />
            * @param $pathToAppend The <see cref="PropertyPath" /> to append.
            * @returns A new PropertyPath 
            */
            public static Combine ($path: $Ref<Unity.Properties.PropertyPath>, $pathToAppend: $Ref<Unity.Properties.PropertyPath>) : Unity.Properties.PropertyPath
            /** 
            Returns a new PropertyPath combining the parts of the two given PropertyPath.
            * @param $path The <see cref="PropertyPath" />
            * @param $pathToAppend The string path to append.
            * @returns A new PropertyPath 
            */
            public static Combine ($path: $Ref<Unity.Properties.PropertyPath>, $pathToAppend: string) : Unity.Properties.PropertyPath
            /** 
            Returns a new PropertyPath combining the given PropertyPath and PropertyPathPart.
            * @param $path The <see cref="PropertyPath" />
            * @param $part The part to add.
            * @returns A new PropertyPath 
            */
            public static AppendPart ($path: $Ref<Unity.Properties.PropertyPath>, $part: $Ref<Unity.Properties.PropertyPathPart>) : Unity.Properties.PropertyPath
            /** 
            Returns a new PropertyPath combining the given PropertyPath and an name-type
            PropertyPathPart.
            * @param $path The <see cref="PropertyPath" />
            * @param $name The part name to add.
            * @returns A new PropertyPath 
            */
            public static AppendName ($path: $Ref<Unity.Properties.PropertyPath>, $name: string) : Unity.Properties.PropertyPath
            /** 
            Returns a new PropertyPath combining the given PropertyPath and an index-type
            PropertyPathPart.
            * @param $path The <see cref="PropertyPath" />
            * @param $index The index to add.
            * @returns A new PropertyPath 
            */
            public static AppendIndex ($path: $Ref<Unity.Properties.PropertyPath>, $index: number) : Unity.Properties.PropertyPath
            /** 
            Returns a new PropertyPath combining the given PropertyPath and an key-type
            PropertyPathPart.
            * @param $path The <see cref="PropertyPath" />
            * @param $key The key to add.
            * @returns A new PropertyPath 
            */
            public static AppendKey ($path: $Ref<Unity.Properties.PropertyPath>, $key: any) : Unity.Properties.PropertyPath
            /** 
            Returns a new PropertyPath combining the given PropertyPath and a PropertyPathPart
            whose type will be based on the property interfaces.
            * @param $path The <see cref="PropertyPath" />
            * @param $property The property to add.
            * @returns A new PropertyPath 
            */
            public static AppendProperty ($path: $Ref<Unity.Properties.PropertyPath>, $property: Unity.Properties.IProperty) : Unity.Properties.PropertyPath
            /** 
            Returns a new PropertyPath that will not include the last PropertyPathPart.
            * @param $path The <see cref="PropertyPath" />
            * @returns A new PropertyPath 
            */
            public static Pop ($path: $Ref<Unity.Properties.PropertyPath>) : Unity.Properties.PropertyPath
            /** 
            Returns a new PropertyPath containing the PropertyPathPart starting at the given
            start index.
            * @param $path The <see cref="PropertyPath" />
            * @param $startIndex The zero-based index where the sub path should start.
            * @returns A new PropertyPath 
            */
            public static SubPath ($path: $Ref<Unity.Properties.PropertyPath>, $startIndex: number) : Unity.Properties.PropertyPath
            /** 
            Returns a new PropertyPath containing the given number of PropertyPathPart
            starting at the given start index.
            * @param $path The <see cref="PropertyPath" />
            * @param $startIndex The zero-based index where the sub path should start.
            * @param $length The number of parts to include.
            * @returns A new PropertyPath 
            */
            public static SubPath ($path: $Ref<Unity.Properties.PropertyPath>, $startIndex: number, $length: number) : Unity.Properties.PropertyPath
            public static op_Equality ($lhs: Unity.Properties.PropertyPath, $rhs: Unity.Properties.PropertyPath) : boolean
            public static op_Inequality ($lhs: Unity.Properties.PropertyPath, $rhs: Unity.Properties.PropertyPath) : boolean
            /** 
            Indicates whether this instance and a specified object are equal.
            * @param $other The object to compare with the current instance.
            * @returns true if obj and this instance are the same type and represent the same value; otherwise, false. 
            */
            public Equals ($other: Unity.Properties.PropertyPath) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($path: string)
        }
        interface TypeConverter$2<TSource, TDestination>
        { 
        (value: $Ref<TSource>) : TDestination; 
        Invoke?: (value: $Ref<TSource>) => TDestination;
        }
        /** 
        Internal return code used during path visitation.
        */
        enum VisitReturnCode
        { Ok = 0, NullContainer = 1, InvalidContainerType = 2, MissingPropertyBag = 3, InvalidPath = 4, InvalidCast = 5, AccessViolation = 6 }
        /** 
        Flags used to specify a set of exceptions.
        */
        enum VisitExceptionKind
        { None = 0, Internal = 1, Visitor = 2, All = 3 }
        /** 
        Custom parameters to use for visitation.
        */
        class VisitParameters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            Use this options to ignore specific exceptions during visitation.
            */
            public get IgnoreExceptions(): Unity.Properties.VisitExceptionKind;
            public set IgnoreExceptions(value: Unity.Properties.VisitExceptionKind);
        }
        /** 
        The PropertyContainer class is used as the entry point to operate on data containers using properties.
        */
        class PropertyContainer extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        interface IPropertyBagVisitor
        {
        }
        interface IPropertyVisitor
        {
        }
        interface IProperty
        {
            /** 
            Gets the name of the property.
            */
            Name : string
            /** 
            Gets a value indicating whether the property is read-only or not.
            */
            IsReadOnly : boolean
            /** 
            Returns the declared value type of the property.
            * @returns The declared value type. 
            */
            DeclaredValueType () : System.Type
            /** 
            Returns all attribute of the given type.
            * @returns An IEnumerable_1 for all attributes of the given type. 
            */
            GetAttributes () : System.Collections.Generic.IEnumerable$1<System.Attribute>
        }
        /** 
        Use this attribute to enable the source generator to run on this assembly.
        */
        class GeneratePropertyBagsForAssemblyAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Use this attribute to have a property generated for the member.
        */
        class CreatePropertyAttribute extends UnityEngine.Scripting.RequiredMemberAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            Indicates if the property should generate a setter.
            */
            public get ReadOnly(): boolean;
            public set ReadOnly(value: boolean);
            public constructor ()
        }
        /** 
        Use this attribute to prevent have a property from being automatically generated on a public field.
        */
        class DontCreatePropertyAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        A set of options to customize the behaviour of the code generator.
        */
        enum TypeGenerationOptions
        { None = 0, ValueType = 2, ReferenceType = 4, Default = 6 }
        /** 
        Use this attribute to have the properties source generator generate property bags for types implementing the specified interface.
        */
        class GeneratePropertyBagsForTypesQualifiedWithAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            The interface type to generate property bags for.
            */
            public get Type(): System.Type;
            /** 
            Options used for additional filtering.
            */
            public get Options(): Unity.Properties.TypeGenerationOptions;
            public constructor ($type: System.Type, $options?: Unity.Properties.TypeGenerationOptions)
        }
        /** 
        Use this attribute to have the source generator generate a property bag for a given type.
        This attribute works for the specified type ONLY, it does NOT include derived types.
        */
        class GeneratePropertyBagsForTypeAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            The type to generate a property bag for.
            */
            public get Type(): System.Type;
            public constructor ($type: System.Type)
        }
        /** 
        Use this attribute to have the source generator generate property bags for a given type.
        */
        class GeneratePropertyBagAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        The exception that is thrown when trying to visit a container with no property bag.
        */
        class MissingPropertyBagException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
            /** 
            The type which triggered the exception.
            */
            public get Type(): System.Type;
            public constructor ($type: System.Type)
            public constructor ($type: System.Type, $inner: System.Exception)
        }
        /** 
        The exception that is thrown when trying to visit an invalid container type.
        */
        class InvalidContainerTypeException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
            /** 
            The type which triggered the exception.
            */
            public get Type(): System.Type;
            public constructor ($type: System.Type)
            public constructor ($type: System.Type, $inner: System.Exception)
        }
        /** 
        The exception that is thrown when trying to resolve an invalid path.
        */
        class InvalidPathException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
        }
        /** 
        Scope for using a given set of attributes.
        */
        class AttributesScope extends System.ValueType implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Re-assigns the original attributes to the target.
            */
            public Dispose () : void
            public constructor ($target: Unity.Properties.IProperty, $source: Unity.Properties.IProperty)
        }
        interface PropertyGetter$2<TContainer, TValue>
        { 
        (container: $Ref<TContainer>) : TValue; 
        Invoke?: (container: $Ref<TContainer>) => TValue;
        }
        interface PropertySetter$2<TContainer, TValue>
        { 
        (container: $Ref<TContainer>, value: TValue) : void; 
        Invoke?: (container: $Ref<TContainer>, value: TValue) => void;
        }
        class Property$2<TContainer, TValue> extends System.Object implements Unity.Properties.IProperty, Unity.Properties.IProperty$1<TContainer>, Unity.Properties.IPropertyAccept$1<TContainer>, Unity.Properties.Internal.IAttributes
        {
            protected [__keep_incompatibility]: never;
            public get Name(): string;
            public get IsReadOnly(): boolean;
            public DeclaredValueType () : System.Type
            public Accept ($visitor: Unity.Properties.IPropertyVisitor, $container: $Ref<TContainer>) : void
            public GetValue ($container: $Ref<TContainer>) : TValue
            public SetValue ($container: $Ref<TContainer>, $value: TValue) : void
            public GetAttributes () : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public GetValue ($container: $Ref<TContainer>) : any
            public SetValue ($container: $Ref<TContainer>, $value: any) : void
        }
        interface IProperty$1<TContainer> extends Unity.Properties.IProperty, Unity.Properties.IPropertyAccept$1<TContainer>
        {
            /** 
            Gets the name of the property.
            */
            Name : string
            /** 
            Gets a value indicating whether the property is read-only or not.
            */
            IsReadOnly : boolean
            GetValue ($container: $Ref<TContainer>) : any
            SetValue ($container: $Ref<TContainer>, $value: any) : void
            /** 
            Returns the declared value type of the property.
            * @returns The declared value type. 
            */
            DeclaredValueType () : System.Type
            /** 
            Returns all attribute of the given type.
            * @returns An IEnumerable_1 for all attributes of the given type. 
            */
            GetAttributes () : System.Collections.Generic.IEnumerable$1<System.Attribute>
            Accept ($visitor: Unity.Properties.IPropertyVisitor, $container: $Ref<TContainer>) : void
        }
        interface IPropertyAccept$1<TContainer>
        {
            Accept ($visitor: Unity.Properties.IPropertyVisitor, $container: $Ref<TContainer>) : void
        }
        class DelegateProperty$2<TContainer, TValue> extends Unity.Properties.Property$2<TContainer, TValue> implements Unity.Properties.IProperty, Unity.Properties.IProperty$1<TContainer>, Unity.Properties.IPropertyAccept$1<TContainer>, Unity.Properties.Internal.IAttributes
        {
            protected [__keep_incompatibility]: never;
            public get Name(): string;
            public get IsReadOnly(): boolean;
            public constructor ($name: string, $getter: Unity.Properties.PropertyGetter$2<TContainer, TValue>, $setter?: Unity.Properties.PropertySetter$2<TContainer, TValue>)
            /** 
            Returns the declared value type of the property.
            * @returns The declared value type. 
            */
            public DeclaredValueType () : System.Type
            /** 
            Returns all attribute of the given type.
            * @returns An IEnumerable_1 for all attributes of the given type. 
            */
            public GetAttributes () : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public GetValue ($container: $Ref<TContainer>) : any
            public SetValue ($container: $Ref<TContainer>, $value: any) : void
            public Accept ($visitor: Unity.Properties.IPropertyVisitor, $container: $Ref<TContainer>) : void
        }
        interface ICollectionElementProperty
        {
        }
        interface IListElementProperty extends Unity.Properties.ICollectionElementProperty
        {
            /** 
            The index of this property in the list.
            */
            Index : number
        }
        interface ISetElementProperty extends Unity.Properties.ICollectionElementProperty
        {
            /** 
            The key of this property in the set.
            */
            ObjectKey : any
        }
        interface ISetElementProperty$1<TKey> extends Unity.Properties.ICollectionElementProperty, Unity.Properties.ISetElementProperty
        {
            Key : TKey
            /** 
            The key of this property in the set.
            */
            ObjectKey : any
        }
        interface IDictionaryElementProperty extends Unity.Properties.ICollectionElementProperty
        {
            /** 
            The key of this property in the dictionary.
            */
            ObjectKey : any
        }
        interface IDictionaryElementProperty$1<TKey> extends Unity.Properties.IDictionaryElementProperty, Unity.Properties.ICollectionElementProperty
        {
            Key : TKey
            /** 
            The key of this property in the dictionary.
            */
            ObjectKey : any
        }
        /** 
        A PropertyPathPartKind specifies a type for a PropertyPathPart.
        */
        enum PropertyPathPartKind
        { Name = 0, Index = 1, Key = 2 }
        /** 
        A PropertyPathPart represents a single element of the path.
        */
        class PropertyPathPart extends System.ValueType implements System.IEquatable$1<Unity.Properties.PropertyPathPart>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns true if the part is PropertyPathPartKind.Name.
            */
            public get IsName(): boolean;
            /** 
            Returns true if the part is PropertyPathPartKind.Index.
            */
            public get IsIndex(): boolean;
            /** 
            Returns true if the part is PropertyPathPartKind.Key.
            */
            public get IsKey(): boolean;
            /** 
            The PropertyPathPartKind for this path. This determines how algorithms will resolve the path.
            */
            public get Kind(): Unity.Properties.PropertyPathPartKind;
            /** 
            The Name of the part. This will only be set when using PropertyPathPartKind.Name
            */
            public get Name(): string;
            /** 
            The Index of the part. This will only be set when using PropertyPathPartKind.Index
            */
            public get Index(): number;
            /** 
            The Key of the part. This will only be set when using PropertyPathPartKind.Key
            */
            public get Key(): any;
            /** 
            Indicates whether this instance and a specified object are equal.
            * @param $other The object to compare with the current instance.
            * @returns true if obj and this instance are the same type and represent the same value; otherwise, false. 
            */
            public Equals ($other: Unity.Properties.PropertyPathPart) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($name: string)
            public constructor ($index: number)
            public constructor ($key: any)
        }
        class ReflectedMemberProperty$2<TContainer, TValue> extends Unity.Properties.Property$2<TContainer, TValue> implements Unity.Properties.IProperty, Unity.Properties.IProperty$1<TContainer>, Unity.Properties.IPropertyAccept$1<TContainer>, Unity.Properties.Internal.IAttributes
        {
            protected [__keep_incompatibility]: never;
            public get Name(): string;
            public get IsReadOnly(): boolean;
            public constructor ($info: System.Reflection.FieldInfo, $name: string)
            public constructor ($info: System.Reflection.PropertyInfo, $name: string)
            /** 
            Returns the declared value type of the property.
            * @returns The declared value type. 
            */
            public DeclaredValueType () : System.Type
            /** 
            Returns all attribute of the given type.
            * @returns An IEnumerable_1 for all attributes of the given type. 
            */
            public GetAttributes () : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public GetValue ($container: $Ref<TContainer>) : any
            public SetValue ($container: $Ref<TContainer>, $value: any) : void
            public Accept ($visitor: Unity.Properties.IPropertyVisitor, $container: $Ref<TContainer>) : void
        }
        class PropertyBag$1<TContainer> extends System.Object implements Unity.Properties.Internal.IPropertyBagRegister, Unity.Properties.IPropertyBag$1<TContainer>, Unity.Properties.IConstructor, Unity.Properties.IConstructor$1<TContainer>, Unity.Properties.IPropertyBag
        {
            protected [__keep_incompatibility]: never;
            public Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            public GetProperties () : Unity.Properties.PropertyCollection$1<TContainer>
            public GetProperties ($container: $Ref<TContainer>) : Unity.Properties.PropertyCollection$1<TContainer>
            public CreateInstance () : TContainer
            public TryCreateInstance ($instance: $Ref<TContainer>) : boolean
            public Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<TContainer>) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            public Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        interface IPropertyBag$1<TContainer> extends Unity.Properties.IPropertyBag
        {
            GetProperties () : Unity.Properties.PropertyCollection$1<TContainer>
            GetProperties ($container: $Ref<TContainer>) : Unity.Properties.PropertyCollection$1<TContainer>
            CreateInstance () : TContainer
            TryCreateInstance ($instance: $Ref<TContainer>) : boolean
            Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<TContainer>) : void
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        interface IPropertyBag
        {
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        interface IConstructor
        {
        }
        interface IConstructor$1<T> extends Unity.Properties.IConstructor
        {
        }
        class IndexedCollectionPropertyBag$2<TList, TElement> extends Unity.Properties.PropertyBag$1<TList> implements Unity.Properties.Internal.IPropertyBagRegister, Unity.Properties.IPropertyBag$1<TList>, Unity.Properties.ICollectionPropertyBag$2<TList, TElement>, Unity.Properties.ICollectionPropertyBagAccept$1<TList>, Unity.Properties.IListPropertyBag$2<TList, TElement>, Unity.Properties.IIndexedCollectionPropertyBagEnumerator$1<TList>, Unity.Properties.IListPropertyBagAccept$1<TList>, Unity.Properties.IIndexedProperties$1<TList>, Unity.Properties.IConstructor, Unity.Properties.IListPropertyAccept$1<TList>, Unity.Properties.IConstructor$1<TList>, Unity.Properties.IConstructorWithCount$1<TList>, Unity.Properties.IPropertyBag
        {
            protected [__keep_incompatibility]: never;
            public TryGetProperty ($container: $Ref<TList>, $index: number, $property: $Ref<Unity.Properties.IProperty$1<TList>>) : boolean
            public constructor ()
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            public Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            public Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        interface ICollectionPropertyBag$2<TCollection, TElement> extends Unity.Properties.IPropertyBag$1<TCollection>, Unity.Properties.ICollectionPropertyBagAccept$1<TCollection>, Unity.Properties.IPropertyBag
        {
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        interface ICollectionPropertyBagAccept$1<TContainer>
        {
            Accept ($visitor: Unity.Properties.ICollectionPropertyBagVisitor, $container: $Ref<TContainer>) : void
        }
        interface IListPropertyBag$2<TList, TElement> extends Unity.Properties.IPropertyBag$1<TList>, Unity.Properties.ICollectionPropertyBag$2<TList, TElement>, Unity.Properties.ICollectionPropertyBagAccept$1<TList>, Unity.Properties.IListPropertyBagAccept$1<TList>, Unity.Properties.IIndexedProperties$1<TList>, Unity.Properties.IListPropertyAccept$1<TList>, Unity.Properties.IPropertyBag
        {
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        interface IListPropertyBagAccept$1<TContainer>
        {
            Accept ($visitor: Unity.Properties.IListPropertyBagVisitor, $container: $Ref<TContainer>) : void
        }
        interface IIndexedProperties$1<TContainer>
        {
            TryGetProperty ($container: $Ref<TContainer>, $index: number, $property: $Ref<Unity.Properties.IProperty$1<TContainer>>) : boolean
        }
        interface IListPropertyAccept$1<TList>
        {
        }
        interface IIndexedCollectionPropertyBagEnumerator$1<TContainer>
        {
        }
        interface IConstructorWithCount$1<T> extends Unity.Properties.IConstructor
        {
        }
        class ArrayPropertyBag$1<TElement> extends Unity.Properties.IndexedCollectionPropertyBag$2<System.Array$1<TElement>, TElement> implements Unity.Properties.Internal.IPropertyBagRegister, Unity.Properties.IPropertyBag$1<System.Array$1<TElement>>, Unity.Properties.ICollectionPropertyBag$2<System.Array$1<TElement>, TElement>, Unity.Properties.ICollectionPropertyBagAccept$1<System.Array$1<TElement>>, Unity.Properties.IListPropertyBag$2<System.Array$1<TElement>, TElement>, Unity.Properties.IIndexedCollectionPropertyBagEnumerator$1<System.Array$1<TElement>>, Unity.Properties.IListPropertyBagAccept$1<System.Array$1<TElement>>, Unity.Properties.IIndexedProperties$1<System.Array$1<TElement>>, Unity.Properties.IConstructor, Unity.Properties.IListPropertyAccept$1<System.Array$1<TElement>>, Unity.Properties.IConstructor$1<System.Array$1<TElement>>, Unity.Properties.IConstructorWithCount$1<System.Array$1<TElement>>, Unity.Properties.IPropertyBag
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            public Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            public Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        class ContainerPropertyBag$1<TContainer> extends Unity.Properties.PropertyBag$1<TContainer> implements Unity.Properties.Internal.IPropertyBagRegister, Unity.Properties.IPropertyBag$1<TContainer>, Unity.Properties.IConstructor, Unity.Properties.INamedProperties$1<TContainer>, Unity.Properties.IConstructor$1<TContainer>, Unity.Properties.IPropertyBag
        {
            protected [__keep_incompatibility]: never;
            public TryGetProperty ($container: $Ref<TContainer>, $name: string, $property: $Ref<Unity.Properties.IProperty$1<TContainer>>) : boolean
        }
        interface INamedProperties$1<TContainer>
        {
            TryGetProperty ($container: $Ref<TContainer>, $name: string, $property: $Ref<Unity.Properties.IProperty$1<TContainer>>) : boolean
        }
        class PropertyCollection$1<TContainer> extends System.ValueType implements System.Collections.Generic.IEnumerable$1<Unity.Properties.IProperty$1<TContainer>>, System.Collections.IEnumerable
        {
            protected [__keep_incompatibility]: never;
            public static get Empty(): any;
            public GetEnumerator () : Unity.Properties.PropertyCollection$1.Enumerator<TContainer>
            public constructor ($enumerable: System.Collections.Generic.IEnumerable$1<Unity.Properties.IProperty$1<TContainer>>)
            public constructor ($properties: System.Collections.Generic.List$1<Unity.Properties.IProperty$1<TContainer>>)
            public [Symbol.iterator]() : IterableIterator<Unity.Properties.IProperty$1<TContainer>>
        }
        class KeyValueCollectionPropertyBag$3<TDictionary, TKey, TValue> extends Unity.Properties.PropertyBag$1<TDictionary> implements Unity.Properties.Internal.IPropertyBagRegister, Unity.Properties.IPropertyBag$1<TDictionary>, Unity.Properties.ICollectionPropertyBag$2<TDictionary, System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, Unity.Properties.ICollectionPropertyBagAccept$1<TDictionary>, Unity.Properties.IDictionaryPropertyBag$3<TDictionary, TKey, TValue>, Unity.Properties.IDictionaryPropertyBagAccept$1<TDictionary>, Unity.Properties.IConstructor, Unity.Properties.IConstructor$1<TDictionary>, Unity.Properties.IKeyedProperties$2<TDictionary, any>, Unity.Properties.IDictionaryPropertyAccept$1<TDictionary>, Unity.Properties.IPropertyBag
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            public Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            public Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        interface IDictionaryPropertyBag$3<TDictionary, TKey, TValue> extends Unity.Properties.IPropertyBag$1<TDictionary>, Unity.Properties.ICollectionPropertyBag$2<TDictionary, System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, Unity.Properties.ICollectionPropertyBagAccept$1<TDictionary>, Unity.Properties.IDictionaryPropertyBagAccept$1<TDictionary>, Unity.Properties.IKeyedProperties$2<TDictionary, any>, Unity.Properties.IDictionaryPropertyAccept$1<TDictionary>, Unity.Properties.IPropertyBag
        {
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        interface IDictionaryPropertyBagAccept$1<TContainer>
        {
            Accept ($visitor: Unity.Properties.IDictionaryPropertyBagVisitor, $container: $Ref<TContainer>) : void
        }
        interface IKeyedProperties$2<TContainer, TKey>
        {
            TryGetProperty ($container: $Ref<TContainer>, $key: TKey, $property: $Ref<Unity.Properties.IProperty$1<TContainer>>) : boolean
        }
        interface IDictionaryPropertyAccept$1<TDictionary>
        {
        }
        class DictionaryPropertyBag$2<TKey, TValue> extends Unity.Properties.KeyValueCollectionPropertyBag$3<System.Collections.Generic.Dictionary$2<TKey, TValue>, TKey, TValue> implements Unity.Properties.Internal.IPropertyBagRegister, Unity.Properties.IPropertyBag$1<System.Collections.Generic.Dictionary$2<TKey, TValue>>, Unity.Properties.ICollectionPropertyBag$2<System.Collections.Generic.Dictionary$2<TKey, TValue>, System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, Unity.Properties.ICollectionPropertyBagAccept$1<System.Collections.Generic.Dictionary$2<TKey, TValue>>, Unity.Properties.IDictionaryPropertyBag$3<System.Collections.Generic.Dictionary$2<TKey, TValue>, TKey, TValue>, Unity.Properties.IDictionaryPropertyBagAccept$1<System.Collections.Generic.Dictionary$2<TKey, TValue>>, Unity.Properties.IConstructor, Unity.Properties.IConstructor$1<System.Collections.Generic.Dictionary$2<TKey, TValue>>, Unity.Properties.IKeyedProperties$2<System.Collections.Generic.Dictionary$2<TKey, TValue>, any>, Unity.Properties.IDictionaryPropertyAccept$1<System.Collections.Generic.Dictionary$2<TKey, TValue>>, Unity.Properties.IPropertyBag
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            public Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            public Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        class SetPropertyBagBase$2<TSet, TElement> extends Unity.Properties.PropertyBag$1<TSet> implements Unity.Properties.Internal.IPropertyBagRegister, Unity.Properties.IPropertyBag$1<TSet>, Unity.Properties.ICollectionPropertyBag$2<TSet, TElement>, Unity.Properties.ICollectionPropertyBagAccept$1<TSet>, Unity.Properties.ISetPropertyBag$2<TSet, TElement>, Unity.Properties.ISetPropertyBagAccept$1<TSet>, Unity.Properties.IConstructor, Unity.Properties.IConstructor$1<TSet>, Unity.Properties.IKeyedProperties$2<TSet, any>, Unity.Properties.ISetPropertyAccept$1<TSet>, Unity.Properties.IPropertyBag
        {
            protected [__keep_incompatibility]: never;
            public TryGetProperty ($container: $Ref<TSet>, $key: any, $property: $Ref<Unity.Properties.IProperty$1<TSet>>) : boolean
            public constructor ()
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            public Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            public Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        interface ISetPropertyBag$2<TSet, TElement> extends Unity.Properties.IPropertyBag$1<TSet>, Unity.Properties.ICollectionPropertyBag$2<TSet, TElement>, Unity.Properties.ICollectionPropertyBagAccept$1<TSet>, Unity.Properties.ISetPropertyBagAccept$1<TSet>, Unity.Properties.IKeyedProperties$2<TSet, any>, Unity.Properties.ISetPropertyAccept$1<TSet>, Unity.Properties.IPropertyBag
        {
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        interface ISetPropertyBagAccept$1<TContainer>
        {
            Accept ($visitor: Unity.Properties.ISetPropertyBagVisitor, $container: $Ref<TContainer>) : void
        }
        interface ISetPropertyAccept$1<TSet>
        {
        }
        class HashSetPropertyBag$1<TElement> extends Unity.Properties.SetPropertyBagBase$2<System.Collections.Generic.HashSet$1<TElement>, TElement> implements Unity.Properties.Internal.IPropertyBagRegister, Unity.Properties.IPropertyBag$1<System.Collections.Generic.HashSet$1<TElement>>, Unity.Properties.ICollectionPropertyBag$2<System.Collections.Generic.HashSet$1<TElement>, TElement>, Unity.Properties.ICollectionPropertyBagAccept$1<System.Collections.Generic.HashSet$1<TElement>>, Unity.Properties.ISetPropertyBag$2<System.Collections.Generic.HashSet$1<TElement>, TElement>, Unity.Properties.ISetPropertyBagAccept$1<System.Collections.Generic.HashSet$1<TElement>>, Unity.Properties.IConstructor, Unity.Properties.IConstructor$1<System.Collections.Generic.HashSet$1<TElement>>, Unity.Properties.IKeyedProperties$2<System.Collections.Generic.HashSet$1<TElement>, any>, Unity.Properties.ISetPropertyAccept$1<System.Collections.Generic.HashSet$1<TElement>>, Unity.Properties.IPropertyBag
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            public Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            public Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        interface ITypeVisitor
        {
        }
        class KeyValuePairPropertyBag$2<TKey, TValue> extends Unity.Properties.PropertyBag$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>> implements Unity.Properties.Internal.IPropertyBagRegister, Unity.Properties.IPropertyBag$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, Unity.Properties.IConstructor, Unity.Properties.INamedProperties$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, Unity.Properties.IConstructor$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, Unity.Properties.IPropertyBag
        {
            protected [__keep_incompatibility]: never;
            public TryGetProperty ($container: $Ref<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, $name: string, $property: $Ref<Unity.Properties.IProperty$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>>) : boolean
            public constructor ()
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            public Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            public Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        class ListPropertyBag$1<TElement> extends Unity.Properties.IndexedCollectionPropertyBag$2<System.Collections.Generic.List$1<TElement>, TElement> implements Unity.Properties.Internal.IPropertyBagRegister, Unity.Properties.IPropertyBag$1<System.Collections.Generic.List$1<TElement>>, Unity.Properties.ICollectionPropertyBag$2<System.Collections.Generic.List$1<TElement>, TElement>, Unity.Properties.ICollectionPropertyBagAccept$1<System.Collections.Generic.List$1<TElement>>, Unity.Properties.IListPropertyBag$2<System.Collections.Generic.List$1<TElement>, TElement>, Unity.Properties.IIndexedCollectionPropertyBagEnumerator$1<System.Collections.Generic.List$1<TElement>>, Unity.Properties.IListPropertyBagAccept$1<System.Collections.Generic.List$1<TElement>>, Unity.Properties.IIndexedProperties$1<System.Collections.Generic.List$1<TElement>>, Unity.Properties.IConstructor, Unity.Properties.IListPropertyAccept$1<System.Collections.Generic.List$1<TElement>>, Unity.Properties.IConstructor$1<System.Collections.Generic.List$1<TElement>>, Unity.Properties.IConstructorWithCount$1<System.Collections.Generic.List$1<TElement>>, Unity.Properties.IPropertyBag
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            /** 
            Call this method to invoke ITypeVisitor.Visit_1 with the strongly typed container type.
            * @param $visitor The visitor being run.
            */
            public Accept ($visitor: Unity.Properties.ITypeVisitor) : void
            /** 
            Call this method to invoke IPropertyBagVisitor.Visit_1 with the strongly typed container for the given container object.
            * @param $visitor The visitor to invoke the visit callback on.
            * @param $container The container being visited.
            */
            public Accept ($visitor: Unity.Properties.IPropertyBagVisitor, $container: $Ref<any>) : void
        }
        /** 
        The PropertyBag class provides access to registered property bag instances.
        */
        class PropertyBag extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets an interface to the PropertyBag_1 for the given type.
            * @param $type The container type to resolve the property bag for.
            * @returns The resolved property bag. 
            */
            public static GetPropertyBag ($type: System.Type) : Unity.Properties.IPropertyBag
            /** 
            Returns true if a property bag exists for the given type.
            * @param $type The type to check for a property bag
            * @returns true if there is a property bag for the given type; otherwise, false. 
            */
            public static Exists ($type: System.Type) : boolean
            /** 
            Returns all the System.Type that have a registered property bag.
            * @returns A list of types with a registered property bag. 
            */
            public static GetAllTypesWithAPropertyBag () : System.Collections.Generic.IEnumerable$1<System.Type>
        }
        interface IExcludePropertyAdapter$2<TContainer, TValue> extends Unity.Properties.IPropertyVisitorAdapter
        {
            IsExcluded ($context: $Ref<Unity.Properties.ExcludeContext$2<TContainer, TValue>>, $container: $Ref<TContainer>, $value: $Ref<TValue>) : boolean
        }
        interface IPropertyVisitorAdapter
        {
        }
        class ExcludeContext$2<TContainer, TValue> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Property(): Unity.Properties.Property$2<TContainer, TValue>;
        }
        interface IExcludePropertyAdapter$1<TValue> extends Unity.Properties.IPropertyVisitorAdapter
        {
        }
        interface IExcludePropertyAdapter extends Unity.Properties.IPropertyVisitorAdapter
        {
        }
        interface IExcludeContravariantPropertyAdapter$2<TContainer, TValue> extends Unity.Properties.IPropertyVisitorAdapter
        {
            IsExcluded ($context: $Ref<Unity.Properties.ExcludeContext$1<TContainer>>, $container: $Ref<TContainer>, $value: TValue) : boolean
        }
        class ExcludeContext$1<TContainer> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Property(): Unity.Properties.IProperty$1<TContainer>;
        }
        interface IExcludeContravariantPropertyAdapter$1<TValue> extends Unity.Properties.IPropertyVisitorAdapter
        {
        }
        interface IVisitPrimitivesPropertyAdapter extends Unity.Properties.IPropertyVisitorAdapter, Unity.Properties.IVisitPropertyAdapter$1<number>, Unity.Properties.IVisitPropertyAdapter$1<boolean>, Unity.Properties.IVisitPropertyAdapter$1<number>, Unity.Properties.IVisitPropertyAdapter$1<number>, Unity.Properties.IVisitPropertyAdapter$1<bigint>, Unity.Properties.IVisitPropertyAdapter$1<number>, Unity.Properties.IVisitPropertyAdapter$1<number>, Unity.Properties.IVisitPropertyAdapter$1<number>, Unity.Properties.IVisitPropertyAdapter$1<bigint>, Unity.Properties.IVisitPropertyAdapter$1<number>, Unity.Properties.IVisitPropertyAdapter$1<number>, Unity.Properties.IVisitPropertyAdapter$1<number>
        {
        }
        interface IVisitPropertyAdapter$1<TValue> extends Unity.Properties.IPropertyVisitorAdapter
        {
        }
        interface IVisitPropertyAdapter$2<TContainer, TValue> extends Unity.Properties.IPropertyVisitorAdapter
        {
            Visit ($context: $Ref<Unity.Properties.VisitContext$2<TContainer, TValue>>, $container: $Ref<TContainer>, $value: $Ref<TValue>) : void
        }
        class VisitContext$2<TContainer, TValue> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Property(): Unity.Properties.Property$2<TContainer, TValue>;
            public ContinueVisitation ($container: $Ref<TContainer>, $value: $Ref<TValue>) : void
            public ContinueVisitationWithoutAdapters ($container: $Ref<TContainer>, $value: $Ref<TValue>) : void
        }
        interface IVisitPropertyAdapter extends Unity.Properties.IPropertyVisitorAdapter
        {
        }
        interface IVisitContravariantPropertyAdapter$2<TContainer, TValue> extends Unity.Properties.IPropertyVisitorAdapter
        {
            Visit ($context: $Ref<Unity.Properties.VisitContext$1<TContainer>>, $container: $Ref<TContainer>, $value: TValue) : void
        }
        class VisitContext$1<TContainer> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Property(): Unity.Properties.IProperty$1<TContainer>;
            public ContinueVisitation ($container: $Ref<TContainer>) : void
            public ContinueVisitationWithoutAdapters ($container: $Ref<TContainer>) : void
        }
        interface IVisitContravariantPropertyAdapter$1<TValue> extends Unity.Properties.IPropertyVisitorAdapter
        {
        }
        /** 
        Base class to implement a visitor responsible for getting an object's concrete type as a generic.
        */
        class ConcreteTypeVisitor extends System.Object implements Unity.Properties.IPropertyBagVisitor
        {
            protected [__keep_incompatibility]: never;
        }
        interface ICollectionPropertyBagVisitor
        {
        }
        interface IListPropertyBagVisitor
        {
        }
        interface ISetPropertyBagVisitor
        {
        }
        interface IDictionaryPropertyBagVisitor
        {
        }
        interface ICollectionPropertyAccept$1<TCollection>
        {
        }
        interface ICollectionPropertyVisitor
        {
        }
        interface IListPropertyVisitor
        {
        }
        interface ISetPropertyVisitor
        {
        }
        interface IDictionaryPropertyVisitor
        {
        }
        /** 
        Helper visitor to visit a single property using a specified PropertyPath.
        */
        class PathVisitor extends System.Object implements Unity.Properties.IPropertyBagVisitor, Unity.Properties.IPropertyVisitor
        {
            protected [__keep_incompatibility]: never;
            /** 
            The path to visit.
            */
            public get Path(): Unity.Properties.PropertyPath;
            public set Path(value: Unity.Properties.PropertyPath);
            /** 
            Returns whether or not the visitor will write back values along the path.
            */
            public get ReadonlyVisit(): boolean;
            public set ReadonlyVisit(value: boolean);
            /** 
            Returns the error code encountered while visiting the provided path.
            */
            public get ReturnCode(): Unity.Properties.VisitReturnCode;
            /** 
            Resets the state of the visitor.
            */
            public Reset () : void
        }
        /** 
        Base class for implementing algorithms using properties. This is an abstract class.
        */
        class PropertyVisitor extends System.Object implements Unity.Properties.IPropertyBagVisitor, Unity.Properties.IListPropertyBagVisitor, Unity.Properties.IDictionaryPropertyBagVisitor, Unity.Properties.IPropertyVisitor, Unity.Properties.ICollectionPropertyVisitor, Unity.Properties.IListPropertyVisitor, Unity.Properties.ISetPropertyVisitor, Unity.Properties.IDictionaryPropertyVisitor
        {
            protected [__keep_incompatibility]: never;
            /** 
            Adds an adapter to the visitor.
            * @param $adapter The adapter to add.
            */
            public AddAdapter ($adapter: Unity.Properties.IPropertyVisitorAdapter) : void
            /** 
            Removes an adapter from the visitor.
            * @param $adapter The adapter to remove.
            */
            public RemoveAdapter ($adapter: Unity.Properties.IPropertyVisitorAdapter) : void
        }
        /** 
        Helper class to handle type conversion during properties API calls.
        */
        class TypeConversion extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Helper class to avoid paying the cost of runtime type lookups.
        */
        class TypeTraits extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns true if the given type can be treated as a container. i.e. not primitive, pointer, enum or string.
            * @param $type The type to test.
            * @returns true if the given type is a container type; false otherwise. 
            */
            public static IsContainer ($type: System.Type) : boolean
        }
        class TypeTraits$1<T> extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get IsValueType(): any;
            public static get IsPrimitive(): any;
            public static get IsInterface(): any;
            public static get IsAbstract(): any;
            public static get IsArray(): any;
            public static get IsMultidimensionalArray(): any;
            public static get IsEnum(): any;
            public static get IsEnumFlags(): any;
            public static get IsNullable(): any;
            public static get IsObject(): any;
            public static get IsString(): any;
            public static get IsContainer(): any;
            public static get CanBeNull(): any;
            public static get IsPrimitiveOrString(): any;
            public static get IsAbstractOrInterface(): any;
            public static get IsUnityObject(): any;
            public static get IsLazyLoadReference(): any;
        }
        /** 
        Describes how a new instance is created.
        */
        enum InstantiationKind
        { Activator = 0, PropertyBagOverride = 1, NotInstantiatable = 2 }
        /** 
        Utility class around System.Type.
        */
        class TypeUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Utility method to get the name of a type which includes the parent type(s).
            * @param $type The <see cref="System.Type" /> we want the name of.
            * @returns The display name of the type. 
            */
            public static GetTypeDisplayName ($type: System.Type) : string
            /** 
            Utility method to return the base type.
            * @param $type The <see cref="System.Type" /> for which we want the base type.
            * @returns The base type. 
            */
            public static GetRootType ($type: System.Type) : System.Type
            /** 
            Returns true if the specified type is instantiatable.
            * @param $type The type to query.
            * @returns true if the given type is instantiatable. 
            */
            public static CanBeInstantiated ($type: System.Type) : boolean
        }
    }
    namespace UnityEngine.UIElements.CustomBinding {
        class UxmlSerializedData extends UnityEngine.UIElements.Binding.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.UIElements.DataBinding {
        class UxmlSerializedData extends UnityEngine.UIElements.Binding.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.BaseVerticalCollectionView {
        class UxmlSerializedData extends UnityEngine.UIElements.BindableElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.UIElements.BaseListView {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseVerticalCollectionView.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.UIElements.BaseTreeView {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseVerticalCollectionView.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.UIElements.BaseField$1 {
        class UxmlSerializedData<TValueType> extends UnityEngine.UIElements.BindableElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
        }
        class UxmlTraits<TValueType> extends UnityEngine.UIElements.BindableElement.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.UIElements.BoundsField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.Bounds> implements UnityEngine.UIElements.IUxmlSerializedDataCustomAttributeHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.BoundsIntField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.BoundsInt> implements UnityEngine.UIElements.IUxmlSerializedDataCustomAttributeHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Box {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.TextElement {
        class UxmlSerializedData extends UnityEngine.UIElements.BindableElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Button {
        class UxmlSerializedData extends UnityEngine.UIElements.TextElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.RectField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.Rect> implements UnityEngine.UIElements.IUxmlSerializedDataCustomAttributeHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.RectIntField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.RectInt> implements UnityEngine.UIElements.IUxmlSerializedDataCustomAttributeHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Vector2Field {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.Vector2> implements UnityEngine.UIElements.IUxmlSerializedDataCustomAttributeHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Vector3Field {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.Vector3> implements UnityEngine.UIElements.IUxmlSerializedDataCustomAttributeHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Vector4Field {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.Vector4> implements UnityEngine.UIElements.IUxmlSerializedDataCustomAttributeHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Vector2IntField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.Vector2Int> implements UnityEngine.UIElements.IUxmlSerializedDataCustomAttributeHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Vector3IntField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.Vector3Int> implements UnityEngine.UIElements.IUxmlSerializedDataCustomAttributeHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.TextInputBaseField$1 {
        class UxmlSerializedData<TValueType> extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<TValueType>
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.UIElements.DoubleField {
        class UxmlSerializedData extends UnityEngine.UIElements.TextInputBaseField$1.UxmlSerializedData<number>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.DropdownField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<string>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.EnumField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<System.Enum>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.FloatField {
        class UxmlSerializedData extends UnityEngine.UIElements.TextInputBaseField$1.UxmlSerializedData<number>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Foldout {
        class UxmlSerializedData extends UnityEngine.UIElements.BindableElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.GroupBox {
        class UxmlSerializedData extends UnityEngine.UIElements.BindableElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Hash128Field {
        class UxmlSerializedData extends UnityEngine.UIElements.TextInputBaseField$1.UxmlSerializedData<UnityEngine.Hash128>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.HelpBox {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Image {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.TextField {
        class UxmlSerializedData extends UnityEngine.UIElements.TextInputBaseField$1.UxmlSerializedData<string> implements UnityEngine.UIElements.IUxmlSerializedDataCustomAttributeHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.IntegerField {
        class UxmlSerializedData extends UnityEngine.UIElements.TextInputBaseField$1.UxmlSerializedData<number>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Label {
        class UxmlSerializedData extends UnityEngine.UIElements.TextElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.ListView {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseListView.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.LongField {
        class UxmlSerializedData extends UnityEngine.UIElements.TextInputBaseField$1.UxmlSerializedData<bigint>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.MinMaxSlider {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.Vector2> implements UnityEngine.UIElements.IUxmlSerializedDataCustomAttributeHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Column {
        class UxmlSerializedData extends UnityEngine.UIElements.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Columns {
        enum StretchMode
        { Grow = 0, GrowAndFill = 1 }
        class UxmlSerializedData extends UnityEngine.UIElements.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.MultiColumnListView {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseListView.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.MultiColumnTreeView {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseTreeView.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.SortColumnDescription {
        class UxmlSerializedData extends UnityEngine.UIElements.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.SortColumnDescriptions {
        class UxmlSerializedData extends UnityEngine.UIElements.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.PopupWindow {
        class UxmlSerializedData extends UnityEngine.UIElements.TextElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.AbstractProgressBar {
        class UxmlSerializedData extends UnityEngine.UIElements.BindableElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.ProgressBar {
        class UxmlSerializedData extends UnityEngine.UIElements.AbstractProgressBar.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.RadioButton {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<boolean>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.RadioButtonGroup {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<number>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.RepeatButton {
        class UxmlSerializedData extends UnityEngine.UIElements.TextElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Scroller {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.ScrollView {
        enum TouchScrollBehavior
        { Unrestricted = 0, Elastic = 1, Clamped = 2 }
        enum NestedInteractionKind
        { Default = 0, StopScrolling = 1, ForwardScrolling = 2 }
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Slider {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<number>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.SliderInt {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<number>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Tab {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.TabView {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Toggle {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<boolean>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.ToggleButtonGroup {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.UIElements.ToggleButtonGroupState>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.TreeView {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseTreeView.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.TwoPaneSplitView {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.UnsignedIntegerField {
        class UxmlSerializedData extends UnityEngine.UIElements.TextInputBaseField$1.UxmlSerializedData<number>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.UnsignedLongField {
        class UxmlSerializedData extends UnityEngine.UIElements.TextInputBaseField$1.UxmlSerializedData<bigint>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.DropdownMenuAction {
        enum Status
        { None = 0, Normal = 1, Disabled = 2, Checked = 4, Hidden = 8 }
    }
    namespace UnityEngine.UIElements.NavigationMoveEvent {
        enum Direction
        { None = 0, Left = 1, Up = 2, Right = 3, Down = 4, Next = 5, Previous = 6 }
    }
    namespace UnityEngine.UIElements.StylePropertyNameCollection {
        class Enumerator extends System.ValueType implements System.Collections.Generic.IEnumerator$1<UnityEngine.UIElements.StylePropertyName>, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get Current(): UnityEngine.UIElements.StylePropertyName;
            public MoveNext () : boolean
            public Reset () : void
            public Dispose () : void
        }
    }
    namespace UnityEngine.TextCore.Text {
        class TextSettings extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            public get version(): string;
            public get defaultFontAsset(): UnityEngine.TextCore.Text.FontAsset;
            public set defaultFontAsset(value: UnityEngine.TextCore.Text.FontAsset);
            public get defaultFontAssetPath(): string;
            public set defaultFontAssetPath(value: string);
            public get fallbackFontAssets(): System.Collections.Generic.List$1<UnityEngine.TextCore.Text.FontAsset>;
            public set fallbackFontAssets(value: System.Collections.Generic.List$1<UnityEngine.TextCore.Text.FontAsset>);
            public get matchMaterialPreset(): boolean;
            public set matchMaterialPreset(value: boolean);
            public get missingCharacterUnicode(): number;
            public set missingCharacterUnicode(value: number);
            public get clearDynamicDataOnBuild(): boolean;
            public set clearDynamicDataOnBuild(value: boolean);
            public get enableEmojiSupport(): boolean;
            public set enableEmojiSupport(value: boolean);
            public get emojiFallbackTextAssets(): System.Collections.Generic.List$1<UnityEngine.TextCore.Text.TextAsset>;
            public set emojiFallbackTextAssets(value: System.Collections.Generic.List$1<UnityEngine.TextCore.Text.TextAsset>);
            public get defaultSpriteAsset(): UnityEngine.TextCore.Text.SpriteAsset;
            public set defaultSpriteAsset(value: UnityEngine.TextCore.Text.SpriteAsset);
            public get defaultSpriteAssetPath(): string;
            public set defaultSpriteAssetPath(value: string);
            public get fallbackSpriteAssets(): System.Collections.Generic.List$1<UnityEngine.TextCore.Text.SpriteAsset>;
            public set fallbackSpriteAssets(value: System.Collections.Generic.List$1<UnityEngine.TextCore.Text.SpriteAsset>);
            public get missingSpriteCharacterUnicode(): number;
            public set missingSpriteCharacterUnicode(value: number);
            public get defaultStyleSheet(): UnityEngine.TextCore.Text.TextStyleSheet;
            public set defaultStyleSheet(value: UnityEngine.TextCore.Text.TextStyleSheet);
            public get styleSheetsResourcePath(): string;
            public set styleSheetsResourcePath(value: string);
            public get defaultColorGradientPresetsPath(): string;
            public set defaultColorGradientPresetsPath(value: string);
            public get lineBreakingRules(): UnityEngine.TextCore.Text.UnicodeLineBreakingRules;
            public set lineBreakingRules(value: UnityEngine.TextCore.Text.UnicodeLineBreakingRules);
            public get displayWarnings(): boolean;
            public set displayWarnings(value: boolean);
            public constructor ()
        }
        class TextAsset extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            public get version(): string;
            public get instanceID(): number;
            public get hashCode(): number;
            public set hashCode(value: number);
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            public get materialHashCode(): number;
            public set materialHashCode(value: number);
        }
        class FontAsset extends UnityEngine.TextCore.Text.TextAsset
        {
            protected [__keep_incompatibility]: never;
            public get fontAssetCreationEditorSettings(): UnityEngine.TextCore.Text.FontAssetCreationEditorSettings;
            public set fontAssetCreationEditorSettings(value: UnityEngine.TextCore.Text.FontAssetCreationEditorSettings);
            public get sourceFontFile(): UnityEngine.Font;
            public get atlasPopulationMode(): UnityEngine.TextCore.Text.AtlasPopulationMode;
            public set atlasPopulationMode(value: UnityEngine.TextCore.Text.AtlasPopulationMode);
            public get faceInfo(): UnityEngine.TextCore.FaceInfo;
            public set faceInfo(value: UnityEngine.TextCore.FaceInfo);
            public get glyphTable(): System.Collections.Generic.List$1<UnityEngine.TextCore.Glyph>;
            public get glyphLookupTable(): System.Collections.Generic.Dictionary$2<number, UnityEngine.TextCore.Glyph>;
            public get characterTable(): System.Collections.Generic.List$1<UnityEngine.TextCore.Text.Character>;
            public get characterLookupTable(): System.Collections.Generic.Dictionary$2<number, UnityEngine.TextCore.Text.Character>;
            public get atlasTexture(): UnityEngine.Texture2D;
            public get atlasTextures(): System.Array$1<UnityEngine.Texture2D>;
            public set atlasTextures(value: System.Array$1<UnityEngine.Texture2D>);
            public get atlasTextureCount(): number;
            public get isMultiAtlasTexturesEnabled(): boolean;
            public set isMultiAtlasTexturesEnabled(value: boolean);
            public get getFontFeatures(): boolean;
            public set getFontFeatures(value: boolean);
            public get atlasWidth(): number;
            public get atlasHeight(): number;
            public get atlasPadding(): number;
            public get atlasRenderMode(): UnityEngine.TextCore.LowLevel.GlyphRenderMode;
            public get fontFeatureTable(): UnityEngine.TextCore.Text.FontFeatureTable;
            public get fallbackFontAssetTable(): System.Collections.Generic.List$1<UnityEngine.TextCore.Text.FontAsset>;
            public set fallbackFontAssetTable(value: System.Collections.Generic.List$1<UnityEngine.TextCore.Text.FontAsset>);
            public get fontWeightTable(): System.Array$1<UnityEngine.TextCore.Text.FontWeightPair>;
            public get regularStyleWeight(): number;
            public set regularStyleWeight(value: number);
            public get regularStyleSpacing(): number;
            public set regularStyleSpacing(value: number);
            public get boldStyleWeight(): number;
            public set boldStyleWeight(value: number);
            public get boldStyleSpacing(): number;
            public set boldStyleSpacing(value: number);
            public get italicStyleSlant(): number;
            public set italicStyleSlant(value: number);
            public get tabMultiple(): number;
            public set tabMultiple(value: number);
            public static CreateFontAsset ($familyName: string, $styleName: string, $pointSize?: number) : UnityEngine.TextCore.Text.FontAsset
            public static CreateFontAsset ($fontFilePath: string, $faceIndex: number, $samplingPointSize: number, $atlasPadding: number, $renderMode: UnityEngine.TextCore.LowLevel.GlyphRenderMode, $atlasWidth: number, $atlasHeight: number) : UnityEngine.TextCore.Text.FontAsset
            public static CreateFontAsset ($font: UnityEngine.Font) : UnityEngine.TextCore.Text.FontAsset
            public static CreateFontAsset ($font: UnityEngine.Font, $samplingPointSize: number, $atlasPadding: number, $renderMode: UnityEngine.TextCore.LowLevel.GlyphRenderMode, $atlasWidth: number, $atlasHeight: number, $atlasPopulationMode?: UnityEngine.TextCore.Text.AtlasPopulationMode, $enableMultiAtlasSupport?: boolean) : UnityEngine.TextCore.Text.FontAsset
            public ReadFontAssetDefinition () : void
            public HasCharacter ($character: number) : boolean
            public HasCharacter ($character: number, $searchFallbacks?: boolean, $tryAddCharacter?: boolean) : boolean
            public HasCharacters ($text: string, $missingCharacters: $Ref<System.Collections.Generic.List$1<number>>) : boolean
            public HasCharacters ($text: string, $missingCharacters: $Ref<System.Array$1<number>>, $searchFallbacks?: boolean, $tryAddCharacter?: boolean) : boolean
            public HasCharacters ($text: string) : boolean
            public static GetCharacters ($fontAsset: UnityEngine.TextCore.Text.FontAsset) : string
            public static GetCharactersArray ($fontAsset: UnityEngine.TextCore.Text.FontAsset) : System.Array$1<number>
            public TryAddCharacters ($unicodes: System.Array$1<number>, $includeFontFeatures?: boolean) : boolean
            public TryAddCharacters ($unicodes: System.Array$1<number>, $missingUnicodes: $Ref<System.Array$1<number>>, $includeFontFeatures?: boolean) : boolean
            public TryAddCharacters ($characters: string, $includeFontFeatures?: boolean) : boolean
            public TryAddCharacters ($characters: string, $missingCharacters: $Ref<string>, $includeFontFeatures?: boolean) : boolean
            public ClearFontAssetData ($setAtlasSizeToZero?: boolean) : void
            public constructor ()
        }
        class TextElement extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get elementType(): UnityEngine.TextCore.Text.TextElementType;
            public get unicode(): number;
            public set unicode(value: number);
            public get textAsset(): UnityEngine.TextCore.Text.TextAsset;
            public set textAsset(value: UnityEngine.TextCore.Text.TextAsset);
            public get glyph(): UnityEngine.TextCore.Glyph;
            public set glyph(value: UnityEngine.TextCore.Glyph);
            public get glyphIndex(): number;
            public set glyphIndex(value: number);
            public get scale(): number;
            public set scale(value: number);
        }
        /** Represents a single character.
        */
        class Character extends UnityEngine.TextCore.Text.TextElement
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($unicode: number, $glyph: UnityEngine.TextCore.Glyph)
            public constructor ($unicode: number, $fontAsset: UnityEngine.TextCore.Text.FontAsset, $glyph: UnityEngine.TextCore.Glyph)
        }
        class FastAction extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public Add ($rhs: System.Action) : void
            public Remove ($rhs: System.Action) : void
            public Call () : void
            public constructor ()
        }
        class FastAction$1<A> extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public Add ($rhs: System.Action$1<A>) : void
            public Remove ($rhs: System.Action$1<A>) : void
            public Call ($a: A) : void
            public constructor ()
        }
        class FastAction$2<A, B> extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public Add ($rhs: System.Action$2<A, B>) : void
            public Remove ($rhs: System.Action$2<A, B>) : void
            public Call ($a: A, $b: B) : void
            public constructor ()
        }
        class FastAction$3<A, B, C> extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public Add ($rhs: System.Action$3<A, B, C>) : void
            public Remove ($rhs: System.Action$3<A, B, C>) : void
            public Call ($a: A, $b: B, $c: C) : void
            public constructor ()
        }
        enum OTL_FeatureTag
        { kern = 1801810542, liga = 1818847073, mark = 1835102827, mkmk = 1835756907 }
        /** Represents a table that contains the font features available for a given font asset.
        */
        class FontFeatureTable extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Sorts the glyph pair adjustment records by glyph index.
            */
            public SortGlyphPairAdjustmentRecords () : void
            /** Sorts the Mark-to-Base Adjustment Table records.
            */
            public SortMarkToBaseAdjustmentRecords () : void
            /** Sorts the Mark-to-Mark Adjustment Table records.
            */
            public SortMarkToMarkAdjustmentRecords () : void
        }
        enum TextFontWeight
        { Thin = 100, ExtraLight = 200, Light = 300, Regular = 400, Medium = 500, SemiBold = 600, Bold = 700, Heavy = 800, Black = 900 }
        class FontWeightPair extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public regularTypeface : UnityEngine.TextCore.Text.FontAsset
            public italicTypeface : UnityEngine.TextCore.Text.FontAsset
        }
        class FontAssetCreationEditorSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public sourceFontFileGUID : string
            public faceIndex : number
            public pointSizeSamplingMode : number
            public pointSize : number
            public padding : number
            public paddingMode : number
            public packingMode : number
            public atlasWidth : number
            public atlasHeight : number
            public characterSetSelectionMode : number
            public characterSequence : string
            public referencedFontAssetGUID : string
            public referencedTextAssetGUID : string
            public fontStyle : number
            public fontStyleModifier : number
            public renderMode : number
            public includeFontFeatures : boolean
        }
        /** Options to specify the atlas population mode, which defines the type of font asset.
        */
        enum AtlasPopulationMode
        { Static = 0, Dynamic = 1, DynamicOS = 2 }
        class SpriteAsset extends UnityEngine.TextCore.Text.TextAsset
        {
            protected [__keep_incompatibility]: never;
            public fallbackSpriteAssets : System.Collections.Generic.List$1<UnityEngine.TextCore.Text.SpriteAsset>
            public get faceInfo(): UnityEngine.TextCore.FaceInfo;
            public get spriteSheet(): UnityEngine.Texture;
            public get spriteCharacterTable(): System.Collections.Generic.List$1<UnityEngine.TextCore.Text.SpriteCharacter>;
            public get spriteCharacterLookupTable(): System.Collections.Generic.Dictionary$2<number, UnityEngine.TextCore.Text.SpriteCharacter>;
            public get spriteGlyphTable(): System.Collections.Generic.List$1<UnityEngine.TextCore.Text.SpriteGlyph>;
            public UpdateLookupTables () : void
            public GetSpriteIndexFromHashcode ($hashCode: number) : number
            public GetSpriteIndexFromUnicode ($unicode: number) : number
            public GetSpriteIndexFromName ($name: string) : number
            public static SearchForSpriteByUnicode ($spriteAsset: UnityEngine.TextCore.Text.SpriteAsset, $unicode: number, $includeFallbacks: boolean, $spriteIndex: $Ref<number>) : UnityEngine.TextCore.Text.SpriteAsset
            public static SearchForSpriteByHashCode ($spriteAsset: UnityEngine.TextCore.Text.SpriteAsset, $hashCode: number, $includeFallbacks: boolean, $spriteIndex: $Ref<number>, $textSettings?: UnityEngine.TextCore.Text.TextSettings) : UnityEngine.TextCore.Text.SpriteAsset
            public SortGlyphTable () : void
            public constructor ()
        }
        class SpriteCharacter extends UnityEngine.TextCore.Text.TextElement
        {
            protected [__keep_incompatibility]: never;
            public get name(): string;
            public set name(value: string);
            public constructor ()
            public constructor ($unicode: number, $glyph: UnityEngine.TextCore.Text.SpriteGlyph)
            public constructor ($unicode: number, $spriteAsset: UnityEngine.TextCore.Text.SpriteAsset, $glyph: UnityEngine.TextCore.Text.SpriteGlyph)
        }
        class SpriteGlyph extends UnityEngine.TextCore.Glyph
        {
            protected [__keep_incompatibility]: never;
            public sprite : UnityEngine.Sprite
            public constructor ()
            public constructor ($index: number, $metrics: UnityEngine.TextCore.GlyphMetrics, $glyphRect: UnityEngine.TextCore.GlyphRect, $scale: number, $atlasIndex: number)
            public constructor ($index: number, $metrics: UnityEngine.TextCore.GlyphMetrics, $glyphRect: UnityEngine.TextCore.GlyphRect, $scale: number, $atlasIndex: number, $sprite: UnityEngine.Sprite)
            public constructor ($glyph: UnityEngine.TextCore.Glyph)
            public constructor ($index: number, $metrics: UnityEngine.TextCore.GlyphMetrics, $glyphRect: UnityEngine.TextCore.GlyphRect)
        }
        enum ColorGradientMode
        { Single = 0, HorizontalGradient = 1, VerticalGradient = 2, FourCornersGradient = 3 }
        class TextColorGradient extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            public colorMode : UnityEngine.TextCore.Text.ColorGradientMode
            public topLeft : UnityEngine.Color
            public topRight : UnityEngine.Color
            public bottomLeft : UnityEngine.Color
            public bottomRight : UnityEngine.Color
            public constructor ()
            public constructor ($color: UnityEngine.Color)
            public constructor ($color0: UnityEngine.Color, $color1: UnityEngine.Color, $color2: UnityEngine.Color, $color3: UnityEngine.Color)
        }
        class TextStyleSheet extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            public GetStyle ($hashCode: number) : UnityEngine.TextCore.Text.TextStyle
            public GetStyle ($name: string) : UnityEngine.TextCore.Text.TextStyle
            public RefreshStyles () : void
            public constructor ()
        }
        class UnicodeLineBreakingRules extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get lineBreakingRules(): UnityEngine.TextAsset;
            public get leadingCharacters(): UnityEngine.TextAsset;
            public get followingCharacters(): UnityEngine.TextAsset;
            public get useModernHangulLineBreakingRules(): boolean;
            public set useModernHangulLineBreakingRules(value: boolean);
            public constructor ()
        }
        class TextStyle extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get NormalStyle(): UnityEngine.TextCore.Text.TextStyle;
            public get name(): string;
            public set name(value: string);
            public get hashCode(): number;
            public set hashCode(value: number);
            public get styleOpeningDefinition(): string;
            public get styleClosingDefinition(): string;
            public get styleOpeningTagArray(): System.Array$1<number>;
            public get styleClosingTagArray(): System.Array$1<number>;
            public RefreshStyle () : void
        }
        enum TextElementType
        { Character = 1, Sprite = 2 }
        class TextEventManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static MATERIAL_PROPERTY_EVENT : UnityEngine.TextCore.Text.FastAction$2<boolean, UnityEngine.Material>
            public static FONT_PROPERTY_EVENT : UnityEngine.TextCore.Text.FastAction$2<boolean, UnityEngine.Object>
            public static SPRITE_ASSET_PROPERTY_EVENT : UnityEngine.TextCore.Text.FastAction$2<boolean, UnityEngine.Object>
            public static TEXTMESHPRO_PROPERTY_EVENT : UnityEngine.TextCore.Text.FastAction$2<boolean, UnityEngine.Object>
            public static DRAG_AND_DROP_MATERIAL_EVENT : UnityEngine.TextCore.Text.FastAction$3<UnityEngine.GameObject, UnityEngine.Material, UnityEngine.Material>
            public static TEXT_STYLE_PROPERTY_EVENT : UnityEngine.TextCore.Text.FastAction$1<boolean>
            public static COLOR_GRADIENT_PROPERTY_EVENT : UnityEngine.TextCore.Text.FastAction$1<UnityEngine.Object>
            public static TMP_SETTINGS_PROPERTY_EVENT : UnityEngine.TextCore.Text.FastAction
            public static RESOURCE_LOAD_EVENT : UnityEngine.TextCore.Text.FastAction
            public static TEXTMESHPRO_UGUI_PROPERTY_EVENT : UnityEngine.TextCore.Text.FastAction$2<boolean, UnityEngine.Object>
            public static OnPreRenderObject_Event : UnityEngine.TextCore.Text.FastAction
            public static TEXT_CHANGED_EVENT : UnityEngine.TextCore.Text.FastAction$1<UnityEngine.Object>
            public static ON_PRE_RENDER_OBJECT_CHANGED () : void
            public static ON_MATERIAL_PROPERTY_CHANGED ($isChanged: boolean, $mat: UnityEngine.Material) : void
            public static ON_FONT_PROPERTY_CHANGED ($isChanged: boolean, $font: UnityEngine.Object) : void
            public static ON_SPRITE_ASSET_PROPERTY_CHANGED ($isChanged: boolean, $obj: UnityEngine.Object) : void
            public static ON_TEXTMESHPRO_PROPERTY_CHANGED ($isChanged: boolean, $obj: UnityEngine.Object) : void
            public static ON_DRAG_AND_DROP_MATERIAL_CHANGED ($sender: UnityEngine.GameObject, $currentMaterial: UnityEngine.Material, $newMaterial: UnityEngine.Material) : void
            public static ON_TEXT_STYLE_PROPERTY_CHANGED ($isChanged: boolean) : void
            public static ON_COLOR_GRADIENT_PROPERTY_CHANGED ($gradient: UnityEngine.Object) : void
            public static ON_TEXT_CHANGED ($obj: UnityEngine.Object) : void
            public static ON_TMP_SETTINGS_CHANGED () : void
            public static ON_RESOURCES_LOADED () : void
            public static ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED ($isChanged: boolean, $obj: UnityEngine.Object) : void
        }
        enum FontStyles
        { Normal = 0, Bold = 1, Italic = 2, Underline = 4, LowerCase = 8, UpperCase = 16, SmallCaps = 32, Strikethrough = 64, Superscript = 128, Subscript = 256, Highlight = 512 }
        class TextShaderUtilities extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static ID_MainTex : number
            public static ID_FaceTex : number
            public static ID_FaceColor : number
            public static ID_FaceDilate : number
            public static ID_Shininess : number
            public static ID_OutlineOffset1 : number
            public static ID_OutlineOffset2 : number
            public static ID_OutlineOffset3 : number
            public static ID_OutlineMode : number
            public static ID_IsoPerimeter : number
            public static ID_Softness : number
            public static ID_UnderlayColor : number
            public static ID_UnderlayOffsetX : number
            public static ID_UnderlayOffsetY : number
            public static ID_UnderlayDilate : number
            public static ID_UnderlaySoftness : number
            public static ID_UnderlayOffset : number
            public static ID_UnderlayIsoPerimeter : number
            public static ID_WeightNormal : number
            public static ID_WeightBold : number
            public static ID_OutlineTex : number
            public static ID_OutlineWidth : number
            public static ID_OutlineSoftness : number
            public static ID_OutlineColor : number
            public static ID_Outline2Color : number
            public static ID_Outline2Width : number
            public static ID_Padding : number
            public static ID_GradientScale : number
            public static ID_ScaleX : number
            public static ID_ScaleY : number
            public static ID_PerspectiveFilter : number
            public static ID_Sharpness : number
            public static ID_TextureWidth : number
            public static ID_TextureHeight : number
            public static ID_BevelAmount : number
            public static ID_GlowColor : number
            public static ID_GlowOffset : number
            public static ID_GlowPower : number
            public static ID_GlowOuter : number
            public static ID_GlowInner : number
            public static ID_LightAngle : number
            public static ID_EnvMap : number
            public static ID_EnvMatrix : number
            public static ID_EnvMatrixRotation : number
            public static ID_MaskCoord : number
            public static ID_ClipRect : number
            public static ID_MaskSoftnessX : number
            public static ID_MaskSoftnessY : number
            public static ID_VertexOffsetX : number
            public static ID_VertexOffsetY : number
            public static ID_UseClipRect : number
            public static ID_StencilID : number
            public static ID_StencilOp : number
            public static ID_StencilComp : number
            public static ID_StencilReadMask : number
            public static ID_StencilWriteMask : number
            public static ID_ShaderFlags : number
            public static ID_ScaleRatio_A : number
            public static ID_ScaleRatio_B : number
            public static ID_ScaleRatio_C : number
            public static Keyword_Bevel : string
            public static Keyword_Glow : string
            public static Keyword_Underlay : string
            public static Keyword_Ratios : string
            public static Keyword_MASK_SOFT : string
            public static Keyword_MASK_HARD : string
            public static Keyword_MASK_TEX : string
            public static Keyword_Outline : string
            public static ShaderTag_ZTestMode : string
            public static ShaderTag_CullMode : string
            public static isInitialized : boolean
        }
    }
    namespace UnityEngine.UIElements.IMGUIContainer {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.TemplateContainer {
        class UxmlSerializedData extends UnityEngine.UIElements.BindableElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.UQueryState$1 {
        class Enumerator<T> extends System.ValueType implements System.Collections.Generic.IEnumerator$1<T>, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get Current(): T;
            public MoveNext () : boolean
            public Reset () : void
            public Dispose () : void
        }
    }
    namespace UnityEngine.UIElements.UxmlAttributeDescription {
        enum Use
        { None = 0, Optional = 1, Prohibited = 2, Required = 3 }
    }
    namespace UnityEngine.UIElements.VisualElementFocusRing {
        enum DefaultFocusOrder
        { ChildOrder = 0, PositionXY = 1, PositionYX = 2 }
    }
    namespace UnityEngine.UIElements.InputSystem {
        class InputSystemEventSystem extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            public get isAppFocused(): boolean;
        }
    }
    namespace Unity.Properties.Internal {
        interface IAttributes
        {
        }
        interface IPropertyBagRegister
        {
        }
    }
    namespace Unity.Properties.PropertyCollection$1 {
        class Enumerator<TContainer> extends System.ValueType implements System.Collections.Generic.IEnumerator$1<Unity.Properties.IProperty$1<TContainer>>, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get Current(): Unity.Properties.IProperty$1<TContainer>;
            public MoveNext () : boolean
            public Reset () : void
            public Dispose () : void
        }
    }
    namespace UnityEngine.GUI {
        enum ToolbarButtonSize
        { Fixed = 0, FitToContents = 1 }
        interface WindowFunction
        { 
        (id: number) : void; 
        Invoke?: (id: number) => void;
        }
        var WindowFunction: { new (func: (id: number) => void): WindowFunction; }
        class Scope extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
        }
        class GroupScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($position: UnityEngine.Rect)
            public constructor ($position: UnityEngine.Rect, $text: string)
            public constructor ($position: UnityEngine.Rect, $image: UnityEngine.Texture)
            public constructor ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent)
            public constructor ($position: UnityEngine.Rect, $style: UnityEngine.GUIStyle)
            public constructor ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle)
            public constructor ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle)
        }
        class ScrollViewScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get scrollPosition(): UnityEngine.Vector2;
            public get handleScrollWheel(): boolean;
            public set handleScrollWheel(value: boolean);
            public constructor ($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect)
            public constructor ($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean)
            public constructor ($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle)
            public constructor ($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle)
        }
        class ClipScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($position: UnityEngine.Rect)
        }
    }
    namespace UnityEngine.GUILayout {
        class HorizontalScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor (...options: UnityEngine.GUILayoutOption[])
            public constructor ($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
        }
        class VerticalScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor (...options: UnityEngine.GUILayoutOption[])
            public constructor ($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
        }
        class AreaScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($screenRect: UnityEngine.Rect)
            public constructor ($screenRect: UnityEngine.Rect, $text: string)
            public constructor ($screenRect: UnityEngine.Rect, $image: UnityEngine.Texture)
            public constructor ($screenRect: UnityEngine.Rect, $content: UnityEngine.GUIContent)
            public constructor ($screenRect: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle)
            public constructor ($screenRect: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle)
            public constructor ($screenRect: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle)
        }
        class ScrollViewScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get scrollPosition(): UnityEngine.Vector2;
            public get handleScrollWheel(): boolean;
            public set handleScrollWheel(value: boolean);
            public constructor ($scrollPosition: UnityEngine.Vector2, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($scrollPosition: UnityEngine.Vector2, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($scrollPosition: UnityEngine.Vector2, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, $background: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
        }
    }
    namespace UnityEngine.TextEditor {
        enum DblClickSnapping
        { WORDS = 0, PARAGRAPHS = 1 }
    }
    namespace UnityEngine.Font {
        interface FontTextureRebuildCallback
        { 
        () : void; 
        Invoke?: () => void;
        }
        var FontTextureRebuildCallback: { new (func: () => void): FontTextureRebuildCallback; }
    }
    namespace UnityEngine.TextCore {
        /** A Glyph is the visual representation of a text element or character.
        */
        class Glyph extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The index of the glyph in the source font file.
            */
            public get index(): number;
            public set index(value: number);
            /** The metrics that define the size, position and spacing of a glyph when performing text layout.
            */
            public get metrics(): UnityEngine.TextCore.GlyphMetrics;
            public set metrics(value: UnityEngine.TextCore.GlyphMetrics);
            /** A rectangle that defines the position of a glyph within an atlas texture.
            */
            public get glyphRect(): UnityEngine.TextCore.GlyphRect;
            public set glyphRect(value: UnityEngine.TextCore.GlyphRect);
            /** The relative scale of the glyph. The default value is 1.0.
            */
            public get scale(): number;
            public set scale(value: number);
            /** The index of the atlas texture that contains this glyph.
            */
            public get atlasIndex(): number;
            public set atlasIndex(value: number);
            /** Glyph class definition type.
            */
            public get classDefinitionType(): UnityEngine.TextCore.GlyphClassDefinitionType;
            public set classDefinitionType(value: UnityEngine.TextCore.GlyphClassDefinitionType);
            /** Compares two glyphs to determine if they have the same values.
            * @param $other The glyph to compare with.
            * @returns Returns true if the glyphs have the same values. False if not. 
            */
            public Compare ($other: UnityEngine.TextCore.Glyph) : boolean
            public constructor ()
            public constructor ($glyph: UnityEngine.TextCore.Glyph)
            public constructor ($index: number, $metrics: UnityEngine.TextCore.GlyphMetrics, $glyphRect: UnityEngine.TextCore.GlyphRect)
            public constructor ($index: number, $metrics: UnityEngine.TextCore.GlyphMetrics, $glyphRect: UnityEngine.TextCore.GlyphRect, $scale: number, $atlasIndex: number)
        }
        /** A structure that contains information about a given typeface and for a specific point size.
        */
        class FaceInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The name of the font typeface also known as family name.
            */
            public get familyName(): string;
            public set familyName(value: string);
            /** The style name of the typeface which defines both the visual style and weight of the typeface.
            */
            public get styleName(): string;
            public set styleName(value: string);
            /** The point size used for sampling the typeface.
            */
            public get pointSize(): number;
            public set pointSize(value: number);
            /** The relative scale of the typeface.
            */
            public get scale(): number;
            public set scale(value: number);
            /** The line height represents the distance between consecutive lines of text.
            */
            public get lineHeight(): number;
            public set lineHeight(value: number);
            /** The Ascent line is typically located at the top of the tallest glyph in the typeface.
            */
            public get ascentLine(): number;
            public set ascentLine(value: number);
            /** The Cap line is typically located at the top of capital letters.
            */
            public get capLine(): number;
            public set capLine(value: number);
            /** The Mean line is typically located at the top of lowercase letters.
            */
            public get meanLine(): number;
            public set meanLine(value: number);
            /** The Baseline is an imaginary line upon which all glyphs appear to rest on.
            */
            public get baseline(): number;
            public set baseline(value: number);
            /** The Descent line is typically located at the bottom of the glyph with the lowest descender in the typeface.
            */
            public get descentLine(): number;
            public set descentLine(value: number);
            /** The position of characters using superscript.
            */
            public get superscriptOffset(): number;
            public set superscriptOffset(value: number);
            /** The relative size / scale of superscript characters.
            */
            public get superscriptSize(): number;
            public set superscriptSize(value: number);
            /** The position of characters using subscript.
            */
            public get subscriptOffset(): number;
            public set subscriptOffset(value: number);
            /** The relative size / scale of subscript characters.
            */
            public get subscriptSize(): number;
            public set subscriptSize(value: number);
            /** The position of the underline.
            */
            public get underlineOffset(): number;
            public set underlineOffset(value: number);
            /** The thickness of the underline.
            */
            public get underlineThickness(): number;
            public set underlineThickness(value: number);
            /** The position of the strikethrough.
            */
            public get strikethroughOffset(): number;
            public set strikethroughOffset(value: number);
            /** The thickness of the strikethrough.
            */
            public get strikethroughThickness(): number;
            public set strikethroughThickness(value: number);
            /** The width of the tab character.
            */
            public get tabWidth(): number;
            public set tabWidth(value: number);
            /** Compares the information in this FaceInfo structure with the information in the given FaceInfo structure to determine whether they have the same values.
            * @param $other The FaceInfo structure to compare this FaceInfo structure with.
            * @returns Returns true if the FaceInfo structures have the same values. False if not. 
            */
            public Compare ($other: UnityEngine.TextCore.FaceInfo) : boolean
        }
        /** A set of values that define the size, position and spacing of a glyph when performing text layout.
        */
        class GlyphMetrics extends System.ValueType implements System.IEquatable$1<UnityEngine.TextCore.GlyphMetrics>
        {
            protected [__keep_incompatibility]: never;
            /** The width of the glyph.
            */
            public get width(): number;
            public set width(value: number);
            /** The height of the glyph.
            */
            public get height(): number;
            public set height(value: number);
            /** The horizontal distance from the current drawing position (origin) relative to the element's left bounding box edge (bbox).
            */
            public get horizontalBearingX(): number;
            public set horizontalBearingX(value: number);
            /** The vertical distance from the current baseline relative to the element's top bounding box edge (bbox).
            */
            public get horizontalBearingY(): number;
            public set horizontalBearingY(value: number);
            /** The horizontal distance to increase (left to right) or decrease (right to left) the drawing position relative to the origin of the text element.
            */
            public get horizontalAdvance(): number;
            public set horizontalAdvance(value: number);
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.TextCore.GlyphMetrics) : boolean
            public static op_Equality ($lhs: UnityEngine.TextCore.GlyphMetrics, $rhs: UnityEngine.TextCore.GlyphMetrics) : boolean
            public static op_Inequality ($lhs: UnityEngine.TextCore.GlyphMetrics, $rhs: UnityEngine.TextCore.GlyphMetrics) : boolean
            public constructor ($width: number, $height: number, $bearingX: number, $bearingY: number, $advance: number)
        }
        /** A rectangle that defines the position of a glyph within an atlas texture.
        */
        class GlyphRect extends System.ValueType implements System.IEquatable$1<UnityEngine.TextCore.GlyphRect>
        {
            protected [__keep_incompatibility]: never;
            /** The x position of the glyph in the font atlas texture.
            */
            public get x(): number;
            public set x(value: number);
            /** The y position of the glyph in the font atlas texture.
            */
            public get y(): number;
            public set y(value: number);
            /** The width of the glyph.
            */
            public get width(): number;
            public set width(value: number);
            /** The height of the glyph.
            */
            public get height(): number;
            public set height(value: number);
            /** A GlyphRect with all values set to zero. Shorthand for writing GlyphRect(0, 0, 0, 0).
            */
            public static get zero(): UnityEngine.TextCore.GlyphRect;
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.TextCore.GlyphRect) : boolean
            public static op_Equality ($lhs: UnityEngine.TextCore.GlyphRect, $rhs: UnityEngine.TextCore.GlyphRect) : boolean
            public static op_Inequality ($lhs: UnityEngine.TextCore.GlyphRect, $rhs: UnityEngine.TextCore.GlyphRect) : boolean
            public constructor ($x: number, $y: number, $width: number, $height: number)
            public constructor ($rect: UnityEngine.Rect)
        }
        /** Options to specify the glyph class definition type.
        */
        enum GlyphClassDefinitionType
        { Undefined = 0, Base = 1, Ligature = 2, Mark = 3, Component = 4 }
    }
    namespace UnityEngine.TextCore.LowLevel {
        /** The rendering modes used by the Font Engine to render glyphs.
        */
        enum GlyphRenderMode
        { SMOOTH_HINTED = 4121, SMOOTH = 4117, COLOR_HINTED = 69656, COLOR = 69652, RASTER_HINTED = 4122, RASTER = 4118, SDF = 4134, SDF8 = 8230, SDF16 = 16422, SDF32 = 32806, SDFAA_HINTED = 4169, SDFAA = 4165 }
        /** The various options (flags) used by the FontEngine when loading glyphs from a font face.
        */
        enum GlyphLoadFlags
        { LOAD_DEFAULT = 0, LOAD_NO_SCALE = 1, LOAD_NO_HINTING = 2, LOAD_RENDER = 4, LOAD_NO_BITMAP = 8, LOAD_FORCE_AUTOHINT = 32, LOAD_MONOCHROME = 4096, LOAD_NO_AUTOHINT = 32768, LOAD_COLOR = 1048576, LOAD_COMPUTE_METRICS = 2097152, LOAD_BITMAP_METRICS_ONLY = 4194304 }
        /** Error code returned by the various FontEngine functions.
        */
        enum FontEngineError
        { Success = 0, Invalid_File_Path = 1, Invalid_File_Format = 2, Invalid_File_Structure = 3, Invalid_File = 4, Invalid_Table = 8, Invalid_Glyph_Index = 16, Invalid_Character_Code = 17, Invalid_Pixel_Size = 23, Invalid_Library = 33, Invalid_Face = 35, Invalid_Library_or_Face = 41, Atlas_Generation_Cancelled = 100, Invalid_SharedTextureData = 101, OpenTypeLayoutLookup_Mismatch = 116 }
        /** The modes available when packing glyphs into an atlas texture.
        */
        enum GlyphPackingMode
        { BestShortSideFit = 0, BestLongSideFit = 1, BestAreaFit = 2, BottomLeftRule = 3, ContactPointRule = 4 }
        /** The FontEngine is used to access data from source font files. This includes information about individual characters, glyphs and relevant metrics typically used in the process of text parsing, layout and rendering.
        The types of font files supported are TrueType (.ttf, .ttc) and OpenType (.otf).
        The FontEngine is also used to raster the visual representation of characters known as glyphs in a given font atlas texture.
        */
        class FontEngine extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Initialize the Font Engine and required resources.
            * @returns A value of zero (0) if the initialization of the Font Engine was successful. 
            */
            public static InitializeFontEngine () : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Destroy and unload resources used by the Font Engine.
            * @returns A value of zero (0) if the Font Engine and used resources were successfully released. 
            */
            public static DestroyFontEngine () : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Load a source font file.
            * @param $filePath The path of the source font file relative to the project.
            * @param $pointSize The point size used to scale the font face.
            * @param $sourceFontFile The byte array that contains the source font file.
            * @param $font The font to load the data from. The Unity font must be set to Dynamic mode with Include Font Data selected.
            * @param $faceIndex The face index of the font face to load. When the font file is a TrueType collection (.TTC), this specifies the face index of the font face to load. If the font file is a TrueType Font (.TTF) or OpenType Font (.OTF) file, the face index is always zero (0).
            * @param $familyName The family name of the font face to load.
            * @param $styleName The style name of the font face to load.
            * @returns A value of zero (0) if the font face was loaded successfully. 
            */
            public static LoadFontFace ($filePath: string) : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Load a source font file.
            * @param $filePath The path of the source font file relative to the project.
            * @param $pointSize The point size used to scale the font face.
            * @param $sourceFontFile The byte array that contains the source font file.
            * @param $font The font to load the data from. The Unity font must be set to Dynamic mode with Include Font Data selected.
            * @param $faceIndex The face index of the font face to load. When the font file is a TrueType collection (.TTC), this specifies the face index of the font face to load. If the font file is a TrueType Font (.TTF) or OpenType Font (.OTF) file, the face index is always zero (0).
            * @param $familyName The family name of the font face to load.
            * @param $styleName The style name of the font face to load.
            * @returns A value of zero (0) if the font face was loaded successfully. 
            */
            public static LoadFontFace ($filePath: string, $pointSize: number) : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Load a source font file.
            * @param $filePath The path of the source font file relative to the project.
            * @param $pointSize The point size used to scale the font face.
            * @param $sourceFontFile The byte array that contains the source font file.
            * @param $font The font to load the data from. The Unity font must be set to Dynamic mode with Include Font Data selected.
            * @param $faceIndex The face index of the font face to load. When the font file is a TrueType collection (.TTC), this specifies the face index of the font face to load. If the font file is a TrueType Font (.TTF) or OpenType Font (.OTF) file, the face index is always zero (0).
            * @param $familyName The family name of the font face to load.
            * @param $styleName The style name of the font face to load.
            * @returns A value of zero (0) if the font face was loaded successfully. 
            */
            public static LoadFontFace ($filePath: string, $pointSize: number, $faceIndex: number) : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Load a source font file.
            * @param $filePath The path of the source font file relative to the project.
            * @param $pointSize The point size used to scale the font face.
            * @param $sourceFontFile The byte array that contains the source font file.
            * @param $font The font to load the data from. The Unity font must be set to Dynamic mode with Include Font Data selected.
            * @param $faceIndex The face index of the font face to load. When the font file is a TrueType collection (.TTC), this specifies the face index of the font face to load. If the font file is a TrueType Font (.TTF) or OpenType Font (.OTF) file, the face index is always zero (0).
            * @param $familyName The family name of the font face to load.
            * @param $styleName The style name of the font face to load.
            * @returns A value of zero (0) if the font face was loaded successfully. 
            */
            public static LoadFontFace ($sourceFontFile: System.Array$1<number>) : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Load a source font file.
            * @param $filePath The path of the source font file relative to the project.
            * @param $pointSize The point size used to scale the font face.
            * @param $sourceFontFile The byte array that contains the source font file.
            * @param $font The font to load the data from. The Unity font must be set to Dynamic mode with Include Font Data selected.
            * @param $faceIndex The face index of the font face to load. When the font file is a TrueType collection (.TTC), this specifies the face index of the font face to load. If the font file is a TrueType Font (.TTF) or OpenType Font (.OTF) file, the face index is always zero (0).
            * @param $familyName The family name of the font face to load.
            * @param $styleName The style name of the font face to load.
            * @returns A value of zero (0) if the font face was loaded successfully. 
            */
            public static LoadFontFace ($sourceFontFile: System.Array$1<number>, $pointSize: number) : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Load a source font file.
            * @param $filePath The path of the source font file relative to the project.
            * @param $pointSize The point size used to scale the font face.
            * @param $sourceFontFile The byte array that contains the source font file.
            * @param $font The font to load the data from. The Unity font must be set to Dynamic mode with Include Font Data selected.
            * @param $faceIndex The face index of the font face to load. When the font file is a TrueType collection (.TTC), this specifies the face index of the font face to load. If the font file is a TrueType Font (.TTF) or OpenType Font (.OTF) file, the face index is always zero (0).
            * @param $familyName The family name of the font face to load.
            * @param $styleName The style name of the font face to load.
            * @returns A value of zero (0) if the font face was loaded successfully. 
            */
            public static LoadFontFace ($sourceFontFile: System.Array$1<number>, $pointSize: number, $faceIndex: number) : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Load a source font file.
            * @param $filePath The path of the source font file relative to the project.
            * @param $pointSize The point size used to scale the font face.
            * @param $sourceFontFile The byte array that contains the source font file.
            * @param $font The font to load the data from. The Unity font must be set to Dynamic mode with Include Font Data selected.
            * @param $faceIndex The face index of the font face to load. When the font file is a TrueType collection (.TTC), this specifies the face index of the font face to load. If the font file is a TrueType Font (.TTF) or OpenType Font (.OTF) file, the face index is always zero (0).
            * @param $familyName The family name of the font face to load.
            * @param $styleName The style name of the font face to load.
            * @returns A value of zero (0) if the font face was loaded successfully. 
            */
            public static LoadFontFace ($font: UnityEngine.Font) : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Load a source font file.
            * @param $filePath The path of the source font file relative to the project.
            * @param $pointSize The point size used to scale the font face.
            * @param $sourceFontFile The byte array that contains the source font file.
            * @param $font The font to load the data from. The Unity font must be set to Dynamic mode with Include Font Data selected.
            * @param $faceIndex The face index of the font face to load. When the font file is a TrueType collection (.TTC), this specifies the face index of the font face to load. If the font file is a TrueType Font (.TTF) or OpenType Font (.OTF) file, the face index is always zero (0).
            * @param $familyName The family name of the font face to load.
            * @param $styleName The style name of the font face to load.
            * @returns A value of zero (0) if the font face was loaded successfully. 
            */
            public static LoadFontFace ($font: UnityEngine.Font, $pointSize: number) : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Load a source font file.
            * @param $filePath The path of the source font file relative to the project.
            * @param $pointSize The point size used to scale the font face.
            * @param $sourceFontFile The byte array that contains the source font file.
            * @param $font The font to load the data from. The Unity font must be set to Dynamic mode with Include Font Data selected.
            * @param $faceIndex The face index of the font face to load. When the font file is a TrueType collection (.TTC), this specifies the face index of the font face to load. If the font file is a TrueType Font (.TTF) or OpenType Font (.OTF) file, the face index is always zero (0).
            * @param $familyName The family name of the font face to load.
            * @param $styleName The style name of the font face to load.
            * @returns A value of zero (0) if the font face was loaded successfully. 
            */
            public static LoadFontFace ($font: UnityEngine.Font, $pointSize: number, $faceIndex: number) : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Load a source font file.
            * @param $filePath The path of the source font file relative to the project.
            * @param $pointSize The point size used to scale the font face.
            * @param $sourceFontFile The byte array that contains the source font file.
            * @param $font The font to load the data from. The Unity font must be set to Dynamic mode with Include Font Data selected.
            * @param $faceIndex The face index of the font face to load. When the font file is a TrueType collection (.TTC), this specifies the face index of the font face to load. If the font file is a TrueType Font (.TTF) or OpenType Font (.OTF) file, the face index is always zero (0).
            * @param $familyName The family name of the font face to load.
            * @param $styleName The style name of the font face to load.
            * @returns A value of zero (0) if the font face was loaded successfully. 
            */
            public static LoadFontFace ($familyName: string, $styleName: string) : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Load a source font file.
            * @param $filePath The path of the source font file relative to the project.
            * @param $pointSize The point size used to scale the font face.
            * @param $sourceFontFile The byte array that contains the source font file.
            * @param $font The font to load the data from. The Unity font must be set to Dynamic mode with Include Font Data selected.
            * @param $faceIndex The face index of the font face to load. When the font file is a TrueType collection (.TTC), this specifies the face index of the font face to load. If the font file is a TrueType Font (.TTF) or OpenType Font (.OTF) file, the face index is always zero (0).
            * @param $familyName The family name of the font face to load.
            * @param $styleName The style name of the font face to load.
            * @returns A value of zero (0) if the font face was loaded successfully. 
            */
            public static LoadFontFace ($familyName: string, $styleName: string, $pointSize: number) : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Unloads current font face and removes it from the cache.
            * @returns A value of zero (0) if the font face was successfully unloaded and removed from the cache. 
            */
            public static UnloadFontFace () : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Unloads all currently loaded font faces and removes them from the cache.
            * @returns A value of zero (0) if the font faces were successfully unloaded and removed from the cache. 
            */
            public static UnloadAllFontFaces () : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Gets the family and style names of the system fonts.
            * @returns String array that contains the family and style names of the system fonts. 
            */
            public static GetSystemFontNames () : System.Array$1<string>
            /** Set the size of the currently loaded font face.
            * @param $pointSize The point size used to scale the font face.
            * @returns A value of zero (0) if the font face was successfully scaled to the given point size. 
            */
            public static SetFaceSize ($pointSize: number) : UnityEngine.TextCore.LowLevel.FontEngineError
            /** Get the FaceInfo for the currently loaded and sized typeface.
            * @returns Returns the FaceInfo of the currently loaded typeface. 
            */
            public static GetFaceInfo () : UnityEngine.TextCore.FaceInfo
            /** Gets the font faces and styles for the currently loaded font.
            * @returns An array that contains the names of the font faces and styles. 
            */
            public static GetFontFaces () : System.Array$1<string>
            /** Try to get the glyph index for the character at the given Unicode value.
            * @param $unicode The unicode value of the character for which to lookup the glyph index.
            * @param $glyphIndex The index of the glyph for the given unicode character or the .notdef glyph (index 0) if no glyph is available for the given Unicode value.
            * @returns Returns true if the given unicode has a glyph index. 
            */
            public static TryGetGlyphIndex ($unicode: number, $glyphIndex: $Ref<number>) : boolean
            /** Try loading a glyph for the given unicode value. If available, populates the glyph and returns true. Otherwise returns false and populates the glyph with the .notdef / missing glyph data.
            * @param $flags The glyph loading flag that should be used to load the glyph.
            * @param $glyph The glyph using the provided index or the .notdef glyph (index 0) if no glyph was found at that index.
            * @param $unicode The Unicode value of the character whose glyph should be loaded.
            * @returns Returns true if a glyph exists for the given unicode value. Otherwise returns false. 
            */
            public static TryGetGlyphWithUnicodeValue ($unicode: number, $flags: UnityEngine.TextCore.LowLevel.GlyphLoadFlags, $glyph: $Ref<UnityEngine.TextCore.Glyph>) : boolean
            /** Try loading the glyph for the given index value and if available populate the glyph.
            * @param $glyphIndex The index of the glyph that should be loaded.
            * @param $flags The glyph loading flag that should be used to load the glyph.
            * @param $glyph The glyph using the provided index or the .notdef glyph (index 0) if no glyph was found at that index.
            * @returns Returns true if a glyph exists at the given index. Otherwise returns false. 
            */
            public static TryGetGlyphWithIndexValue ($glyphIndex: number, $flags: UnityEngine.TextCore.LowLevel.GlyphLoadFlags, $glyph: $Ref<UnityEngine.TextCore.Glyph>) : boolean
        }
        enum FontFeatureLookupFlags
        { None = 0, IgnoreLigatures = 4, IgnoreSpacingAdjustments = 256 }
        /** The values used to adjust the position of a glyph or set of glyphs.
        */
        class GlyphValueRecord extends System.ValueType implements System.IEquatable$1<UnityEngine.TextCore.LowLevel.GlyphValueRecord>
        {
            protected [__keep_incompatibility]: never;
            /** The positional adjustment that affects the horizontal bearing X of the glyph.
            */
            public get xPlacement(): number;
            public set xPlacement(value: number);
            /** The positional adjustment that affectsthe horizontal bearing Y of the glyph.
            */
            public get yPlacement(): number;
            public set yPlacement(value: number);
            /** The positional adjustment that affects the horizontal advance of the glyph.
            */
            public get xAdvance(): number;
            public set xAdvance(value: number);
            /** The positional adjustment that affects the vertical advance of the glyph.
            */
            public get yAdvance(): number;
            public set yAdvance(value: number);
            public static op_Addition ($a: UnityEngine.TextCore.LowLevel.GlyphValueRecord, $b: UnityEngine.TextCore.LowLevel.GlyphValueRecord) : UnityEngine.TextCore.LowLevel.GlyphValueRecord
            public static op_Multiply ($a: UnityEngine.TextCore.LowLevel.GlyphValueRecord, $emScale: number) : UnityEngine.TextCore.LowLevel.GlyphValueRecord
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.TextCore.LowLevel.GlyphValueRecord) : boolean
            public static op_Equality ($lhs: UnityEngine.TextCore.LowLevel.GlyphValueRecord, $rhs: UnityEngine.TextCore.LowLevel.GlyphValueRecord) : boolean
            public static op_Inequality ($lhs: UnityEngine.TextCore.LowLevel.GlyphValueRecord, $rhs: UnityEngine.TextCore.LowLevel.GlyphValueRecord) : boolean
            public constructor ($xPlacement: number, $yPlacement: number, $xAdvance: number, $yAdvance: number)
        }
        /** The positional adjustment values of a glyph.
        */
        class GlyphAdjustmentRecord extends System.ValueType implements System.IEquatable$1<UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord>
        {
            protected [__keep_incompatibility]: never;
            /** The index of the glyph in the source font file.
            */
            public get glyphIndex(): number;
            public set glyphIndex(value: number);
            /** The GlyphValueRecord contains the positional adjustments of the glyph.
            */
            public get glyphValueRecord(): UnityEngine.TextCore.LowLevel.GlyphValueRecord;
            public set glyphValueRecord(value: UnityEngine.TextCore.LowLevel.GlyphValueRecord);
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord) : boolean
            public static op_Equality ($lhs: UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord, $rhs: UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord) : boolean
            public static op_Inequality ($lhs: UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord, $rhs: UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord) : boolean
            public constructor ($glyphIndex: number, $glyphValueRecord: UnityEngine.TextCore.LowLevel.GlyphValueRecord)
        }
        /** The positional adjustment  values of a pair of glyphs.
        */
        class GlyphPairAdjustmentRecord extends System.ValueType implements System.IEquatable$1<UnityEngine.TextCore.LowLevel.GlyphPairAdjustmentRecord>
        {
            protected [__keep_incompatibility]: never;
            /** The positional adjustment values for the first glyph.
            */
            public get firstAdjustmentRecord(): UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord;
            public set firstAdjustmentRecord(value: UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord);
            /** The positional adjustment values for the second glyph.
            */
            public get secondAdjustmentRecord(): UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord;
            public set secondAdjustmentRecord(value: UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord);
            public get featureLookupFlags(): UnityEngine.TextCore.LowLevel.FontFeatureLookupFlags;
            public set featureLookupFlags(value: UnityEngine.TextCore.LowLevel.FontFeatureLookupFlags);
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.TextCore.LowLevel.GlyphPairAdjustmentRecord) : boolean
            public static op_Equality ($lhs: UnityEngine.TextCore.LowLevel.GlyphPairAdjustmentRecord, $rhs: UnityEngine.TextCore.LowLevel.GlyphPairAdjustmentRecord) : boolean
            public static op_Inequality ($lhs: UnityEngine.TextCore.LowLevel.GlyphPairAdjustmentRecord, $rhs: UnityEngine.TextCore.LowLevel.GlyphPairAdjustmentRecord) : boolean
            public constructor ($firstAdjustmentRecord: UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord, $secondAdjustmentRecord: UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord)
        }
    }
    namespace Unity.Hierarchy {
        /** 
        Represents an enumerable over the children of an HierarchyNode.
        */
        class HierarchyFlattenedNodeChildren extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the number of children.
            */
            public get Count(): number;
            public get_Item ($index: number) : $Ref<Unity.Hierarchy.HierarchyFlattenedNode>
            /** 
            Gets the HierarchyNode enumerator.
            * @returns An enumerator. 
            */
            public GetEnumerator () : Unity.Hierarchy.HierarchyFlattenedNodeChildren.Enumerator
        }
        /** 
        Represents a flattened hierarchy node.
        */
        class HierarchyFlattenedNode extends System.ValueType implements System.IEquatable$1<Unity.Hierarchy.HierarchyFlattenedNode>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Represents a flattened hierarchy node that is null or invalid.
            */
            public static get Null(): $Ref<Unity.Hierarchy.HierarchyFlattenedNode>;
            /** 
            The hierarchy node referenced.
            */
            public get Node(): Unity.Hierarchy.HierarchyNode;
            /** 
            The offset of the parent of the node.
            */
            public get ParentOffset(): number;
            /** 
            The offset of the next sibling of the node.
            */
            public get NextSiblingOffset(): number;
            /** 
            The number of children nodes that the node has.
            */
            public get ChildrenCount(): number;
            /** 
            The depth of the node.
            */
            public get Depth(): number;
            public static op_Equality ($lhs: $Ref<Unity.Hierarchy.HierarchyFlattenedNode>, $rhs: $Ref<Unity.Hierarchy.HierarchyFlattenedNode>) : boolean
            public static op_Inequality ($lhs: $Ref<Unity.Hierarchy.HierarchyFlattenedNode>, $rhs: $Ref<Unity.Hierarchy.HierarchyFlattenedNode>) : boolean
            public Equals ($other: Unity.Hierarchy.HierarchyFlattenedNode) : boolean
            public Equals ($obj: any) : boolean
            public constructor ()
        }
        /** 
        Represents a hierarchy node.
        */
        class HierarchyNode extends System.ValueType implements System.IEquatable$1<Unity.Hierarchy.HierarchyNode>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Represents a hierarchy node that is null or invalid.
            */
            public static get Null(): $Ref<Unity.Hierarchy.HierarchyNode>;
            /** 
            The unique identification number of the hierarchy node.
            */
            public get Id(): number;
            /** 
            The version number of the hierarchy node.
            */
            public get Version(): number;
            public static op_Equality ($lhs: $Ref<Unity.Hierarchy.HierarchyNode>, $rhs: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            public static op_Inequality ($lhs: $Ref<Unity.Hierarchy.HierarchyNode>, $rhs: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            public Equals ($other: Unity.Hierarchy.HierarchyNode) : boolean
            public Equals ($obj: any) : boolean
            public constructor ()
        }
        /** 
        A read-only collection of an hierarchy node's children.
        */
        class HierarchyNodeChildren extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The number of children.
            */
            public get Count(): number;
            public get_Item ($index: number) : $Ref<Unity.Hierarchy.HierarchyNode>
            /** 
            Gets an enumerator for the children.
            * @returns The enumerator. 
            */
            public GetEnumerator () : Unity.Hierarchy.HierarchyNodeChildren.Enumerator
        }
        class HierarchyNodeMapUnmanaged$1<T> extends System.ValueType implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get IsCreated(): boolean;
            public get Capacity(): number;
            public set Capacity(value: number);
            public get Count(): number;
            public get_Item ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : T
            public set_Item ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $value: T) : void
            public Dispose () : void
            public Reserve ($capacity: number) : void
            public ContainsKey ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            public Add ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $value: $Ref<T>) : void
            public AddNoResize ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $value: $Ref<T>) : void
            public TryAdd ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $value: $Ref<T>) : boolean
            public TryAddNoResize ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $value: $Ref<T>) : boolean
            public TryGetValue ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $value: $Ref<T>) : boolean
            public Remove ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            public Clear () : void
            public constructor ($allocator: Unity.Collections.Allocator)
            public constructor ($initValue: $Ref<T>, $allocator: Unity.Collections.Allocator)
        }
        /** 
        Provides a base class for hierarchy node type handlers.
        */
        class HierarchyNodeTypeHandlerBase extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Get the Hierarchy owning this handler.
            */
            public get Hierarchy(): Unity.Hierarchy.Hierarchy;
            /** 
            Disposes this hierarchy node type handler to free up resources in the derived class.
            * @param $disposing Returns true if called from Dispose, false otherwise.
            */
            public Dispose () : void
            /** 
            Retrieves the hierarchy node type for this hierarchy node type handler.
            * @returns The type of the hierarchy node. 
            */
            public GetNodeType () : Unity.Hierarchy.HierarchyNodeType
            /** 
            Get the type name of this hierarchy node type handler.
            * @returns The type name of the hierarchy node. 
            */
            public GetNodeTypeName () : string
            public GetDefaultNodeFlags ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $defaultFlags?: Unity.Hierarchy.HierarchyNodeFlags) : Unity.Hierarchy.HierarchyNodeFlags
        }
        /** 
        Represents a tree-like container of nodes.
        */
        class Hierarchy extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Whether or not this object is valid and uses memory.
            */
            public get IsCreated(): boolean;
            /** 
            The root node.
            */
            public get Root(): Unity.Hierarchy.HierarchyNode;
            /** 
            The total number of nodes.
            */
            public get Count(): number;
            /** 
            Whether the hierarchy is currently updating.
            */
            public get Updating(): boolean;
            /** 
            Whether the hierarchy requires an update.
            */
            public get UpdateNeeded(): boolean;
            /** 
            Dispose this object to release its memory.
            */
            public Dispose () : void
            /** 
            Gets the node type handler instance for the specified node from this hierarchy.
            * @returns The hierarchy node type handler. 
            */
            public GetNodeTypeHandlerBase ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : Unity.Hierarchy.HierarchyNodeTypeHandlerBase
            /** 
            Gets the node type handler instance for the specified node type name from this hierarchy.
            * @param $nodeTypeName The node type name.
            * @returns The hierarchy node type handler. 
            */
            public GetNodeTypeHandlerBase ($nodeTypeName: string) : Unity.Hierarchy.HierarchyNodeTypeHandlerBase
            public GetAllNodeTypeHandlersBase ($handlers: System.Collections.Generic.List$1<Unity.Hierarchy.HierarchyNodeTypeHandlerBase>) : void
            /** 
            Retrieve the hierarchy node type for the specified node.
            * @param $node The hierarchy node.
            * @returns The hierarchy node type. 
            */
            public GetNodeType ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : Unity.Hierarchy.HierarchyNodeType
            /** 
            Reserves memory for nodes to use. Use this to avoid memory allocation hits when you add batches of nodes.    
            * @param $count The number of nodes to reserve memory for.
            */
            public Reserve ($count: number) : void
            /** 
            Determines whether a node exists or not.
            * @param $node The hierarchy node.
            * @returns true if the node exists, false otherwise. 
            */
            public Exists ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            /** 
            Gets the next sibling of a node.
            * @param $node The hierarchy node.
            * @returns The next sibling of the hierarchy node. 
            */
            public GetNextSibling ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : Unity.Hierarchy.HierarchyNode
            /** 
            Determines the depth of a node.
            * @param $node The hierarchy node.
            * @returns The depth of the hierarchy node. A value of -1 indicates the root node. A value of 0 indicates direct child nodes of the root node. A value of 1 indicates child nodes of the root node's direct children, and then their children have a value of 2 and so on.  
            */
            public GetDepth ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : number
            /** 
            Adds a new node that has a specified parent node to the hierarchy.
            * @param $parent The parent of the hierarchy node to add.
            * @returns A hierarchy node. 
            */
            public Add ($parent: $Ref<Unity.Hierarchy.HierarchyNode>) : Unity.Hierarchy.HierarchyNode
            /** 
            Adds multiple new nodes that have a specified parent node to the hierarchy.
            * @param $parent The parent of the hierarchy nodes.
            * @param $count The number of nodes to create.
            * @returns An array of hierarchy nodes. 
            */
            public Add ($parent: $Ref<Unity.Hierarchy.HierarchyNode>, $count: number) : System.Array$1<Unity.Hierarchy.HierarchyNode>
            /** 
            Removes a node from the hierarchy.
            * @param $node The hierarchy node to remove from the hierarchy.
            * @returns true if the node was removed, false otherwise. 
            */
            public Remove ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            /** 
            Recursively removes all children of a node.
            * @param $node The hierarchy node.
            */
            public RemoveChildren ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : void
            /** 
            Removes all nodes from the hierarchy.
            */
            public Clear () : void
            /** 
            Sets the parent of a hierarchy node.
            * @param $node The hierarchy node.
            * @param $parent The hierarchy node to set as a parent.
            * @returns true if the parent was set, false otherwise. 
            */
            public SetParent ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $parent: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            /** 
            Gets the parent of a hierarchy node.
            * @param $node The hierarchy node.
            * @returns A hierarchy node. 
            */
            public GetParent ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : Unity.Hierarchy.HierarchyNode
            /** 
            Gets the child node at the specified index of a hierarchy node.
            * @param $node The hierarchy node.
            * @param $index The child index.
            * @returns An hierarchy node. 
            */
            public GetChild ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $index: number) : Unity.Hierarchy.HierarchyNode
            /** 
            Gets the child nodes of a hierarchy node.
            * @param $node The hierarchy node.
            * @returns An array of hierarchy nodes. 
            */
            public GetChildren ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : System.Array$1<Unity.Hierarchy.HierarchyNode>
            /** 
            Gets the child nodes of a hierarchy node.
            * @param $node The hierarchy node.
            * @returns An enumerable of hierarchy node children. 
            */
            public EnumerateChildren ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : Unity.Hierarchy.HierarchyNodeChildren
            /** 
            Gets the number of child nodes that a hierarchy node has.
            * @param $node The hierarchy node.
            * @returns The number of child nodes. 
            */
            public GetChildrenCount ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : number
            /** 
            Gets the number of child nodes that a hierarchy node has, including children of children.
            * @param $node The hierarchy node.
            * @returns The number of child nodes, including children of children. 
            */
            public GetChildrenCountRecursive ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : number
            /** 
            Sets the sorting index of a hierarchy node.
            * @param $node The hierarchy node.
            * @param $sortIndex The sorting index.
            */
            public SetSortIndex ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $sortIndex: number) : void
            /** 
            Gets the sorting index of a hierarchy node.
            * @param $node The hierarchy node.
            * @returns The sorting index. 
            */
            public GetSortIndex ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : number
            /** 
            Sorts the child nodes of a hierarchy node according to their sort index.
            * @param $node The hierarchy node.
            * @param $recurse Whether to sort the child nodes recursively.
            */
            public SortChildren ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $recurse?: boolean) : void
            /** 
            Gets whether the child nodes of a hierarchy node need to be sorted.
            * @param $node The hierarchy node.
            * @returns true if the child nodes of a hierarchy node need to be sorted, false otherwise. 
            */
            public DoesChildrenNeedsSorting ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            /** 
            Creates a string property with a specified name.
            * @param $name The property name.
            * @returns The property accessor. 
            */
            public GetOrCreatePropertyString ($name: string) : Unity.Hierarchy.HierarchyPropertyString
            /** 
            Sets the name of a hierarchy node.
            * @param $node The hierarchy node.
            * @param $name The name of the node.
            * @returns true if the name was set, false otherwise. 
            */
            public SetName ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $name: string) : boolean
            /** 
            Gets the name of a hierarchy node.
            * @param $node The hierarchy node.
            * @returns The name of the node. 
            */
            public GetName ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : string
            /** 
            Updates the hierarchy and requests that every registered hierarchy node type handler integrates their changes into the hierarchy.
            */
            public Update () : void
            /** 
            Updates the hierarchy incrementally.
            * @returns true if additional invocations are needed to complete the update, false otherwise. 
            */
            public UpdateIncremental () : boolean
            /** 
            Incrementally updates the hierarchy until a time limit is reached.
            * @param $milliseconds The time period in milliseconds.
            * @returns true if additional invocations are needed to complete the update, false otherwise. 
            */
            public UpdateIncrementalTimed ($milliseconds: number) : boolean
            public constructor ()
        }
        /** 
        Type descriptor for a node in Hierarchy. Corresponds to the NodeType of the HierarchyNodeHandler.
        */
        class HierarchyNodeType extends System.ValueType implements System.IEquatable$1<Unity.Hierarchy.HierarchyNodeType>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Represents a hierarchy node type that is null or invalid.
            */
            public static get Null(): $Ref<Unity.Hierarchy.HierarchyNodeType>;
            /** 
            The unique identification number of the hierarchy node type.
            */
            public get Id(): number;
            public static op_Equality ($lhs: $Ref<Unity.Hierarchy.HierarchyNodeType>, $rhs: $Ref<Unity.Hierarchy.HierarchyNodeType>) : boolean
            public static op_Inequality ($lhs: $Ref<Unity.Hierarchy.HierarchyNodeType>, $rhs: $Ref<Unity.Hierarchy.HierarchyNodeType>) : boolean
            public Equals ($other: Unity.Hierarchy.HierarchyNodeType) : boolean
            public Equals ($obj: any) : boolean
            public constructor ()
        }
        /** 
        Bit flags used to describe the state of a hierarchy node.
        */
        enum HierarchyNodeFlags
        { None = 0, Expanded = 1, Selected = 2, Cut = 4 }
        /** 
        Provides access to string property data.
        */
        class HierarchyPropertyString extends System.ValueType implements Unity.Hierarchy.IHierarchyProperty$1<string>, System.IEquatable$1<Unity.Hierarchy.HierarchyPropertyString>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns true if the native property is valid.
            */
            public get IsCreated(): boolean;
            /** 
            Gets the property value for the given HierarchyNode.
            * @param $node The hierarchy node.
            * @returns The property value of the hierarchy node. 
            */
            public GetValue ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : string
            /** 
            Sets the property value for a HierarchyNode.
            * @param $node The hierarchy node.
            * @param $value The value to set.
            */
            public SetValue ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $value: string) : void
            /** 
            Removes the property value for a HierarchyNode.
            * @param $node The hierarchy node.
            */
            public ClearValue ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : void
            public static op_Equality ($lhs: $Ref<Unity.Hierarchy.HierarchyPropertyString>, $rhs: $Ref<Unity.Hierarchy.HierarchyPropertyString>) : boolean
            public static op_Inequality ($lhs: $Ref<Unity.Hierarchy.HierarchyPropertyString>, $rhs: $Ref<Unity.Hierarchy.HierarchyPropertyString>) : boolean
            public Equals ($other: Unity.Hierarchy.HierarchyPropertyString) : boolean
            public Equals ($obj: any) : boolean
        }
        interface IHierarchyProperty$1<T>
        {
            IsCreated : boolean
            GetValue ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : T
            SetValue ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $value: T) : void
            ClearValue ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : void
        }
        class HierarchyPropertyUnmanaged$1<T> extends System.ValueType implements Unity.Hierarchy.IHierarchyProperty$1<T>, System.IEquatable$1<Unity.Hierarchy.HierarchyPropertyUnmanaged$1<T>>
        {
            protected [__keep_incompatibility]: never;
            public get IsCreated(): boolean;
            public SetValue ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $value: T) : void
            public GetValue ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : T
            public ClearValue ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : void
            public static op_Equality ($lhs: any, $rhs: any) : any
            public static op_Inequality ($lhs: any, $rhs: any) : any
            public Equals ($other: Unity.Hierarchy.HierarchyPropertyUnmanaged$1<T>) : boolean
            public Equals ($obj: any) : boolean
        }
        /** 
        Represent an enumerable of HierarchyNode with specific HierarchyNodeFlags.
        */
        class HierarchyViewNodesEnumerable extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the HierarchyNode enumerator.
            * @returns An enumerator. 
            */
            public GetEnumerator () : Unity.Hierarchy.HierarchyViewNodesEnumerable.Enumerator
        }
        /** 
        Describes how property values of a specific property are stored in memory.
        */
        enum HierarchyPropertyStorageType
        { Sparse = 0, Dense = 1, Blob = 2, Default = 1 }
        /** 
        Represents a list of commands that modify a hierarchy.
        */
        class HierarchyCommandList extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Determines if this object is valid and uses memory.
            */
            public get IsCreated(): boolean;
            /** 
            The current size in bytes used by commands in the command list.
            */
            public get Size(): number;
            /** 
            The capacity in bytes for storing commands in the command list.
            */
            public get Capacity(): number;
            /** 
            Determines if the command list is empty.
            */
            public get IsEmpty(): boolean;
            /** 
            Determines if the command list is currently executing.
            */
            public get IsExecuting(): boolean;
            /** 
            Disposes the command list and releases its memory.
            */
            public Dispose () : void
            /** 
            Clears all commands from the command list.
            */
            public Clear () : void
            /** 
            Reserves memory for nodes to use. Use this to avoid memory allocation hits when you add batches of nodes.
            * @param $count The number of nodes to reserve memory for.
            * @returns true if the command was appended to the list, false otherwise. 
            */
            public Reserve ($count: number) : boolean
            /** 
            Adds a new node that has a specified parent node to the hierarchy.
            * @param $parent The parent of the new node.
            * @param $node The new node if the command succeeds.
            * @returns true if the command was appended to the list, false otherwise. 
            */
            public Add ($parent: $Ref<Unity.Hierarchy.HierarchyNode>, $node: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            /** 
            Adds multiple new nodes that have a specified parent node to the hierarchy.
            * @param $parent The parent of the new nodes.
            * @param $count The number of nodes to create.
            * @param $nodes The new nodes if the command succeeds.
            * @returns true if the command was appended to the list, false otherwise. 
            */
            public Add ($parent: $Ref<Unity.Hierarchy.HierarchyNode>, $count: number, $nodes: $Ref<System.Array$1<Unity.Hierarchy.HierarchyNode>>) : boolean
            /** 
            Removes a node from the hierarchy.
            * @param $node The hierarchy node to remove.
            * @returns true if the command was appended to the list, false otherwise. 
            */
            public Remove ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            /** 
            Recursively removes all children of a node.
            * @param $node The hierarchy node.
            * @returns true if the command was appended to the list, false otherwise. 
            */
            public RemoveChildren ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            /** 
            Sets the parent node of a hierarchy node.
            * @param $node The hierarchy node to set a parent for.
            * @param $parent The hierarchy node to set as the parent node.
            * @returns true if the command was appended to the list, false otherwise. 
            */
            public SetParent ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $parent: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            /** 
            Sets the sorting index for a hierarchy node.
            * @param $node The hierarchy node to set a sorting index for.
            * @param $sortIndex The sorting index.
            * @returns true if the command was appended to the list, false otherwise. 
            */
            public SetSortIndex ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $sortIndex: number) : boolean
            /** 
            Sorts the child nodes of a hierarchy node by their sort index.
            * @param $node The hierarchy node with child nodes to sort by their index.
            * @param $recurse Whether to sort the child nodes recursively.
            * @returns true if the command was appended to the list, false otherwise. 
            */
            public SortChildren ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $recurse?: boolean) : boolean
            /** 
            Sets a value for a property of a hierarchy node
            * @param $name The property name.
            * @param $node The hierarchy node.
            * @param $value The property value.
            * @returns true if the command was appended to the list, false otherwise. 
            */
            public SetProperty ($property: $Ref<Unity.Hierarchy.HierarchyPropertyString>, $node: $Ref<Unity.Hierarchy.HierarchyNode>, $value: string) : boolean
            /** 
            Clears a property value for the specified hierarchy node.
            * @param $property The hierarchy property.
            * @param $node The hierarchy node.
            * @returns true if the command was appended to the list, false otherwise. 
            */
            public ClearProperty ($property: $Ref<Unity.Hierarchy.HierarchyPropertyString>, $node: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            /** 
            Sets a name for a hierarchy node.
            * @param $node The hierarchy node.
            * @param $name The name of the node.
            * @returns true if the command was appended to the list, false otherwise. 
            */
            public SetName ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $name: string) : boolean
            /** 
            Executes all the commands in the hierarchy command list.
            */
            public Execute () : void
            /** 
            Executes one command from the hierarchy command list.
            * @returns true if the command was appended to the list, false otherwise. 
            */
            public ExecuteIncremental () : boolean
            /** 
            Executes commands from the hierarchy command list until a time limit is reached.
            * @param $milliseconds The time limit in milliseconds.
            * @returns true if additional invocations are needed to complete the execution, false otherwise. 
            */
            public ExecuteIncrementalTimed ($milliseconds: number) : boolean
            public constructor ($hierarchy: Unity.Hierarchy.Hierarchy, $initialCapacity?: number)
        }
        /** 
        Represents a read-only array of HierarchyFlattenedNode over a Hierarchy. Used as an acceleration structure for query purposes.
        */
        class HierarchyFlattened extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Whether this object is valid and uses memory or not.
            */
            public get IsCreated(): boolean;
            /** 
            The total number of nodes.
            */
            public get Count(): number;
            /** 
            Whether the flattened hierarchy is currently updating.
            */
            public get Updating(): boolean;
            /** 
            Determines if the flattened hierarchy needs an update.
            */
            public get UpdateNeeded(): boolean;
            /** 
            Accesses the hierarchy.
            */
            public get Hierarchy(): Unity.Hierarchy.Hierarchy;
            public get_Item ($index: number) : $Ref<Unity.Hierarchy.HierarchyFlattenedNode>
            /** 
            Disposes this object to release its memory.
            */
            public Dispose () : void
            /** 
            Gets the zero-based index of a specified node.
            * @param $node The hierarchy node.
            * @returns A zero-based index of the node if found, and -1 otherwise. 
            */
            public IndexOf ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : number
            /** 
            Determines if a specified node is in the hierarchy flattened.
            * @param $node The hierarchy node.
            * @returns true if the node is found, false otherwise. 
            */
            public Contains ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            /** 
            Gets the parent of a hierarchy node.
            * @param $node The hierarchy node.
            * @returns A hierarchy node. 
            */
            public GetParent ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : Unity.Hierarchy.HierarchyNode
            /** 
            Gets the next sibling of a node.
            * @param $node The hierarchy node.
            * @returns A hierarchy node. 
            */
            public GetNextSibling ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : Unity.Hierarchy.HierarchyNode
            /** 
            Gets an enumerable of children HierarchyNode for the specified node.
            * @param $node The hierarchy node.
            * @returns The children enumerable. 
            */
            public EnumerateChildren ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : Unity.Hierarchy.HierarchyFlattenedNodeChildren
            /** 
            Gets the number of child nodes that a hierarchy node has.
            * @param $node The hierarchy node.
            * @returns The number of children. 
            */
            public GetChildrenCount ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : number
            /** 
            Gets the number of child nodes that a hierarchy node has, including children of children.
            * @param $node The hierarchy node.
            * @returns The number of child nodes, including children of children. 
            */
            public GetChildrenCountRecursive ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : number
            /** 
            Determines the depth of a node.
            * @param $node The hierarchy node.
            * @returns The depth of the hierarchy node. 
            */
            public GetDepth ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : number
            /** 
            Updates the flattened hierarchy and requests a rebuild of the list of HierarchyFlattenedNode from the Hierarchy topology.
            */
            public Update () : void
            /** 
            Updates the flattened hierarchy incrementally.
            * @returns true if additional invocations are needed to complete the update, false otherwise. 
            */
            public UpdateIncremental () : boolean
            /** 
            Incrementally updates the flattened hierarchy until a time limit is reached.
            * @param $milliseconds The time period in milliseconds.
            * @returns true if additional invocations are needed to complete the update, false otherwise. 
            */
            public UpdateIncrementalTimed ($milliseconds: number) : boolean
            /** 
            Gets the HierarchyFlattenedNode enumerator.
            * @returns An enumerator. 
            */
            public GetEnumerator () : Unity.Hierarchy.HierarchyFlattened.Enumerator
            public constructor ($hierarchy: Unity.Hierarchy.Hierarchy)
        }
        /** 
        Describes the type and size of a Hierarchy Property.
        */
        class HierarchyPropertyDescriptor extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The size of the property in bytes.
            */
            public get Size(): number;
            public set Size(value: number);
            /** 
            The storage type of the property.
            */
            public get Type(): Unity.Hierarchy.HierarchyPropertyStorageType;
            public set Type(value: Unity.Hierarchy.HierarchyPropertyStorageType);
        }
        /** 
        Represents options for search filter operators. A colon (:) is the "contains" operator. A "-" is a "not" operator.
        */
        enum HierarchySearchFilterOperator
        { Equal = 0, Contains = 1, Greater = 2, GreaterOrEqual = 3, Lesser = 4, LesserOrEqual = 5, NotEqual = 6, Not = 7 }
        /** 
        Encapsulates all data needed to filter a hierarchy.
        */
        class HierarchySearchFilter extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default invalid HierarchySearchFilter. This assumes the Hierarchy has a query, but is invalid, so no nodes are shown.
            */
            public static get Invalid(): $Ref<Unity.Hierarchy.HierarchySearchFilter>;
            /** 
            Whether the filter is valid and has a name.
            */
            public get IsValid(): boolean;
            /** 
            The name of the filter.
            */
            public get Name(): string;
            public set Name(value: string);
            /** 
            The textual value of the filter.
            */
            public get Value(): string;
            public set Value(value: string);
            /** 
            Filter numerical value.
            */
            public get NumValue(): number;
            public set NumValue(value: number);
            /** 
            The filter search operator.
            */
            public get Op(): Unity.Hierarchy.HierarchySearchFilterOperator;
            public set Op(value: Unity.Hierarchy.HierarchySearchFilterOperator);
            /** 
            Converts an operator to its textual value.
            * @param $op The filter operator
            * @returns The operator textual value. 
            */
            public static ToString ($op: Unity.Hierarchy.HierarchySearchFilterOperator) : string
            /** 
            Converts a textual value to its operator value if possible. 
            */
            public static ToOp ($op: string) : Unity.Hierarchy.HierarchySearchFilterOperator
            public ToString () : string
        }
        /** 
        Encapsulates all the query filters and text values that are used to filter a hierarchy.
        */
        class HierarchySearchQueryDescriptor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default empty query.
            */
            public static get Empty(): Unity.Hierarchy.HierarchySearchQueryDescriptor;
            /** 
            The default invalid query.
            */
            public static get InvalidQuery(): Unity.Hierarchy.HierarchySearchQueryDescriptor;
            /** 
            The filters used by the hierarchy. Filters are in this form: [filterName][operator][filterValue]. For example: nodetype:gameobject. These filters are global to all NodeHandlers.
            */
            public get SystemFilters(): System.Array$1<Unity.Hierarchy.HierarchySearchFilter>;
            public set SystemFilters(value: System.Array$1<Unity.Hierarchy.HierarchySearchFilter>);
            /** 
            User-defined filters. Filters are in this form [filterName][operator][filterValue]. For example: t:Light. Each of these filters can be used by a NodeHandler to filter according to domain-specific characteristics.
            */
            public get Filters(): System.Array$1<Unity.Hierarchy.HierarchySearchFilter>;
            public set Filters(value: System.Array$1<Unity.Hierarchy.HierarchySearchFilter>);
            /** 
            All textual values. For example: "cube"
            */
            public get TextValues(): System.Array$1<string>;
            public set TextValues(value: System.Array$1<string>);
            /** 
            Whether the query is evaluated strictly. This means that if any filters are invalid, then the whole query is invalid.
            */
            public get Strict(): boolean;
            public set Strict(value: boolean);
            /** 
            Whether the query invalid. An invalid query yields no node.
            */
            public get Invalid(): boolean;
            public set Invalid(value: boolean);
            /** 
            Whether the query is valid.
            */
            public get IsValid(): boolean;
            /** 
            Whether the query is empty. 
            */
            public get IsEmpty(): boolean;
            /** 
            Whether the query uses system filters. This means NodeHandlers won't be called for filtering.
            */
            public get IsSystemOnlyQuery(): boolean;
            public constructor ($filters?: System.Array$1<Unity.Hierarchy.HierarchySearchFilter>, $textValues?: System.Array$1<string>)
            public constructor ($desc: Unity.Hierarchy.HierarchySearchQueryDescriptor)
        }
        /** 
        A hierarchy view model is a read-only filtering view of a HierarchyFlattened. 
        */
        class HierarchyViewModel extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Whether this object is valid and uses memory.
            */
            public get IsCreated(): boolean;
            /** 
            The total number of nodes.
            */
            public get Count(): number;
            /** 
            Whether the hierarchy view model is currently updating.
            */
            public get Updating(): boolean;
            /** 
            Whether the hierarchy view model requires an update.
            */
            public get UpdateNeeded(): boolean;
            /** 
            Accesses the HierarchyFlattened.
            */
            public get HierarchyFlattened(): Unity.Hierarchy.HierarchyFlattened;
            /** 
            Accesses the Hierarchy.
            */
            public get Hierarchy(): Unity.Hierarchy.Hierarchy;
            /** 
            Disposes this object and releases its memory.
            */
            public Dispose () : void
            public get_Item ($index: number) : $Ref<Unity.Hierarchy.HierarchyNode>
            /** 
            Gets the zero-based index of a specified node.
            * @param $node The hierarchy node.
            * @returns A zero-based index of the node if found, -1 otherwise. 
            */
            public IndexOf ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : number
            /** 
            Determines if a specified node is in the hierarchy view model.
            * @param $node The hierarchy node.
            * @returns true if the node is found, false otherwise. 
            */
            public Contains ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : boolean
            /** 
            Gets the parent of a hierarchy node.
            * @param $node The hierarchy node.
            * @returns A hierarchy node. 
            */
            public GetParent ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : Unity.Hierarchy.HierarchyNode
            /** 
            Gets the next sibling of a node.
            * @param $node The hierarchy node.
            * @returns A hierarchy node. 
            */
            public GetNextSibling ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : Unity.Hierarchy.HierarchyNode
            /** 
            Gets the number of child nodes that a hierarchy node has.
            * @param $node The hierarchy node.
            * @returns The number of children. 
            */
            public GetChildrenCount ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : number
            /** 
            Gets the number of child nodes that a hierarchy node has, including children of children.
            * @param $node The hierarchy node.
            * @returns The number of child nodes, including children of children. 
            */
            public GetChildrenCountRecursive ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : number
            /** 
            Determines the depth of a node.
            * @param $node The hierarchy node.
            * @returns The depth of the hierarchy node. 
            */
            public GetDepth ($node: $Ref<Unity.Hierarchy.HierarchyNode>) : number
            /** 
            Sets the specified flags on all hierarchy nodes.
            * @param $flags The hierarchy node flags.
            */
            public SetFlags ($flags: Unity.Hierarchy.HierarchyNodeFlags) : void
            /** 
            Sets the specified flags on the hierarchy node.
            * @param $node The hierarchy node.
            * @param $flags The hierarchy node flags.
            * @param $recurse Whether or not to set the flags on all children recursively for that hierarchy node.
            */
            public SetFlags ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $flags: Unity.Hierarchy.HierarchyNodeFlags, $recurse?: boolean) : void
            /** 
            Gets whether or not the specified flags is set on any hierarchy node.
            * @param $flags The hierarchy node flags.
            * @returns true if any node have the flags set, false otherwise. 
            */
            public HasFlags ($flags: Unity.Hierarchy.HierarchyNodeFlags) : boolean
            /** 
            Gets whether or not the specified flags is set on the hierarchy node.
            * @param $node The hierarchy node.
            * @param $flags The hierarchy node flags.
            * @returns true if the flags is set, false otherwise. 
            */
            public HasFlags ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $flags: Unity.Hierarchy.HierarchyNodeFlags) : boolean
            /** 
            Gets the number of nodes that have the specified flags set.
            * @param $flags The hierarchy node flags.
            * @returns The number of nodes that have the flags set. 
            */
            public HasFlagsCount ($flags: Unity.Hierarchy.HierarchyNodeFlags) : number
            /** 
            Gets whether or not the specified flags is not set on any hierarchy node.
            * @param $flags The hierarchy node flags.
            * @returns true if any node have the flags set, false otherwise. 
            */
            public DoesNotHaveFlags ($flags: Unity.Hierarchy.HierarchyNodeFlags) : boolean
            /** 
            Gets whether or not the specified flags is not set on the hierarchy node.
            * @param $node The hierarchy node.
            * @param $flags The hierarchy node flags.
            * @returns true if the flags is not set, false otherwise. 
            */
            public DoesNotHaveFlags ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $flags: Unity.Hierarchy.HierarchyNodeFlags) : boolean
            /** 
            Gets the number of nodes that does not have the specified flags set.
            * @param $flags The hierarchy node flags.
            * @returns The number of nodes that does not have the flags set. 
            */
            public DoesNotHaveFlagsCount ($flags: Unity.Hierarchy.HierarchyNodeFlags) : number
            /** 
            Clears the specified flags on all hierarchy nodes.
            * @param $flags The hierarchy node flags.
            */
            public ClearFlags ($flags: Unity.Hierarchy.HierarchyNodeFlags) : void
            /** 
            Clears the specified flags on the hierarchy node.
            * @param $node The hierarchy node.
            * @param $flags The hierarchy node flags.
            * @param $recurse Whether or not to clear the flags on all children recursively for that hierarchy node.
            */
            public ClearFlags ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $flags: Unity.Hierarchy.HierarchyNodeFlags, $recurse?: boolean) : void
            /** 
            Toggles the specified flags on all hierarchy nodes.
            * @param $flags The hierarchy node flags.
            */
            public ToggleFlags ($flags: Unity.Hierarchy.HierarchyNodeFlags) : void
            /** 
            Toggles the specified flags on the hierarchy node.
            * @param $node The hierarchy node.
            * @param $flags The hierarchy node flags.
            * @param $recurse Whether or not to clear the flags on all children recursively for that hierarchy node.
            */
            public ToggleFlags ($node: $Ref<Unity.Hierarchy.HierarchyNode>, $flags: Unity.Hierarchy.HierarchyNodeFlags, $recurse?: boolean) : void
            /** 
            Gets all hierarchy nodes that have the specified flags set.
            * @param $flags The hierarchy node flags.
            * @returns The hierarchy nodes. 
            */
            public GetNodesWithFlags ($flags: Unity.Hierarchy.HierarchyNodeFlags) : System.Array$1<Unity.Hierarchy.HierarchyNode>
            /** 
            Gets an enumerable of all hierarchy nodes that have the specified flags set.
            * @param $flags The hierarchy node flags.
            * @returns An enumerable of hierarchy node. 
            */
            public EnumerateNodesWithFlags ($flags: Unity.Hierarchy.HierarchyNodeFlags) : Unity.Hierarchy.HierarchyViewNodesEnumerable
            /** 
            Gets all hierarchy node indices that have the specified flags set.
            * @param $flags The hierarchy node flags.
            * @returns The hierarchy node indices. 
            */
            public GetIndicesWithFlags ($flags: Unity.Hierarchy.HierarchyNodeFlags) : System.Array$1<number>
            /** 
            Gets all hierarchy nodes that does not have the specified flags set.
            * @param $flags The hierarchy node flags.
            * @returns The hierarchy nodes. 
            */
            public GetNodesWithoutFlags ($flags: Unity.Hierarchy.HierarchyNodeFlags) : System.Array$1<Unity.Hierarchy.HierarchyNode>
            /** 
            Gets an enumerable of all hierarchy nodes that does not have the specified flags set.
            * @param $flags The hierarchy node flags.
            * @returns An enumerable of hierarchy node. 
            */
            public EnumerateNodesWithoutFlags ($flags: Unity.Hierarchy.HierarchyNodeFlags) : Unity.Hierarchy.HierarchyViewNodesEnumerable
            /** 
            Gets all hierarchy node indices that does not have the specified flags set.
            * @param $flags The hierarchy node flags.
            * @returns The hierarchy node indices. 
            */
            public GetIndicesWithoutFlags ($flags: Unity.Hierarchy.HierarchyNodeFlags) : System.Array$1<number>
            /** 
            Sets the search query.
            * @param $query The search query.
            */
            public SetQuery ($query: string) : void
            /** 
            Updates the hierarchy view model and requests a rebuild of the list of HierarchyNode that filters the HierarchyFlattened.
            */
            public Update () : void
            /** 
            Updates the hierarchy view model incrementally. 
            * @returns true if additional invocations are needed to complete the update, false otherwise. 
            */
            public UpdateIncremental () : boolean
            /** 
            Updates the hierarchy view model incrementally until a time limit is reached.
            * @param $milliseconds The time period in milliseconds.
            * @returns true if additional invocations are needed to complete the update, false otherwise. 
            */
            public UpdateIncrementalTimed ($milliseconds: number) : boolean
            /** 
            Gets the HierarchyNode enumerator.
            * @returns An enumerator. 
            */
            public GetEnumerator () : Unity.Hierarchy.HierarchyViewModel.Enumerator
            public constructor ($hierarchyFlattened: Unity.Hierarchy.HierarchyFlattened, $defaultFlags?: Unity.Hierarchy.HierarchyNodeFlags)
        }
    }
    namespace Unity.Hierarchy.HierarchyFlattenedNodeChildren {
        class Enumerator extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Current(): $Ref<Unity.Hierarchy.HierarchyNode>;
            public MoveNext () : boolean
        }
    }
    namespace Unity.Hierarchy.HierarchyNodeChildren {
        class Enumerator extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Current(): $Ref<Unity.Hierarchy.HierarchyNode>;
            public MoveNext () : boolean
        }
    }
    namespace Unity.Hierarchy.HierarchyViewNodesEnumerable {
        class Enumerator extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Current(): $Ref<Unity.Hierarchy.HierarchyNode>;
            public MoveNext () : boolean
        }
    }
    namespace Unity.Hierarchy.HierarchyFlattened {
        class Enumerator extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Current(): $Ref<Unity.Hierarchy.HierarchyFlattenedNode>;
            public MoveNext () : boolean
        }
    }
    namespace Unity.Hierarchy.HierarchyViewModel {
        class Enumerator extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Current(): $Ref<Unity.Hierarchy.HierarchyNode>;
            public MoveNext () : boolean
        }
    }
    namespace UnityEngine.CanvasRenderer {
        interface OnRequestRebuild
        { 
        () : void; 
        Invoke?: () => void;
        }
        var OnRequestRebuild: { new (func: () => void): OnRequestRebuild; }
    }
    namespace UnityEngine.Canvas {
        interface WillRenderCanvases
        { 
        () : void; 
        Invoke?: () => void;
        }
        var WillRenderCanvases: { new (func: () => void): WillRenderCanvases; }
    }
    namespace UnityEngine.UISystemProfilerApi {
        enum SampleType
        { Layout = 0, Render = 1 }
    }
}
