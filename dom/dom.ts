import { EventBase } from "UnityEngine/UIElements";
import { DomStyleWrapper } from "./dom-style"

export class DomWrapper {
    public get _dom(): CS.OneJS.Dom.Dom { return this.dom }
    public get ve(): CS.UnityEngine.UIElements.VisualElement { return this.dom.ve }
    public get childNodes(): DomWrapper[] {
        if (this.cachedChildNodes) return this.cachedChildNodes
        this.cachedChildNodes = new Array(this.dom.childNodes.Length) as DomWrapper[];
        var i = this.dom.childNodes.Length;
        while (i--) {
            this.cachedChildNodes[i] = new DomWrapper(this.dom.childNodes.get_Item(i));
        }
        return this.cachedChildNodes
    }
    public get firstChild(): DomWrapper | null {
        return this.dom.firstChild ? new DomWrapper(this.dom.firstChild) : null;
    }
    public get parentNode(): DomWrapper | null {
        return this.dom.parentNode ? new DomWrapper(this.dom.parentNode) : null;
    }
    public get nextSibling(): DomWrapper | null {
        return this.dom.nextSibling ? new DomWrapper(this.dom.nextSibling) : null;
    }

    public get nodeType(): number { return this.dom.nodeType }
    public get style(): DomStyleWrapper { return this.domStyleWrapper }
    public get Id(): string { return this.dom.Id }
    public set Id(value: string) { this.dom.Id = value }
    public get key(): string { return this.dom.key }
    public set key(value: string) { this.dom.key = value }
    public get value(): any { return this.dom.value }
    public get checked(): boolean { return this.dom.checked }
    public get data(): any { return this.dom.data }
    public set data(value: any) { this.dom.data = value }

    public get classname(): string { return this.dom.classname }
    public set classname(value: string) { this.dom.classname = value }

    /**
     * Not using private fields because of issues with the `#private;` line
     * generated by tsc
     */
    dom: CS.OneJS.Dom.Dom
    domStyleWrapper: DomStyleWrapper

    cachedChildNodes: DomWrapper[] | null = null
    boundListeners = new WeakMap();

    constructor(dom: CS.OneJS.Dom.Dom) {
        this.dom = dom
        this.domStyleWrapper = new DomStyleWrapper(dom.style)
    }

    appendChild(child: DomWrapper) {
        if (!child) return
        this.dom.appendChild(child.dom)
        this.cachedChildNodes = null
    }

    removeChild(child: DomWrapper) {
        if (!child) return
        this.dom.removeChild(child.dom)
        this.cachedChildNodes = null
    }

    insertBefore(a: DomWrapper, b: DomWrapper) {
        this.dom.insertBefore(a?._dom, b?._dom)
        this.cachedChildNodes = null
    }

    contains(child: DomWrapper) {
        if (!child) return false
        return this.dom.contains(child._dom)
    }

    clearChildren() {
        this.dom.clearChildren()
        this.cachedChildNodes = null
    }

    focus() {
        this.dom.focus()
    }

    addEventListener(type: string, listener: (event: EventBase) => void, useCapture?: boolean) {
        let boundListener = this.boundListeners.get(listener);
        if (!boundListener) {
            boundListener = listener.bind(this);
            this.boundListeners.set(listener, boundListener);
        }
        this.dom.addEventListener(type, boundListener, useCapture ? true : false)
    }

    removeEventListener(type: string, listener: (event: EventBase) => void, useCapture?: boolean) {
        const boundListener = this.boundListeners.get(listener);
        if (boundListener) {
            this.dom.removeEventListener(type, boundListener, useCapture ? true : false)
            this.boundListeners.delete(listener); // isn't strictly necessary for WeakMap, but still good practice
        }
    }

    setAttribute(name: string, value: any) {
        this.dom.setAttribute(name, value)
    }

    removeAttribute(name: string) {
        this.dom.removeAttribute(name)
    }
}